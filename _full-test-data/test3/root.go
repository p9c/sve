package main

// DO NOT EDIT: This file was generated by engine. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "encoding/json"
import "github.com/p9c/sve/engine"
import js "github.com/p9c/sve/pkg/js"

type Root struct {
	ItemCount int `sve:"data"`
}

func (c *Root) BeforeBuild() {
	if c.ItemCount == 0 {
		c.ItemCount = 5
	}
}

func (c *Root) OnAdd() {
	c.ItemCount++
}

func (c *Root) Build(vgin *engine.BuildIn) (vgout *engine.BuildOut) {

	vgout = &sve.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *sve.VGNode
	vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "html", Attr: []sve.VGAttribute(nil)}
	vgout.Out = append(vgout.Out, vgn) // root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "head", Attr: []sve.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "title", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "Test page"}
				vgparent.AppendChild(vgn)
			}
			vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "link", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "rel", Val: "stylesheet"}, engine.VGAttribute{Namespace: "", Key: "href", Val: "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"}, engine.VGAttribute{Namespace: "", Key: "integrity", Val: "sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"}, engine.VGAttribute{Namespace: "", Key: "crossorigin", Val: "anonymous"}}}
			vgout.AppendCSS(vgn)
			vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n    "}
			vgparent.AppendChild(vgn)
		}
		vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "body", Attr: []sve.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "test-div"}, engine.VGAttribute{Namespace: "", Key: "id", Val: "test_div_id"}}}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n\n            "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				{
					vghtml := fmt.Sprint("Let\x26#39;s see how this goes:")
					vgn.InnerHTML = &vghtml
				}
				vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n\n            "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "ul", Attr: []sve.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				{
					vgparent := vgn
					_ = vgparent
					vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					for i := 0; i < c.ItemCount; i++ {
						var vgiterkey interface{} = i
						{
							vgcompKey := engine.CompKey{ID: 0x5D7EC887AD9C25A5, IterKey: vgiterkey}
							// ask BuildEnv for prior instance of this specific component
							vgcomp, _ := vgin.BuildEnv.CachedComponent(vgcompKey).(*DemoLine)
							if vgcomp == nil {
								// create new one if needed
								vgcomp = new(DemoLine)
							}
							vgin.BuildEnv.UseComponent(vgcompKey, vgcomp) // ensure we can use this in the cache next time around
							vgcomp.Num = i
							vgout.Components = append(vgout.Components, vgcomp)
							vgn = &sve.VGNode{Component: vgcomp}
							vgparent.AppendChild(vgn)
						}
					}
					vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n            "}
					vgparent.AppendChild(vgn)
				}
				vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n\n            "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "button", Attr: []sve.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, engine.DOMEventHandlerSpec{
					EventType: "click",
					Func:      func(event *sve.DOMEvent) { c.OnAdd() },
					// TODO: implement capture, etc. mostly need to decide syntax
				})
				{
					vgparent := vgn
					_ = vgparent
					vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "Add"}
					vgparent.AppendChild(vgn)
				}
				vgn = &sve.VGNode{Type: engine.VGNodeType(1), Data: "\n\n        "}
				vgparent.AppendChild(vgn)
			}
			vgn = &sve.VGNode{Type: engine.VGNodeType(3), Data: "style", Attr: []sve.VGAttribute(nil)}
			{
				vgn.AppendChild(&sve.VGNode{Type: engine.VGNodeType(1), Data: "\n#test_div_id {\n    background: #ddd;\n}\n", Attr: []sve.VGAttribute(nil)})
			}
			vgout.AppendCSS(vgn)
		}
	}
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ json.RawMessage
var _ js.Value
