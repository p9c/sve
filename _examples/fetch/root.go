package main

// DO NOT EDIT: This file was generated by sve. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "encoding/json"
import "github.com/p9c/sve"
import js "github.com/p9c/sve/js"

import "net/http"
import "log"

type RootData struct {
	bpi		bpi
	isLoading	bool
}

type bpi struct {
	Time	struct {
		Updated string `json:"updated"`
	}	`json:"time"`
	BPI	map[string]struct {
		Code		string	`json:"code"`
		Symbol		string	`json:"symbol"`
		RateFloat	float64	`json:"rate_float"`
	}	`json:"bpi"`
}

func (data *RootData) HandleClick(event *event.DOMEvent) {

	data.bpi = bpi{}

	go func(ee event.EventEnv) {

		ee.Lock()
		data.isLoading = true
		ee.UnlockRender()

		res, err := http.Get("https://api.coindesk.com/v1/bpi/currentprice.json")
		if err != nil {
			log.Printf("Error fetch()ing: %v", err)
			return
		}
		defer res.Body.Close()

		var newb bpi
		err = json.NewDecoder(res.Body).Decode(&newb)
		if err != nil {
			log.Printf("Error JSON decoding: %v", err)
			return
		}

		ee.Lock()
		defer ee.UnlockRender()
		data.bpi = newb
		data.isLoading = false

	}(event.EventEnv())
}

func (c *Root) Build(vgin *sve.BuildIn) (vgout *sve.BuildOut) {

	vgout = &sve.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *sve.VGNode
	vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "demo-comp"}}}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		if data.isLoading {
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "Loading..."}
				vgparent.AppendChild(vgn)
			}
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		if len(data.bpi.BPI) > 0 {
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				{
					vgparent := vgn
					_ = vgparent
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "Updated: "}
					vgparent.AppendChild(vgn)
					vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "span", Attr: []sve.VGAttribute(nil)}
					vgparent.AppendChild(vgn)
					{
						vghtml := fmt.Sprint(data.bpi.Time.Updated)
						vgn.InnerHTML = &vghtml
					}
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "ul", Attr: []sve.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				{
					vgparent := vgn
					_ = vgparent
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            "}
					vgparent.AppendChild(vgn)
					for key, value := range data.bpi.BPI {
						var vgiterkey interface{} = key
						_, _ = key, value
						vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "li", Attr: []sve.VGAttribute(nil)}
						vgparent.AppendChild(vgn)
						{
							vgparent := vgn
							_ = vgparent
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                "}
							vgparent.AppendChild(vgn)
							vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "span", Attr: []sve.VGAttribute(nil)}
							vgparent.AppendChild(vgn)
							{
								vghtml := fmt.Sprint(key)
								vgn.InnerHTML = &vghtml
							}
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: " "}
							vgparent.AppendChild(vgn)
							vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "span", Attr: []sve.VGAttribute(nil)}
							vgparent.AppendChild(vgn)
							{
								vghtml := fmt.Sprint(fmt.Sprint(value.Symbol, value.RateFloat))
								vgn.InnerHTML = &vghtml
							}
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            "}
							vgparent.AppendChild(vgn)
						}
					}
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
					vgparent.AppendChild(vgn)
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
				vgparent.AppendChild(vgn)
			}
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "button", Attr: []sve.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, sve.DOMEventHandlerSpec{
			EventType:	"click",
			Func:		func(event *sve.DOMEvent) { data.HandleClick(event) },
			// TODO: implement capture, etc. mostly need to decide syntax
		})
		{
			vgparent := vgn
			_ = vgparent
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "Fetch Bitcoin Price Index"}
			vgparent.AppendChild(vgn)
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n"}
		vgparent.AppendChild(vgn)
	}
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ json.RawMessage
var _ js.Value

type Root struct {}
