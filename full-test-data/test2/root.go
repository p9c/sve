package main

// DO NOT EDIT: This file was generated by sve. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "encoding/json"
import "github.com/p9c/sve"
import js "github.com/p9c/sve/js"

import "log"

type Root struct {
	Something	int
	Success		bool

	EmailValue	string
	UseSuffix	bool
}

func (c *Root) OnClickRun(event *sve.DOMEvent, n int) {
	c.Success = !c.Success
	//log.Printf("HEY, GOT HERE!")
}

func (c *Root) OnUseSuffixChange(event *sve.DOMEvent) {
	es := event.EventSummary()
	t, _ := es["target"].(map[string]interface{})
	log.Printf("OnUseSuffixChange: %#v", t["checked"])
	//c.EmailValue, _ = t["value"].(string)
}

func (c *Root) EmailChanged(event *sve.DOMEvent) {

	c.EmailValue = event.PropString("target", "value")

	/*
	   es := event.EventSummary()
	   t, _ := es["target"].(map[string]interface{})
	   c.EmailValue, _ = t["value"].(string)

	   b, _ := json.Marshal(event.EventSummary())
	   log.Printf("event.EventSummary: %s", b)
	*/
}

func (c *Root) Build(vgin *sve.BuildIn) (vgout *sve.BuildOut, vgreterr error) {

	vgout = &sve.BuildOut{}

	var vgn *sve.VGNode
	vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "html", Attr: []sve.VGAttribute(nil)}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "head", Attr: []sve.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "title", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "Test page"}
				vgparent.AppendChild(vgn)
			}
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "link", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "rel", Val: "stylesheet"}, sve.VGAttribute{Namespace: "", Key: "href", Val: "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"}, sve.VGAttribute{Namespace: "", Key: "integrity", Val: "sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"}, sve.VGAttribute{Namespace: "", Key: "crossorigin", Val: "anonymous"}}}
			vgout.CSS = append(vgout.CSS, vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "script", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "src", Val: "https://code.jquery.com/jquery-3.3.1.slim.min.js"}, sve.VGAttribute{Namespace: "", Key: "integrity", Val: "sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"}, sve.VGAttribute{Namespace: "", Key: "crossorigin", Val: "anonymous"}}}
			vgout.JS = append(vgout.JS, vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "script", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "src", Val: "https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"}, sve.VGAttribute{Namespace: "", Key: "integrity", Val: "sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"}, sve.VGAttribute{Namespace: "", Key: "crossorigin", Val: "anonymous"}}}
			vgout.JS = append(vgout.JS, vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "script", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "src", Val: "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"}, sve.VGAttribute{Namespace: "", Key: "integrity", Val: "sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"}, sve.VGAttribute{Namespace: "", Key: "crossorigin", Val: "anonymous"}}}
			vgout.JS = append(vgout.JS, vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
			vgparent.AppendChild(vgn)
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "body", Attr: []sve.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		{
			vgparent := vgn
			_ = vgparent
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "test-div"}, sve.VGAttribute{Namespace: "", Key: "id", Val: "test_div_id"}}}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            This is a test.\n            "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "button", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "id", Val: "run1"}}}
				vgparent.AppendChild(vgn)
				vgn.Attr = append(vgn.Attr, sve.VGAttribute{Key: "data-whatever", Val: fmt.Sprint(c.Something)})
				vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, sve.DOMEventHandlerSpec{
					EventType:	"click",
					Func:		func(event *sve.DOMEvent) { c.OnClickRun(event, 7) },
					// TODO: implement capture, etc. mostly need to decide syntax
				})
				{
					vgparent := vgn
					_ = vgparent
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "run1"}
					vgparent.AppendChild(vgn)
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "button", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "id", Val: "run2"}}}
				vgparent.AppendChild(vgn)
				vgn.Attr = append(vgn.Attr, sve.VGAttribute{Key: "data-whatever", Val: fmt.Sprint(c.Something)})
				vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, sve.DOMEventHandlerSpec{
					EventType:	"click",
					Func:		func(event *sve.DOMEvent) { c.Success = !c.Success },
					// TODO: implement capture, etc. mostly need to decide syntax
				})
				{
					vgparent := vgn
					_ = vgparent
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "run2"}
					vgparent.AppendChild(vgn)
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            "}
				vgparent.AppendChild(vgn)
				if c.Success {
					vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "id", Val: "success"}}}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "success"}
						vgparent.AppendChild(vgn)
					}
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				{
					vghtml := "Some <strong>content</strong> here"
					vgn.InnerHTML = &vghtml
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "container"}}}
				vgparent.AppendChild(vgn)
				{
					vgparent := vgn
					_ = vgparent
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "form", Attr: []sve.VGAttribute(nil)}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                    "}
						vgparent.AppendChild(vgn)
						vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "form-group"}}}
						vgparent.AppendChild(vgn)
						{
							vgparent := vgn
							_ = vgparent
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                        "}
							vgparent.AppendChild(vgn)
							vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "label", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "for", Val: "exampleInputEmail1"}}}
							vgparent.AppendChild(vgn)
							{
								vghtml := "Email address"
								vgn.InnerHTML = &vghtml
							}
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                        "}
							vgparent.AppendChild(vgn)
							vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "input", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "type", Val: "email"}, sve.VGAttribute{Namespace: "", Key: "class", Val: "form-control"}, sve.VGAttribute{Namespace: "", Key: "id", Val: "exampleInputEmail1"}, sve.VGAttribute{Namespace: "", Key: "aria-describedby", Val: "emailHelp"}, sve.VGAttribute{Namespace: "", Key: "placeholder", Val: "Enter email"}}}
							vgparent.AppendChild(vgn)
							vgn.Attr = append(vgn.Attr, sve.VGAttribute{Key: "value", Val: fmt.Sprint(c.EmailValue)})
							vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, sve.DOMEventHandlerSpec{
								EventType:	"change",
								Func:		func(event *sve.DOMEvent) { c.EmailChanged(event) },
								// TODO: implement capture, etc. mostly need to decide syntax
							})
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                        "}
							vgparent.AppendChild(vgn)
							vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "small", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "id", Val: "emailHelp"}, sve.VGAttribute{Namespace: "", Key: "class", Val: "form-text text-muted"}}}
							vgparent.AppendChild(vgn)
							{
								vghtml := "We\x26#39;ll never share your email with anyone else."
								vgn.InnerHTML = &vghtml
							}
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                    "}
							vgparent.AppendChild(vgn)
						}
						vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                    "}
						vgparent.AppendChild(vgn)
						vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "form-check"}}}
						vgparent.AppendChild(vgn)
						{
							vgparent := vgn
							_ = vgparent
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                        "}
							vgparent.AppendChild(vgn)
							vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "input", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "type", Val: "checkbox"}, sve.VGAttribute{Namespace: "", Key: "class", Val: "form-check-input"}, sve.VGAttribute{Namespace: "", Key: "id", Val: "exampleCheck1"}}}
							vgparent.AppendChild(vgn)
							{
								b, err := json.Marshal(true)
								if err != nil {
									return nil, err
								}
								vgn.Prop = append(vgn.Prop, sve.VGProperty{Key: "checked", Val: json.RawMessage(b)})
							}
							vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, sve.DOMEventHandlerSpec{
								EventType:	"change",
								Func:		func(event *sve.DOMEvent) { c.OnUseSuffixChange(event) },
								// TODO: implement capture, etc. mostly need to decide syntax
							})
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                        "}
							vgparent.AppendChild(vgn)
							vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "label", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "form-check-label"}, sve.VGAttribute{Namespace: "", Key: "for", Val: "exampleCheck1"}}}
							vgparent.AppendChild(vgn)
							{
								vghtml := "Assume @gmail.com"
								vgn.InnerHTML = &vghtml
							}
							vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                    "}
							vgparent.AppendChild(vgn)
						}
						vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                "}
						vgparent.AppendChild(vgn)
					}
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n                "}
					vgparent.AppendChild(vgn)
					vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
					vgparent.AppendChild(vgn)
					{
						vgparent := vgn
						_ = vgparent
						vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "em", Attr: []sve.VGAttribute(nil)}
						vgparent.AppendChild(vgn)
						{
							vghtml := c.EmailValue
							vgn.InnerHTML = &vghtml
						}
					}
					vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n            "}
					vgparent.AppendChild(vgn)
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
			}
		}
	}
	return vgout, nil
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ json.RawMessage
var _ js.Value
