// +build minimal

package widgets

//#include <stdint.h>
//#include <stdlib.h>
//#include <string.h>
//#include "widgets-minimal.h"
import "C"
import (
	"github.com/p9c/sve/pkg/qt"
	"github.com/p9c/sve/pkg/qt/core"
	"github.com/p9c/sve/pkg/qt/gui"
	"runtime"
	"strings"
	"unsafe"
)

func cGoUnpackString(s C.struct_QtWidgets_PackedString) string {
	if int(s.len) == -1 {
		return C.GoString(s.data)
	}
	return C.GoStringN(s.data, C.int(s.len))
}
func cGoUnpackBytes(s C.struct_QtWidgets_PackedString) []byte {
	if int(s.len) == -1 {
		gs := C.GoString(s.data)
		return *(*[]byte)(unsafe.Pointer(&gs))
	}
	return C.GoBytes(unsafe.Pointer(s.data), C.int(s.len))
}
func unpackStringList(s string) []string {
	if len(s) == 0 {
		return make([]string, 0)
	}
	return strings.Split(s, "¡¦!")
}

type QAbstractGraphicsShapeItem struct {
	QGraphicsItem
}

type QAbstractGraphicsShapeItem_ITF interface {
	QGraphicsItem_ITF
	QAbstractGraphicsShapeItem_PTR() *QAbstractGraphicsShapeItem
}

func (ptr *QAbstractGraphicsShapeItem) QAbstractGraphicsShapeItem_PTR() *QAbstractGraphicsShapeItem {
	return ptr
}

func (ptr *QAbstractGraphicsShapeItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QAbstractGraphicsShapeItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsItem_PTR().SetPointer(p)
	}
}

func PointerFromQAbstractGraphicsShapeItem(ptr QAbstractGraphicsShapeItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractGraphicsShapeItem_PTR().Pointer()
	}
	return nil
}

func NewQAbstractGraphicsShapeItemFromPointer(ptr unsafe.Pointer) (n *QAbstractGraphicsShapeItem) {
	n = new(QAbstractGraphicsShapeItem)
	n.SetPointer(ptr)
	return
}
func NewQAbstractGraphicsShapeItem(parent QGraphicsItem_ITF) *QAbstractGraphicsShapeItem {
	return NewQAbstractGraphicsShapeItemFromPointer(C.QAbstractGraphicsShapeItem_NewQAbstractGraphicsShapeItem(PointerFromQGraphicsItem(parent)))
}

func (ptr *QAbstractGraphicsShapeItem) SetBrush(brush gui.QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractGraphicsShapeItem_SetBrush(ptr.Pointer(), gui.PointerFromQBrush(brush))
	}
}

func (ptr *QAbstractGraphicsShapeItem) SetPen(pen gui.QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractGraphicsShapeItem_SetPen(ptr.Pointer(), gui.PointerFromQPen(pen))
	}
}

//export callbackQAbstractGraphicsShapeItem_DestroyQAbstractGraphicsShapeItem
func callbackQAbstractGraphicsShapeItem_DestroyQAbstractGraphicsShapeItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QAbstractGraphicsShapeItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQAbstractGraphicsShapeItemFromPointer(ptr).DestroyQAbstractGraphicsShapeItemDefault()
	}
}

func (ptr *QAbstractGraphicsShapeItem) ConnectDestroyQAbstractGraphicsShapeItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QAbstractGraphicsShapeItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QAbstractGraphicsShapeItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QAbstractGraphicsShapeItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractGraphicsShapeItem) DisconnectDestroyQAbstractGraphicsShapeItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QAbstractGraphicsShapeItem")
	}
}

func (ptr *QAbstractGraphicsShapeItem) DestroyQAbstractGraphicsShapeItem() {
	if ptr.Pointer() != nil {
		C.QAbstractGraphicsShapeItem_DestroyQAbstractGraphicsShapeItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAbstractGraphicsShapeItem) DestroyQAbstractGraphicsShapeItemDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractGraphicsShapeItem_DestroyQAbstractGraphicsShapeItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAbstractGraphicsShapeItem) Brush() *gui.QBrush {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQBrushFromPointer(C.QAbstractGraphicsShapeItem_Brush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractGraphicsShapeItem) Pen() *gui.QPen {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPenFromPointer(C.QAbstractGraphicsShapeItem_Pen(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractGraphicsShapeItem_Paint
func callbackQAbstractGraphicsShapeItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQAbstractGraphicsShapeItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QAbstractGraphicsShapeItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractGraphicsShapeItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QAbstractGraphicsShapeItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractGraphicsShapeItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

//export callbackQAbstractGraphicsShapeItem_BoundingRect
func callbackQAbstractGraphicsShapeItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQAbstractGraphicsShapeItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QAbstractGraphicsShapeItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QAbstractGraphicsShapeItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractGraphicsShapeItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QAbstractGraphicsShapeItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

//go:generate stringer -type=QAbstractItemDelegate__EndEditHint
//QAbstractItemDelegate::EndEditHint
type QAbstractItemDelegate__EndEditHint int64

const (
	QAbstractItemDelegate__NoHint           QAbstractItemDelegate__EndEditHint = QAbstractItemDelegate__EndEditHint(0)
	QAbstractItemDelegate__EditNextItem     QAbstractItemDelegate__EndEditHint = QAbstractItemDelegate__EndEditHint(1)
	QAbstractItemDelegate__EditPreviousItem QAbstractItemDelegate__EndEditHint = QAbstractItemDelegate__EndEditHint(2)
	QAbstractItemDelegate__SubmitModelCache QAbstractItemDelegate__EndEditHint = QAbstractItemDelegate__EndEditHint(3)
	QAbstractItemDelegate__RevertModelCache QAbstractItemDelegate__EndEditHint = QAbstractItemDelegate__EndEditHint(4)
)

//go:generate stringer -type=QAbstractItemView__CursorAction
//QAbstractItemView::CursorAction
type QAbstractItemView__CursorAction int64

const (
	QAbstractItemView__MoveUp       QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(0)
	QAbstractItemView__MoveDown     QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(1)
	QAbstractItemView__MoveLeft     QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(2)
	QAbstractItemView__MoveRight    QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(3)
	QAbstractItemView__MoveHome     QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(4)
	QAbstractItemView__MoveEnd      QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(5)
	QAbstractItemView__MovePageUp   QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(6)
	QAbstractItemView__MovePageDown QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(7)
	QAbstractItemView__MoveNext     QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(8)
	QAbstractItemView__MovePrevious QAbstractItemView__CursorAction = QAbstractItemView__CursorAction(9)
)

//go:generate stringer -type=QAbstractItemView__DragDropMode
//QAbstractItemView::DragDropMode
type QAbstractItemView__DragDropMode int64

const (
	QAbstractItemView__NoDragDrop   QAbstractItemView__DragDropMode = QAbstractItemView__DragDropMode(0)
	QAbstractItemView__DragOnly     QAbstractItemView__DragDropMode = QAbstractItemView__DragDropMode(1)
	QAbstractItemView__DropOnly     QAbstractItemView__DragDropMode = QAbstractItemView__DragDropMode(2)
	QAbstractItemView__DragDrop     QAbstractItemView__DragDropMode = QAbstractItemView__DragDropMode(3)
	QAbstractItemView__InternalMove QAbstractItemView__DragDropMode = QAbstractItemView__DragDropMode(4)
)

//go:generate stringer -type=QAbstractItemView__DropIndicatorPosition
//QAbstractItemView::DropIndicatorPosition
type QAbstractItemView__DropIndicatorPosition int64

const (
	QAbstractItemView__OnItem     QAbstractItemView__DropIndicatorPosition = QAbstractItemView__DropIndicatorPosition(0)
	QAbstractItemView__AboveItem  QAbstractItemView__DropIndicatorPosition = QAbstractItemView__DropIndicatorPosition(1)
	QAbstractItemView__BelowItem  QAbstractItemView__DropIndicatorPosition = QAbstractItemView__DropIndicatorPosition(2)
	QAbstractItemView__OnViewport QAbstractItemView__DropIndicatorPosition = QAbstractItemView__DropIndicatorPosition(3)
)

//go:generate stringer -type=QAbstractItemView__EditTrigger
//QAbstractItemView::EditTrigger
type QAbstractItemView__EditTrigger int64

const (
	QAbstractItemView__NoEditTriggers  QAbstractItemView__EditTrigger = QAbstractItemView__EditTrigger(0)
	QAbstractItemView__CurrentChanged  QAbstractItemView__EditTrigger = QAbstractItemView__EditTrigger(1)
	QAbstractItemView__DoubleClicked   QAbstractItemView__EditTrigger = QAbstractItemView__EditTrigger(2)
	QAbstractItemView__SelectedClicked QAbstractItemView__EditTrigger = QAbstractItemView__EditTrigger(4)
	QAbstractItemView__EditKeyPressed  QAbstractItemView__EditTrigger = QAbstractItemView__EditTrigger(8)
	QAbstractItemView__AnyKeyPressed   QAbstractItemView__EditTrigger = QAbstractItemView__EditTrigger(16)
	QAbstractItemView__AllEditTriggers QAbstractItemView__EditTrigger = QAbstractItemView__EditTrigger(31)
)

//go:generate stringer -type=QAbstractItemView__ScrollHint
//QAbstractItemView::ScrollHint
type QAbstractItemView__ScrollHint int64

const (
	QAbstractItemView__EnsureVisible    QAbstractItemView__ScrollHint = QAbstractItemView__ScrollHint(0)
	QAbstractItemView__PositionAtTop    QAbstractItemView__ScrollHint = QAbstractItemView__ScrollHint(1)
	QAbstractItemView__PositionAtBottom QAbstractItemView__ScrollHint = QAbstractItemView__ScrollHint(2)
	QAbstractItemView__PositionAtCenter QAbstractItemView__ScrollHint = QAbstractItemView__ScrollHint(3)
)

//go:generate stringer -type=QAbstractItemView__ScrollMode
//QAbstractItemView::ScrollMode
type QAbstractItemView__ScrollMode int64

const (
	QAbstractItemView__ScrollPerItem  QAbstractItemView__ScrollMode = QAbstractItemView__ScrollMode(0)
	QAbstractItemView__ScrollPerPixel QAbstractItemView__ScrollMode = QAbstractItemView__ScrollMode(1)
)

//go:generate stringer -type=QAbstractItemView__SelectionBehavior
//QAbstractItemView::SelectionBehavior
type QAbstractItemView__SelectionBehavior int64

const (
	QAbstractItemView__SelectItems   QAbstractItemView__SelectionBehavior = QAbstractItemView__SelectionBehavior(0)
	QAbstractItemView__SelectRows    QAbstractItemView__SelectionBehavior = QAbstractItemView__SelectionBehavior(1)
	QAbstractItemView__SelectColumns QAbstractItemView__SelectionBehavior = QAbstractItemView__SelectionBehavior(2)
)

//go:generate stringer -type=QAbstractItemView__SelectionMode
//QAbstractItemView::SelectionMode
type QAbstractItemView__SelectionMode int64

const (
	QAbstractItemView__NoSelection         QAbstractItemView__SelectionMode = QAbstractItemView__SelectionMode(0)
	QAbstractItemView__SingleSelection     QAbstractItemView__SelectionMode = QAbstractItemView__SelectionMode(1)
	QAbstractItemView__MultiSelection      QAbstractItemView__SelectionMode = QAbstractItemView__SelectionMode(2)
	QAbstractItemView__ExtendedSelection   QAbstractItemView__SelectionMode = QAbstractItemView__SelectionMode(3)
	QAbstractItemView__ContiguousSelection QAbstractItemView__SelectionMode = QAbstractItemView__SelectionMode(4)
)

//go:generate stringer -type=QAbstractItemView__State
//QAbstractItemView::State
type QAbstractItemView__State int64

const (
	QAbstractItemView__NoState            QAbstractItemView__State = QAbstractItemView__State(0)
	QAbstractItemView__DraggingState      QAbstractItemView__State = QAbstractItemView__State(1)
	QAbstractItemView__DragSelectingState QAbstractItemView__State = QAbstractItemView__State(2)
	QAbstractItemView__EditingState       QAbstractItemView__State = QAbstractItemView__State(3)
	QAbstractItemView__ExpandingState     QAbstractItemView__State = QAbstractItemView__State(4)
	QAbstractItemView__CollapsingState    QAbstractItemView__State = QAbstractItemView__State(5)
	QAbstractItemView__AnimatingState     QAbstractItemView__State = QAbstractItemView__State(6)
)

type QAbstractScrollArea struct {
	QFrame
}

type QAbstractScrollArea_ITF interface {
	QFrame_ITF
	QAbstractScrollArea_PTR() *QAbstractScrollArea
}

func (ptr *QAbstractScrollArea) QAbstractScrollArea_PTR() *QAbstractScrollArea {
	return ptr
}

func (ptr *QAbstractScrollArea) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QFrame_PTR().Pointer()
	}
	return nil
}

func (ptr *QAbstractScrollArea) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QFrame_PTR().SetPointer(p)
	}
}

func PointerFromQAbstractScrollArea(ptr QAbstractScrollArea_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractScrollArea_PTR().Pointer()
	}
	return nil
}

func NewQAbstractScrollAreaFromPointer(ptr unsafe.Pointer) (n *QAbstractScrollArea) {
	n = new(QAbstractScrollArea)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QAbstractScrollArea__SizeAdjustPolicy
//QAbstractScrollArea::SizeAdjustPolicy
type QAbstractScrollArea__SizeAdjustPolicy int64

const (
	QAbstractScrollArea__AdjustIgnored               QAbstractScrollArea__SizeAdjustPolicy = QAbstractScrollArea__SizeAdjustPolicy(0)
	QAbstractScrollArea__AdjustToContentsOnFirstShow QAbstractScrollArea__SizeAdjustPolicy = QAbstractScrollArea__SizeAdjustPolicy(1)
	QAbstractScrollArea__AdjustToContents            QAbstractScrollArea__SizeAdjustPolicy = QAbstractScrollArea__SizeAdjustPolicy(2)
)

func NewQAbstractScrollArea(parent QWidget_ITF) *QAbstractScrollArea {
	tmpValue := NewQAbstractScrollAreaFromPointer(C.QAbstractScrollArea_NewQAbstractScrollArea(PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAbstractScrollArea) ScrollBarWidgets(alignment core.Qt__AlignmentFlag) []*QWidget {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QWidget {
			out := make([]*QWidget, int(l.len))
			tmpList := NewQAbstractScrollAreaFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__scrollBarWidgets_atList(i)
			}
			return out
		}(C.QAbstractScrollArea_ScrollBarWidgets(ptr.Pointer(), C.longlong(alignment)))
	}
	return make([]*QWidget, 0)
}

//export callbackQAbstractScrollArea_ViewportEvent
func callbackQAbstractScrollArea_ViewportEvent(ptr unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "viewportEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractScrollAreaFromPointer(ptr).ViewportEventDefault(core.NewQEventFromPointer(event)))))
}

func (ptr *QAbstractScrollArea) ConnectViewportEvent(f func(event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "viewportEvent"); signal != nil {
			f := func(event *core.QEvent) bool {
				(*(*func(*core.QEvent) bool)(signal))(event)
				return f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "viewportEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "viewportEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractScrollArea) DisconnectViewportEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "viewportEvent")
	}
}

func (ptr *QAbstractScrollArea) ViewportEvent(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QAbstractScrollArea_ViewportEvent(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QAbstractScrollArea) ViewportEventDefault(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QAbstractScrollArea_ViewportEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QAbstractScrollArea) AddScrollBarWidget(widget QWidget_ITF, alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_AddScrollBarWidget(ptr.Pointer(), PointerFromQWidget(widget), C.longlong(alignment))
	}
}

//export callbackQAbstractScrollArea_ScrollContentsBy
func callbackQAbstractScrollArea_ScrollContentsBy(ptr unsafe.Pointer, dx C.int, dy C.int) {
	if signal := qt.GetSignal(ptr, "scrollContentsBy"); signal != nil {
		(*(*func(int, int))(signal))(int(int32(dx)), int(int32(dy)))
	} else {
		NewQAbstractScrollAreaFromPointer(ptr).ScrollContentsByDefault(int(int32(dx)), int(int32(dy)))
	}
}

func (ptr *QAbstractScrollArea) ConnectScrollContentsBy(f func(dx int, dy int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "scrollContentsBy"); signal != nil {
			f := func(dx int, dy int) {
				(*(*func(int, int))(signal))(dx, dy)
				f(dx, dy)
			}
			qt.ConnectSignal(ptr.Pointer(), "scrollContentsBy", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "scrollContentsBy", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractScrollArea) DisconnectScrollContentsBy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "scrollContentsBy")
	}
}

func (ptr *QAbstractScrollArea) ScrollContentsBy(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_ScrollContentsBy(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QAbstractScrollArea) ScrollContentsByDefault(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_ScrollContentsByDefault(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QAbstractScrollArea) SetCornerWidget(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetCornerWidget(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QAbstractScrollArea) SetHorizontalScrollBar(scrollBar QScrollBar_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetHorizontalScrollBar(ptr.Pointer(), PointerFromQScrollBar(scrollBar))
	}
}

func (ptr *QAbstractScrollArea) SetHorizontalScrollBarPolicy(vqt core.Qt__ScrollBarPolicy) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetHorizontalScrollBarPolicy(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QAbstractScrollArea) SetSizeAdjustPolicy(policy QAbstractScrollArea__SizeAdjustPolicy) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetSizeAdjustPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QAbstractScrollArea) SetVerticalScrollBar(scrollBar QScrollBar_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetVerticalScrollBar(ptr.Pointer(), PointerFromQScrollBar(scrollBar))
	}
}

func (ptr *QAbstractScrollArea) SetVerticalScrollBarPolicy(vqt core.Qt__ScrollBarPolicy) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetVerticalScrollBarPolicy(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QAbstractScrollArea) SetViewport(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetViewport(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QAbstractScrollArea) SetViewportMargins2(margins core.QMargins_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetViewportMargins2(ptr.Pointer(), core.PointerFromQMargins(margins))
	}
}

func (ptr *QAbstractScrollArea) SetViewportMargins(left int, top int, right int, bottom int) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetViewportMargins(ptr.Pointer(), C.int(int32(left)), C.int(int32(top)), C.int(int32(right)), C.int(int32(bottom)))
	}
}

//export callbackQAbstractScrollArea_SetupViewport
func callbackQAbstractScrollArea_SetupViewport(ptr unsafe.Pointer, viewport unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setupViewport"); signal != nil {
		(*(*func(*QWidget))(signal))(NewQWidgetFromPointer(viewport))
	} else {
		NewQAbstractScrollAreaFromPointer(ptr).SetupViewportDefault(NewQWidgetFromPointer(viewport))
	}
}

func (ptr *QAbstractScrollArea) ConnectSetupViewport(f func(viewport *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setupViewport"); signal != nil {
			f := func(viewport *QWidget) {
				(*(*func(*QWidget))(signal))(viewport)
				f(viewport)
			}
			qt.ConnectSignal(ptr.Pointer(), "setupViewport", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setupViewport", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractScrollArea) DisconnectSetupViewport() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setupViewport")
	}
}

func (ptr *QAbstractScrollArea) SetupViewport(viewport QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetupViewport(ptr.Pointer(), PointerFromQWidget(viewport))
	}
}

func (ptr *QAbstractScrollArea) SetupViewportDefault(viewport QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_SetupViewportDefault(ptr.Pointer(), PointerFromQWidget(viewport))
	}
}

//export callbackQAbstractScrollArea_DestroyQAbstractScrollArea
func callbackQAbstractScrollArea_DestroyQAbstractScrollArea(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QAbstractScrollArea"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQAbstractScrollAreaFromPointer(ptr).DestroyQAbstractScrollAreaDefault()
	}
}

func (ptr *QAbstractScrollArea) ConnectDestroyQAbstractScrollArea(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QAbstractScrollArea"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QAbstractScrollArea", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QAbstractScrollArea", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractScrollArea) DisconnectDestroyQAbstractScrollArea() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QAbstractScrollArea")
	}
}

func (ptr *QAbstractScrollArea) DestroyQAbstractScrollArea() {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_DestroyQAbstractScrollArea(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAbstractScrollArea) DestroyQAbstractScrollAreaDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea_DestroyQAbstractScrollAreaDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAbstractScrollArea) SizeAdjustPolicy() QAbstractScrollArea__SizeAdjustPolicy {
	if ptr.Pointer() != nil {
		return QAbstractScrollArea__SizeAdjustPolicy(C.QAbstractScrollArea_SizeAdjustPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractScrollArea) ViewportMargins() *core.QMargins {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQMarginsFromPointer(C.QAbstractScrollArea_ViewportMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) HorizontalScrollBar() *QScrollBar {
	if ptr.Pointer() != nil {
		tmpValue := NewQScrollBarFromPointer(C.QAbstractScrollArea_HorizontalScrollBar(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) VerticalScrollBar() *QScrollBar {
	if ptr.Pointer() != nil {
		tmpValue := NewQScrollBarFromPointer(C.QAbstractScrollArea_VerticalScrollBar(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) MaximumViewportSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QAbstractScrollArea_MaximumViewportSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractScrollArea_ViewportSizeHint
func callbackQAbstractScrollArea_ViewportSizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "viewportSizeHint"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQAbstractScrollAreaFromPointer(ptr).ViewportSizeHintDefault())
}

func (ptr *QAbstractScrollArea) ConnectViewportSizeHint(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "viewportSizeHint"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "viewportSizeHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "viewportSizeHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractScrollArea) DisconnectViewportSizeHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "viewportSizeHint")
	}
}

func (ptr *QAbstractScrollArea) ViewportSizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QAbstractScrollArea_ViewportSizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) ViewportSizeHintDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QAbstractScrollArea_ViewportSizeHintDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) CornerWidget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QAbstractScrollArea_CornerWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) Viewport() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QAbstractScrollArea_Viewport(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) HorizontalScrollBarPolicy() core.Qt__ScrollBarPolicy {
	if ptr.Pointer() != nil {
		return core.Qt__ScrollBarPolicy(C.QAbstractScrollArea_HorizontalScrollBarPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractScrollArea) VerticalScrollBarPolicy() core.Qt__ScrollBarPolicy {
	if ptr.Pointer() != nil {
		return core.Qt__ScrollBarPolicy(C.QAbstractScrollArea_VerticalScrollBarPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractScrollArea) __scrollBarWidgets_atList(i int) *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QAbstractScrollArea___scrollBarWidgets_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractScrollArea) __scrollBarWidgets_setList(i QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractScrollArea___scrollBarWidgets_setList(ptr.Pointer(), PointerFromQWidget(i))
	}
}

func (ptr *QAbstractScrollArea) __scrollBarWidgets_newList() unsafe.Pointer {
	return C.QAbstractScrollArea___scrollBarWidgets_newList(ptr.Pointer())
}

type QAbstractSlider struct {
	QWidget
}

type QAbstractSlider_ITF interface {
	QWidget_ITF
	QAbstractSlider_PTR() *QAbstractSlider
}

func (ptr *QAbstractSlider) QAbstractSlider_PTR() *QAbstractSlider {
	return ptr
}

func (ptr *QAbstractSlider) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QWidget_PTR().Pointer()
	}
	return nil
}

func (ptr *QAbstractSlider) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QWidget_PTR().SetPointer(p)
	}
}

func PointerFromQAbstractSlider(ptr QAbstractSlider_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractSlider_PTR().Pointer()
	}
	return nil
}

func NewQAbstractSliderFromPointer(ptr unsafe.Pointer) (n *QAbstractSlider) {
	n = new(QAbstractSlider)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QAbstractSlider__SliderAction
//QAbstractSlider::SliderAction
type QAbstractSlider__SliderAction int64

const (
	QAbstractSlider__SliderNoAction      QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(0)
	QAbstractSlider__SliderSingleStepAdd QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(1)
	QAbstractSlider__SliderSingleStepSub QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(2)
	QAbstractSlider__SliderPageStepAdd   QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(3)
	QAbstractSlider__SliderPageStepSub   QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(4)
	QAbstractSlider__SliderToMinimum     QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(5)
	QAbstractSlider__SliderToMaximum     QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(6)
	QAbstractSlider__SliderMove          QAbstractSlider__SliderAction = QAbstractSlider__SliderAction(7)
)

//go:generate stringer -type=QAbstractSlider__SliderChange
//QAbstractSlider::SliderChange
type QAbstractSlider__SliderChange int64

const (
	QAbstractSlider__SliderRangeChange       QAbstractSlider__SliderChange = QAbstractSlider__SliderChange(0)
	QAbstractSlider__SliderOrientationChange QAbstractSlider__SliderChange = QAbstractSlider__SliderChange(1)
	QAbstractSlider__SliderStepsChange       QAbstractSlider__SliderChange = QAbstractSlider__SliderChange(2)
	QAbstractSlider__SliderValueChange       QAbstractSlider__SliderChange = QAbstractSlider__SliderChange(3)
)

func NewQAbstractSlider(parent QWidget_ITF) *QAbstractSlider {
	tmpValue := NewQAbstractSliderFromPointer(C.QAbstractSlider_NewQAbstractSlider(PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractSlider_ActionTriggered
func callbackQAbstractSlider_ActionTriggered(ptr unsafe.Pointer, action C.int) {
	if signal := qt.GetSignal(ptr, "actionTriggered"); signal != nil {
		(*(*func(int))(signal))(int(int32(action)))
	}

}

func (ptr *QAbstractSlider) ConnectActionTriggered(f func(action int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "actionTriggered") {
			C.QAbstractSlider_ConnectActionTriggered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "actionTriggered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "actionTriggered"); signal != nil {
			f := func(action int) {
				(*(*func(int))(signal))(action)
				f(action)
			}
			qt.ConnectSignal(ptr.Pointer(), "actionTriggered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "actionTriggered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectActionTriggered() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DisconnectActionTriggered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "actionTriggered")
	}
}

func (ptr *QAbstractSlider) ActionTriggered(action int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_ActionTriggered(ptr.Pointer(), C.int(int32(action)))
	}
}

//export callbackQAbstractSlider_RangeChanged
func callbackQAbstractSlider_RangeChanged(ptr unsafe.Pointer, min C.int, max C.int) {
	if signal := qt.GetSignal(ptr, "rangeChanged"); signal != nil {
		(*(*func(int, int))(signal))(int(int32(min)), int(int32(max)))
	}

}

func (ptr *QAbstractSlider) ConnectRangeChanged(f func(min int, max int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "rangeChanged") {
			C.QAbstractSlider_ConnectRangeChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "rangeChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "rangeChanged"); signal != nil {
			f := func(min int, max int) {
				(*(*func(int, int))(signal))(min, max)
				f(min, max)
			}
			qt.ConnectSignal(ptr.Pointer(), "rangeChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "rangeChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectRangeChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DisconnectRangeChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "rangeChanged")
	}
}

func (ptr *QAbstractSlider) RangeChanged(min int, max int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_RangeChanged(ptr.Pointer(), C.int(int32(min)), C.int(int32(max)))
	}
}

func (ptr *QAbstractSlider) SetInvertedAppearance(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetInvertedAppearance(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAbstractSlider) SetInvertedControls(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetInvertedControls(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAbstractSlider) SetMaximum(vin int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetMaximum(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAbstractSlider) SetMinimum(vin int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetMinimum(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQAbstractSlider_SetOrientation
func callbackQAbstractSlider_SetOrientation(ptr unsafe.Pointer, vqt C.longlong) {
	if signal := qt.GetSignal(ptr, "setOrientation"); signal != nil {
		(*(*func(core.Qt__Orientation))(signal))(core.Qt__Orientation(vqt))
	} else {
		NewQAbstractSliderFromPointer(ptr).SetOrientationDefault(core.Qt__Orientation(vqt))
	}
}

func (ptr *QAbstractSlider) ConnectSetOrientation(f func(vqt core.Qt__Orientation)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setOrientation"); signal != nil {
			f := func(vqt core.Qt__Orientation) {
				(*(*func(core.Qt__Orientation))(signal))(vqt)
				f(vqt)
			}
			qt.ConnectSignal(ptr.Pointer(), "setOrientation", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setOrientation", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectSetOrientation() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setOrientation")
	}
}

func (ptr *QAbstractSlider) SetOrientation(vqt core.Qt__Orientation) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetOrientation(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QAbstractSlider) SetOrientationDefault(vqt core.Qt__Orientation) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetOrientationDefault(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QAbstractSlider) SetPageStep(vin int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetPageStep(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQAbstractSlider_SetRange
func callbackQAbstractSlider_SetRange(ptr unsafe.Pointer, min C.int, max C.int) {
	if signal := qt.GetSignal(ptr, "setRange"); signal != nil {
		(*(*func(int, int))(signal))(int(int32(min)), int(int32(max)))
	} else {
		NewQAbstractSliderFromPointer(ptr).SetRangeDefault(int(int32(min)), int(int32(max)))
	}
}

func (ptr *QAbstractSlider) ConnectSetRange(f func(min int, max int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setRange"); signal != nil {
			f := func(min int, max int) {
				(*(*func(int, int))(signal))(min, max)
				f(min, max)
			}
			qt.ConnectSignal(ptr.Pointer(), "setRange", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setRange", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectSetRange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setRange")
	}
}

func (ptr *QAbstractSlider) SetRange(min int, max int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetRange(ptr.Pointer(), C.int(int32(min)), C.int(int32(max)))
	}
}

func (ptr *QAbstractSlider) SetRangeDefault(min int, max int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetRangeDefault(ptr.Pointer(), C.int(int32(min)), C.int(int32(max)))
	}
}

func (ptr *QAbstractSlider) SetRepeatAction(action QAbstractSlider__SliderAction, thresholdTime int, repeatTime int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetRepeatAction(ptr.Pointer(), C.longlong(action), C.int(int32(thresholdTime)), C.int(int32(repeatTime)))
	}
}

func (ptr *QAbstractSlider) SetSingleStep(vin int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetSingleStep(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAbstractSlider) SetSliderDown(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetSliderDown(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAbstractSlider) SetSliderPosition(vin int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetSliderPosition(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAbstractSlider) SetTracking(enable bool) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetTracking(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

//export callbackQAbstractSlider_SetValue
func callbackQAbstractSlider_SetValue(ptr unsafe.Pointer, vin C.int) {
	if signal := qt.GetSignal(ptr, "setValue"); signal != nil {
		(*(*func(int))(signal))(int(int32(vin)))
	} else {
		NewQAbstractSliderFromPointer(ptr).SetValueDefault(int(int32(vin)))
	}
}

func (ptr *QAbstractSlider) ConnectSetValue(f func(vin int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setValue"); signal != nil {
			f := func(vin int) {
				(*(*func(int))(signal))(vin)
				f(vin)
			}
			qt.ConnectSignal(ptr.Pointer(), "setValue", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setValue", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectSetValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setValue")
	}
}

func (ptr *QAbstractSlider) SetValue(vin int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetValue(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAbstractSlider) SetValueDefault(vin int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SetValueDefault(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQAbstractSlider_SliderChange
func callbackQAbstractSlider_SliderChange(ptr unsafe.Pointer, change C.longlong) {
	if signal := qt.GetSignal(ptr, "sliderChange"); signal != nil {
		(*(*func(QAbstractSlider__SliderChange))(signal))(QAbstractSlider__SliderChange(change))
	} else {
		NewQAbstractSliderFromPointer(ptr).SliderChangeDefault(QAbstractSlider__SliderChange(change))
	}
}

func (ptr *QAbstractSlider) ConnectSliderChange(f func(change QAbstractSlider__SliderChange)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sliderChange"); signal != nil {
			f := func(change QAbstractSlider__SliderChange) {
				(*(*func(QAbstractSlider__SliderChange))(signal))(change)
				f(change)
			}
			qt.ConnectSignal(ptr.Pointer(), "sliderChange", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sliderChange", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectSliderChange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sliderChange")
	}
}

func (ptr *QAbstractSlider) SliderChange(change QAbstractSlider__SliderChange) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SliderChange(ptr.Pointer(), C.longlong(change))
	}
}

func (ptr *QAbstractSlider) SliderChangeDefault(change QAbstractSlider__SliderChange) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SliderChangeDefault(ptr.Pointer(), C.longlong(change))
	}
}

//export callbackQAbstractSlider_SliderMoved
func callbackQAbstractSlider_SliderMoved(ptr unsafe.Pointer, value C.int) {
	if signal := qt.GetSignal(ptr, "sliderMoved"); signal != nil {
		(*(*func(int))(signal))(int(int32(value)))
	}

}

func (ptr *QAbstractSlider) ConnectSliderMoved(f func(value int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "sliderMoved") {
			C.QAbstractSlider_ConnectSliderMoved(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "sliderMoved")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "sliderMoved"); signal != nil {
			f := func(value int) {
				(*(*func(int))(signal))(value)
				f(value)
			}
			qt.ConnectSignal(ptr.Pointer(), "sliderMoved", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sliderMoved", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectSliderMoved() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DisconnectSliderMoved(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "sliderMoved")
	}
}

func (ptr *QAbstractSlider) SliderMoved(value int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SliderMoved(ptr.Pointer(), C.int(int32(value)))
	}
}

//export callbackQAbstractSlider_SliderPressed
func callbackQAbstractSlider_SliderPressed(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "sliderPressed"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QAbstractSlider) ConnectSliderPressed(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "sliderPressed") {
			C.QAbstractSlider_ConnectSliderPressed(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "sliderPressed")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "sliderPressed"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "sliderPressed", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sliderPressed", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectSliderPressed() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DisconnectSliderPressed(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "sliderPressed")
	}
}

func (ptr *QAbstractSlider) SliderPressed() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SliderPressed(ptr.Pointer())
	}
}

//export callbackQAbstractSlider_SliderReleased
func callbackQAbstractSlider_SliderReleased(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "sliderReleased"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QAbstractSlider) ConnectSliderReleased(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "sliderReleased") {
			C.QAbstractSlider_ConnectSliderReleased(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "sliderReleased")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "sliderReleased"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "sliderReleased", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sliderReleased", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectSliderReleased() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DisconnectSliderReleased(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "sliderReleased")
	}
}

func (ptr *QAbstractSlider) SliderReleased() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_SliderReleased(ptr.Pointer())
	}
}

func (ptr *QAbstractSlider) TriggerAction(action QAbstractSlider__SliderAction) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_TriggerAction(ptr.Pointer(), C.longlong(action))
	}
}

//export callbackQAbstractSlider_ValueChanged
func callbackQAbstractSlider_ValueChanged(ptr unsafe.Pointer, value C.int) {
	if signal := qt.GetSignal(ptr, "valueChanged"); signal != nil {
		(*(*func(int))(signal))(int(int32(value)))
	}

}

func (ptr *QAbstractSlider) ConnectValueChanged(f func(value int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "valueChanged") {
			C.QAbstractSlider_ConnectValueChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "valueChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "valueChanged"); signal != nil {
			f := func(value int) {
				(*(*func(int))(signal))(value)
				f(value)
			}
			qt.ConnectSignal(ptr.Pointer(), "valueChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "valueChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectValueChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DisconnectValueChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "valueChanged")
	}
}

func (ptr *QAbstractSlider) ValueChanged(value int) {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_ValueChanged(ptr.Pointer(), C.int(int32(value)))
	}
}

//export callbackQAbstractSlider_DestroyQAbstractSlider
func callbackQAbstractSlider_DestroyQAbstractSlider(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QAbstractSlider"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQAbstractSliderFromPointer(ptr).DestroyQAbstractSliderDefault()
	}
}

func (ptr *QAbstractSlider) ConnectDestroyQAbstractSlider(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QAbstractSlider"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QAbstractSlider", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QAbstractSlider", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAbstractSlider) DisconnectDestroyQAbstractSlider() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QAbstractSlider")
	}
}

func (ptr *QAbstractSlider) DestroyQAbstractSlider() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DestroyQAbstractSlider(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAbstractSlider) DestroyQAbstractSliderDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractSlider_DestroyQAbstractSliderDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAbstractSlider) RepeatAction() QAbstractSlider__SliderAction {
	if ptr.Pointer() != nil {
		return QAbstractSlider__SliderAction(C.QAbstractSlider_RepeatAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractSlider) Orientation() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QAbstractSlider_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractSlider) HasTracking() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAbstractSlider_HasTracking(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAbstractSlider) InvertedAppearance() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAbstractSlider_InvertedAppearance(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAbstractSlider) InvertedControls() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAbstractSlider_InvertedControls(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAbstractSlider) IsSliderDown() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAbstractSlider_IsSliderDown(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAbstractSlider) Maximum() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractSlider_Maximum(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractSlider) Minimum() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractSlider_Minimum(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractSlider) PageStep() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractSlider_PageStep(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractSlider) SingleStep() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractSlider_SingleStep(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractSlider) SliderPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractSlider_SliderPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractSlider) Value() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractSlider_Value(ptr.Pointer())))
	}
	return 0
}

//go:generate stringer -type=QAbstractSpinBox__ButtonSymbols
//QAbstractSpinBox::ButtonSymbols
type QAbstractSpinBox__ButtonSymbols int64

const (
	QAbstractSpinBox__UpDownArrows QAbstractSpinBox__ButtonSymbols = QAbstractSpinBox__ButtonSymbols(0)
	QAbstractSpinBox__PlusMinus    QAbstractSpinBox__ButtonSymbols = QAbstractSpinBox__ButtonSymbols(1)
	QAbstractSpinBox__NoButtons    QAbstractSpinBox__ButtonSymbols = QAbstractSpinBox__ButtonSymbols(2)
)

//go:generate stringer -type=QAbstractSpinBox__CorrectionMode
//QAbstractSpinBox::CorrectionMode
type QAbstractSpinBox__CorrectionMode int64

const (
	QAbstractSpinBox__CorrectToPreviousValue QAbstractSpinBox__CorrectionMode = QAbstractSpinBox__CorrectionMode(0)
	QAbstractSpinBox__CorrectToNearestValue  QAbstractSpinBox__CorrectionMode = QAbstractSpinBox__CorrectionMode(1)
)

//go:generate stringer -type=QAbstractSpinBox__StepEnabledFlag
//QAbstractSpinBox::StepEnabledFlag
type QAbstractSpinBox__StepEnabledFlag int64

const (
	QAbstractSpinBox__StepNone        QAbstractSpinBox__StepEnabledFlag = QAbstractSpinBox__StepEnabledFlag(0x00)
	QAbstractSpinBox__StepUpEnabled   QAbstractSpinBox__StepEnabledFlag = QAbstractSpinBox__StepEnabledFlag(0x01)
	QAbstractSpinBox__StepDownEnabled QAbstractSpinBox__StepEnabledFlag = QAbstractSpinBox__StepEnabledFlag(0x02)
)

//go:generate stringer -type=QAbstractSpinBox__StepType
//QAbstractSpinBox::StepType
type QAbstractSpinBox__StepType int64

const (
	QAbstractSpinBox__DefaultStepType         QAbstractSpinBox__StepType = QAbstractSpinBox__StepType(0)
	QAbstractSpinBox__AdaptiveDecimalStepType QAbstractSpinBox__StepType = QAbstractSpinBox__StepType(1)
)

type QAction struct {
	core.QObject
}

type QAction_ITF interface {
	core.QObject_ITF
	QAction_PTR() *QAction
}

func (ptr *QAction) QAction_PTR() *QAction {
	return ptr
}

func (ptr *QAction) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QAction) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQAction(ptr QAction_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAction_PTR().Pointer()
	}
	return nil
}

func NewQActionFromPointer(ptr unsafe.Pointer) (n *QAction) {
	n = new(QAction)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QAction__ActionEvent
//QAction::ActionEvent
type QAction__ActionEvent int64

const (
	QAction__Trigger QAction__ActionEvent = QAction__ActionEvent(0)
	QAction__Hover   QAction__ActionEvent = QAction__ActionEvent(1)
)

//go:generate stringer -type=QAction__MenuRole
//QAction::MenuRole
type QAction__MenuRole int64

const (
	QAction__NoRole                  QAction__MenuRole = QAction__MenuRole(0)
	QAction__TextHeuristicRole       QAction__MenuRole = QAction__MenuRole(1)
	QAction__ApplicationSpecificRole QAction__MenuRole = QAction__MenuRole(2)
	QAction__AboutQtRole             QAction__MenuRole = QAction__MenuRole(3)
	QAction__AboutRole               QAction__MenuRole = QAction__MenuRole(4)
	QAction__PreferencesRole         QAction__MenuRole = QAction__MenuRole(5)
	QAction__QuitRole                QAction__MenuRole = QAction__MenuRole(6)
)

//go:generate stringer -type=QAction__Priority
//QAction::Priority
type QAction__Priority int64

const (
	QAction__LowPriority    QAction__Priority = QAction__Priority(0)
	QAction__NormalPriority QAction__Priority = QAction__Priority(128)
	QAction__HighPriority   QAction__Priority = QAction__Priority(256)
)

func NewQAction(parent core.QObject_ITF) *QAction {
	tmpValue := NewQActionFromPointer(C.QAction_NewQAction(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQAction3(icon gui.QIcon_ITF, text string, parent core.QObject_ITF) *QAction {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	tmpValue := NewQActionFromPointer(C.QAction_NewQAction3(gui.PointerFromQIcon(icon), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQAction2(text string, parent core.QObject_ITF) *QAction {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	tmpValue := NewQActionFromPointer(C.QAction_NewQAction2(C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QAction_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QAction_QAction_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QAction) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QAction_QAction_Tr(sC, cC, C.int(int32(n))))
}

//export callbackQAction_Event
func callbackQAction_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQActionFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAction) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

func (ptr *QAction) ShowStatusText(widget QWidget_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_ShowStatusText(ptr.Pointer(), PointerFromQWidget(widget))) != 0
	}
	return false
}

func (ptr *QAction) Activate(event QAction__ActionEvent) {
	if ptr.Pointer() != nil {
		C.QAction_Activate(ptr.Pointer(), C.longlong(event))
	}
}

//export callbackQAction_Changed
func callbackQAction_Changed(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "changed"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QAction) ConnectChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "changed") {
			C.QAction_ConnectChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "changed")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "changed"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "changed", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "changed", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectChanged() {
	if ptr.Pointer() != nil {
		C.QAction_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "changed")
	}
}

func (ptr *QAction) Changed() {
	if ptr.Pointer() != nil {
		C.QAction_Changed(ptr.Pointer())
	}
}

//export callbackQAction_Hover
func callbackQAction_Hover(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hover"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQActionFromPointer(ptr).HoverDefault()
	}
}

func (ptr *QAction) ConnectHover(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hover"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "hover", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hover", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectHover() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hover")
	}
}

func (ptr *QAction) Hover() {
	if ptr.Pointer() != nil {
		C.QAction_Hover(ptr.Pointer())
	}
}

func (ptr *QAction) HoverDefault() {
	if ptr.Pointer() != nil {
		C.QAction_HoverDefault(ptr.Pointer())
	}
}

//export callbackQAction_Hovered
func callbackQAction_Hovered(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hovered"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QAction) ConnectHovered(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "hovered") {
			C.QAction_ConnectHovered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "hovered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "hovered"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "hovered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hovered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectHovered() {
	if ptr.Pointer() != nil {
		C.QAction_DisconnectHovered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "hovered")
	}
}

func (ptr *QAction) Hovered() {
	if ptr.Pointer() != nil {
		C.QAction_Hovered(ptr.Pointer())
	}
}

func (ptr *QAction) SetActionGroup(group QActionGroup_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_SetActionGroup(ptr.Pointer(), PointerFromQActionGroup(group))
	}
}

func (ptr *QAction) SetAutoRepeat(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetAutoRepeat(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAction) SetCheckable(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetCheckable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQAction_SetChecked
func callbackQAction_SetChecked(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setChecked"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQActionFromPointer(ptr).SetCheckedDefault(int8(vbo) != 0)
	}
}

func (ptr *QAction) ConnectSetChecked(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setChecked"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setChecked", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setChecked", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectSetChecked() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setChecked")
	}
}

func (ptr *QAction) SetChecked(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetChecked(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAction) SetCheckedDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetCheckedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAction) SetData(userData core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_SetData(ptr.Pointer(), core.PointerFromQVariant(userData))
	}
}

//export callbackQAction_SetDisabled
func callbackQAction_SetDisabled(ptr unsafe.Pointer, b C.char) {
	if signal := qt.GetSignal(ptr, "setDisabled"); signal != nil {
		(*(*func(bool))(signal))(int8(b) != 0)
	} else {
		NewQActionFromPointer(ptr).SetDisabledDefault(int8(b) != 0)
	}
}

func (ptr *QAction) ConnectSetDisabled(f func(b bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setDisabled"); signal != nil {
			f := func(b bool) {
				(*(*func(bool))(signal))(b)
				f(b)
			}
			qt.ConnectSignal(ptr.Pointer(), "setDisabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setDisabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectSetDisabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setDisabled")
	}
}

func (ptr *QAction) SetDisabled(b bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetDisabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QAction) SetDisabledDefault(b bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetDisabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

//export callbackQAction_SetEnabled
func callbackQAction_SetEnabled(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setEnabled"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQActionFromPointer(ptr).SetEnabledDefault(int8(vbo) != 0)
	}
}

func (ptr *QAction) ConnectSetEnabled(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setEnabled"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectSetEnabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setEnabled")
	}
}

func (ptr *QAction) SetEnabled(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAction) SetEnabledDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetEnabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAction) SetFont(font gui.QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_SetFont(ptr.Pointer(), gui.PointerFromQFont(font))
	}
}

func (ptr *QAction) SetIcon(icon gui.QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_SetIcon(ptr.Pointer(), gui.PointerFromQIcon(icon))
	}
}

func (ptr *QAction) SetIconText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QAction_SetIconText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))})
	}
}

func (ptr *QAction) SetIconVisibleInMenu(visible bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetIconVisibleInMenu(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QAction) SetMenu(menu QMenu_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_SetMenu(ptr.Pointer(), PointerFromQMenu(menu))
	}
}

func (ptr *QAction) SetMenuRole(menuRole QAction__MenuRole) {
	if ptr.Pointer() != nil {
		C.QAction_SetMenuRole(ptr.Pointer(), C.longlong(menuRole))
	}
}

func (ptr *QAction) SetPriority(priority QAction__Priority) {
	if ptr.Pointer() != nil {
		C.QAction_SetPriority(ptr.Pointer(), C.longlong(priority))
	}
}

func (ptr *QAction) SetSeparator(b bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetSeparator(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QAction) SetShortcut(shortcut gui.QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_SetShortcut(ptr.Pointer(), gui.PointerFromQKeySequence(shortcut))
	}
}

func (ptr *QAction) SetShortcutContext(context core.Qt__ShortcutContext) {
	if ptr.Pointer() != nil {
		C.QAction_SetShortcutContext(ptr.Pointer(), C.longlong(context))
	}
}

func (ptr *QAction) SetShortcutVisibleInContextMenu(show bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetShortcutVisibleInContextMenu(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(show))))
	}
}

func (ptr *QAction) SetShortcuts2(key gui.QKeySequence__StandardKey) {
	if ptr.Pointer() != nil {
		C.QAction_SetShortcuts2(ptr.Pointer(), C.longlong(key))
	}
}

func (ptr *QAction) SetShortcuts(shortcuts []*gui.QKeySequence) {
	if ptr.Pointer() != nil {
		C.QAction_SetShortcuts(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQActionFromPointer(NewQActionFromPointer(nil).__setShortcuts_shortcuts_newList())
			for _, v := range shortcuts {
				tmpList.__setShortcuts_shortcuts_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QAction) SetStatusTip(statusTip string) {
	if ptr.Pointer() != nil {
		var statusTipC *C.char
		if statusTip != "" {
			statusTipC = C.CString(statusTip)
			defer C.free(unsafe.Pointer(statusTipC))
		}
		C.QAction_SetStatusTip(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: statusTipC, len: C.longlong(len(statusTip))})
	}
}

func (ptr *QAction) SetText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QAction_SetText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))})
	}
}

func (ptr *QAction) SetToolTip(tip string) {
	if ptr.Pointer() != nil {
		var tipC *C.char
		if tip != "" {
			tipC = C.CString(tip)
			defer C.free(unsafe.Pointer(tipC))
		}
		C.QAction_SetToolTip(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: tipC, len: C.longlong(len(tip))})
	}
}

//export callbackQAction_SetVisible
func callbackQAction_SetVisible(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setVisible"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQActionFromPointer(ptr).SetVisibleDefault(int8(vbo) != 0)
	}
}

func (ptr *QAction) ConnectSetVisible(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setVisible"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setVisible", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setVisible", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectSetVisible() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setVisible")
	}
}

func (ptr *QAction) SetVisible(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAction) SetVisibleDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QAction_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QAction) SetWhatsThis(what string) {
	if ptr.Pointer() != nil {
		var whatC *C.char
		if what != "" {
			whatC = C.CString(what)
			defer C.free(unsafe.Pointer(whatC))
		}
		C.QAction_SetWhatsThis(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: whatC, len: C.longlong(len(what))})
	}
}

//export callbackQAction_Toggle
func callbackQAction_Toggle(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "toggle"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQActionFromPointer(ptr).ToggleDefault()
	}
}

func (ptr *QAction) ConnectToggle(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "toggle"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "toggle", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "toggle", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectToggle() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "toggle")
	}
}

func (ptr *QAction) Toggle() {
	if ptr.Pointer() != nil {
		C.QAction_Toggle(ptr.Pointer())
	}
}

func (ptr *QAction) ToggleDefault() {
	if ptr.Pointer() != nil {
		C.QAction_ToggleDefault(ptr.Pointer())
	}
}

//export callbackQAction_Toggled
func callbackQAction_Toggled(ptr unsafe.Pointer, checked C.char) {
	if signal := qt.GetSignal(ptr, "toggled"); signal != nil {
		(*(*func(bool))(signal))(int8(checked) != 0)
	}

}

func (ptr *QAction) ConnectToggled(f func(checked bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "toggled") {
			C.QAction_ConnectToggled(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "toggled")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "toggled"); signal != nil {
			f := func(checked bool) {
				(*(*func(bool))(signal))(checked)
				f(checked)
			}
			qt.ConnectSignal(ptr.Pointer(), "toggled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "toggled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectToggled() {
	if ptr.Pointer() != nil {
		C.QAction_DisconnectToggled(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "toggled")
	}
}

func (ptr *QAction) Toggled(checked bool) {
	if ptr.Pointer() != nil {
		C.QAction_Toggled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(checked))))
	}
}

//export callbackQAction_Trigger
func callbackQAction_Trigger(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "trigger"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQActionFromPointer(ptr).TriggerDefault()
	}
}

func (ptr *QAction) ConnectTrigger(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "trigger"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "trigger", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "trigger", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectTrigger() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "trigger")
	}
}

func (ptr *QAction) Trigger() {
	if ptr.Pointer() != nil {
		C.QAction_Trigger(ptr.Pointer())
	}
}

func (ptr *QAction) TriggerDefault() {
	if ptr.Pointer() != nil {
		C.QAction_TriggerDefault(ptr.Pointer())
	}
}

//export callbackQAction_Triggered
func callbackQAction_Triggered(ptr unsafe.Pointer, checked C.char) {
	if signal := qt.GetSignal(ptr, "triggered"); signal != nil {
		(*(*func(bool))(signal))(int8(checked) != 0)
	}

}

func (ptr *QAction) ConnectTriggered(f func(checked bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "triggered") {
			C.QAction_ConnectTriggered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "triggered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "triggered"); signal != nil {
			f := func(checked bool) {
				(*(*func(bool))(signal))(checked)
				f(checked)
			}
			qt.ConnectSignal(ptr.Pointer(), "triggered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "triggered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectTriggered() {
	if ptr.Pointer() != nil {
		C.QAction_DisconnectTriggered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "triggered")
	}
}

func (ptr *QAction) Triggered(checked bool) {
	if ptr.Pointer() != nil {
		C.QAction_Triggered(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(checked))))
	}
}

//export callbackQAction_DestroyQAction
func callbackQAction_DestroyQAction(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QAction"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQActionFromPointer(ptr).DestroyQActionDefault()
	}
}

func (ptr *QAction) ConnectDestroyQAction(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QAction"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QAction", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QAction", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QAction) DisconnectDestroyQAction() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QAction")
	}
}

func (ptr *QAction) DestroyQAction() {
	if ptr.Pointer() != nil {
		C.QAction_DestroyQAction(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAction) DestroyQActionDefault() {
	if ptr.Pointer() != nil {
		C.QAction_DestroyQActionDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QAction) MenuRole() QAction__MenuRole {
	if ptr.Pointer() != nil {
		return QAction__MenuRole(C.QAction_MenuRole(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAction) Priority() QAction__Priority {
	if ptr.Pointer() != nil {
		return QAction__Priority(C.QAction_Priority(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAction) ActionGroup() *QActionGroup {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionGroupFromPointer(C.QAction_ActionGroup(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) Font() *gui.QFont {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontFromPointer(C.QAction_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QAction) Icon() *gui.QIcon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQIconFromPointer(C.QAction_Icon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QAction) Shortcut() *gui.QKeySequence {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQKeySequenceFromPointer(C.QAction_Shortcut(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QAction) AssociatedGraphicsWidgets() []*QGraphicsWidget {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsWidget {
			out := make([]*QGraphicsWidget, int(l.len))
			tmpList := NewQActionFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__associatedGraphicsWidgets_atList(i)
			}
			return out
		}(C.QAction_AssociatedGraphicsWidgets(ptr.Pointer()))
	}
	return make([]*QGraphicsWidget, 0)
}

func (ptr *QAction) Shortcuts() []*gui.QKeySequence {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*gui.QKeySequence {
			out := make([]*gui.QKeySequence, int(l.len))
			tmpList := NewQActionFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__shortcuts_atList(i)
			}
			return out
		}(C.QAction_Shortcuts(ptr.Pointer()))
	}
	return make([]*gui.QKeySequence, 0)
}

func (ptr *QAction) AssociatedWidgets() []*QWidget {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QWidget {
			out := make([]*QWidget, int(l.len))
			tmpList := NewQActionFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__associatedWidgets_atList(i)
			}
			return out
		}(C.QAction_AssociatedWidgets(ptr.Pointer()))
	}
	return make([]*QWidget, 0)
}

func (ptr *QAction) Menu() *QMenu {
	if ptr.Pointer() != nil {
		tmpValue := NewQMenuFromPointer(C.QAction_Menu(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) IconText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAction_IconText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAction) StatusTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAction_StatusTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAction) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAction_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAction) ToolTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAction_ToolTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAction) WhatsThis() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAction_WhatsThis(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAction) Data() *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QAction_Data(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAction) ParentWidget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QAction_ParentWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) ShortcutContext() core.Qt__ShortcutContext {
	if ptr.Pointer() != nil {
		return core.Qt__ShortcutContext(C.QAction_ShortcutContext(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAction) AutoRepeat() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_AutoRepeat(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAction) IsCheckable() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_IsCheckable(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAction) IsChecked() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_IsChecked(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAction) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_IsEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAction) IsIconVisibleInMenu() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_IsIconVisibleInMenu(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAction) IsSeparator() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_IsSeparator(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAction) IsShortcutVisibleInContextMenu() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_IsShortcutVisibleInContextMenu(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QAction) IsVisible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_IsVisible(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQAction_MetaObject
func callbackQAction_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQActionFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAction) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAction_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAction) __setShortcuts_shortcuts_atList(i int) *gui.QKeySequence {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQKeySequenceFromPointer(C.QAction___setShortcuts_shortcuts_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*gui.QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __setShortcuts_shortcuts_setList(i gui.QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___setShortcuts_shortcuts_setList(ptr.Pointer(), gui.PointerFromQKeySequence(i))
	}
}

func (ptr *QAction) __setShortcuts_shortcuts_newList() unsafe.Pointer {
	return C.QAction___setShortcuts_shortcuts_newList(ptr.Pointer())
}

func (ptr *QAction) __associatedGraphicsWidgets_atList(i int) *QGraphicsWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsWidgetFromPointer(C.QAction___associatedGraphicsWidgets_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __associatedGraphicsWidgets_setList(i QGraphicsWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___associatedGraphicsWidgets_setList(ptr.Pointer(), PointerFromQGraphicsWidget(i))
	}
}

func (ptr *QAction) __associatedGraphicsWidgets_newList() unsafe.Pointer {
	return C.QAction___associatedGraphicsWidgets_newList(ptr.Pointer())
}

func (ptr *QAction) __shortcuts_atList(i int) *gui.QKeySequence {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQKeySequenceFromPointer(C.QAction___shortcuts_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*gui.QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __shortcuts_setList(i gui.QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___shortcuts_setList(ptr.Pointer(), gui.PointerFromQKeySequence(i))
	}
}

func (ptr *QAction) __shortcuts_newList() unsafe.Pointer {
	return C.QAction___shortcuts_newList(ptr.Pointer())
}

func (ptr *QAction) __associatedWidgets_atList(i int) *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QAction___associatedWidgets_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __associatedWidgets_setList(i QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___associatedWidgets_setList(ptr.Pointer(), PointerFromQWidget(i))
	}
}

func (ptr *QAction) __associatedWidgets_newList() unsafe.Pointer {
	return C.QAction___associatedWidgets_newList(ptr.Pointer())
}

func (ptr *QAction) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QAction___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QAction) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QAction___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QAction) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QAction___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAction) __findChildren_newList2() unsafe.Pointer {
	return C.QAction___findChildren_newList2(ptr.Pointer())
}

func (ptr *QAction) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QAction___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAction) __findChildren_newList3() unsafe.Pointer {
	return C.QAction___findChildren_newList3(ptr.Pointer())
}

func (ptr *QAction) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QAction___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAction) __findChildren_newList() unsafe.Pointer {
	return C.QAction___findChildren_newList(ptr.Pointer())
}

func (ptr *QAction) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QAction___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAction) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAction___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QAction) __children_newList() unsafe.Pointer {
	return C.QAction___children_newList(ptr.Pointer())
}

//export callbackQAction_EventFilter
func callbackQAction_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQActionFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAction) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QAction_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQAction_ChildEvent
func callbackQAction_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQActionFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAction) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAction_ConnectNotify
func callbackQAction_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQActionFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAction) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAction_CustomEvent
func callbackQAction_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQActionFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAction) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAction_DeleteLater
func callbackQAction_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQActionFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAction) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAction_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQAction_Destroyed
func callbackQAction_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQAction_DisconnectNotify
func callbackQAction_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQActionFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAction) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAction_ObjectNameChanged
func callbackQAction_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQAction_TimerEvent
func callbackQAction_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQActionFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAction) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAction_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

type QActionGroup struct {
	core.QObject
}

type QActionGroup_ITF interface {
	core.QObject_ITF
	QActionGroup_PTR() *QActionGroup
}

func (ptr *QActionGroup) QActionGroup_PTR() *QActionGroup {
	return ptr
}

func (ptr *QActionGroup) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QActionGroup) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQActionGroup(ptr QActionGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QActionGroup_PTR().Pointer()
	}
	return nil
}

func NewQActionGroupFromPointer(ptr unsafe.Pointer) (n *QActionGroup) {
	n = new(QActionGroup)
	n.SetPointer(ptr)
	return
}
func (ptr *QActionGroup) AddAction(action QAction_ITF) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QActionGroup_AddAction(ptr.Pointer(), PointerFromQAction(action)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) AddAction3(icon gui.QIcon_ITF, text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QActionGroup_AddAction3(ptr.Pointer(), gui.PointerFromQIcon(icon), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) AddAction2(text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QActionGroup_AddAction2(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func NewQActionGroup(parent core.QObject_ITF) *QActionGroup {
	tmpValue := NewQActionGroupFromPointer(C.QActionGroup_NewQActionGroup(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QActionGroup_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QActionGroup_QActionGroup_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QActionGroup) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QActionGroup_QActionGroup_Tr(sC, cC, C.int(int32(n))))
}

//export callbackQActionGroup_Hovered
func callbackQActionGroup_Hovered(ptr unsafe.Pointer, action unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hovered"); signal != nil {
		(*(*func(*QAction))(signal))(NewQActionFromPointer(action))
	}

}

func (ptr *QActionGroup) ConnectHovered(f func(action *QAction)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "hovered") {
			C.QActionGroup_ConnectHovered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "hovered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "hovered"); signal != nil {
			f := func(action *QAction) {
				(*(*func(*QAction))(signal))(action)
				f(action)
			}
			qt.ConnectSignal(ptr.Pointer(), "hovered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hovered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QActionGroup) DisconnectHovered() {
	if ptr.Pointer() != nil {
		C.QActionGroup_DisconnectHovered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "hovered")
	}
}

func (ptr *QActionGroup) Hovered(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_Hovered(ptr.Pointer(), PointerFromQAction(action))
	}
}

func (ptr *QActionGroup) RemoveAction(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_RemoveAction(ptr.Pointer(), PointerFromQAction(action))
	}
}

//export callbackQActionGroup_SetDisabled
func callbackQActionGroup_SetDisabled(ptr unsafe.Pointer, b C.char) {
	if signal := qt.GetSignal(ptr, "setDisabled"); signal != nil {
		(*(*func(bool))(signal))(int8(b) != 0)
	} else {
		NewQActionGroupFromPointer(ptr).SetDisabledDefault(int8(b) != 0)
	}
}

func (ptr *QActionGroup) ConnectSetDisabled(f func(b bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setDisabled"); signal != nil {
			f := func(b bool) {
				(*(*func(bool))(signal))(b)
				f(b)
			}
			qt.ConnectSignal(ptr.Pointer(), "setDisabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setDisabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QActionGroup) DisconnectSetDisabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setDisabled")
	}
}

func (ptr *QActionGroup) SetDisabled(b bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetDisabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QActionGroup) SetDisabledDefault(b bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetDisabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

//export callbackQActionGroup_SetEnabled
func callbackQActionGroup_SetEnabled(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setEnabled"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQActionGroupFromPointer(ptr).SetEnabledDefault(int8(vbo) != 0)
	}
}

func (ptr *QActionGroup) ConnectSetEnabled(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setEnabled"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QActionGroup) DisconnectSetEnabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setEnabled")
	}
}

func (ptr *QActionGroup) SetEnabled(vbo bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QActionGroup) SetEnabledDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetEnabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQActionGroup_SetExclusive
func callbackQActionGroup_SetExclusive(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setExclusive"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQActionGroupFromPointer(ptr).SetExclusiveDefault(int8(vbo) != 0)
	}
}

func (ptr *QActionGroup) ConnectSetExclusive(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setExclusive"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setExclusive", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setExclusive", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QActionGroup) DisconnectSetExclusive() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setExclusive")
	}
}

func (ptr *QActionGroup) SetExclusive(vbo bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetExclusive(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QActionGroup) SetExclusiveDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetExclusiveDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQActionGroup_SetVisible
func callbackQActionGroup_SetVisible(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setVisible"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQActionGroupFromPointer(ptr).SetVisibleDefault(int8(vbo) != 0)
	}
}

func (ptr *QActionGroup) ConnectSetVisible(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setVisible"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setVisible", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setVisible", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QActionGroup) DisconnectSetVisible() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setVisible")
	}
}

func (ptr *QActionGroup) SetVisible(vbo bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QActionGroup) SetVisibleDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QActionGroup_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//export callbackQActionGroup_Triggered
func callbackQActionGroup_Triggered(ptr unsafe.Pointer, action unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "triggered"); signal != nil {
		(*(*func(*QAction))(signal))(NewQActionFromPointer(action))
	}

}

func (ptr *QActionGroup) ConnectTriggered(f func(action *QAction)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "triggered") {
			C.QActionGroup_ConnectTriggered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "triggered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "triggered"); signal != nil {
			f := func(action *QAction) {
				(*(*func(*QAction))(signal))(action)
				f(action)
			}
			qt.ConnectSignal(ptr.Pointer(), "triggered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "triggered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QActionGroup) DisconnectTriggered() {
	if ptr.Pointer() != nil {
		C.QActionGroup_DisconnectTriggered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "triggered")
	}
}

func (ptr *QActionGroup) Triggered(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_Triggered(ptr.Pointer(), PointerFromQAction(action))
	}
}

//export callbackQActionGroup_DestroyQActionGroup
func callbackQActionGroup_DestroyQActionGroup(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QActionGroup"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQActionGroupFromPointer(ptr).DestroyQActionGroupDefault()
	}
}

func (ptr *QActionGroup) ConnectDestroyQActionGroup(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QActionGroup"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QActionGroup", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QActionGroup", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QActionGroup) DisconnectDestroyQActionGroup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QActionGroup")
	}
}

func (ptr *QActionGroup) DestroyQActionGroup() {
	if ptr.Pointer() != nil {
		C.QActionGroup_DestroyQActionGroup(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QActionGroup) DestroyQActionGroupDefault() {
	if ptr.Pointer() != nil {
		C.QActionGroup_DestroyQActionGroupDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QActionGroup) CheckedAction() *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QActionGroup_CheckedAction(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) Actions() []*QAction {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QAction {
			out := make([]*QAction, int(l.len))
			tmpList := NewQActionGroupFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__actions_atList(i)
			}
			return out
		}(C.QActionGroup_Actions(ptr.Pointer()))
	}
	return make([]*QAction, 0)
}

func (ptr *QActionGroup) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QActionGroup_IsEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QActionGroup) IsExclusive() bool {
	if ptr.Pointer() != nil {
		return int8(C.QActionGroup_IsExclusive(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QActionGroup) IsVisible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QActionGroup_IsVisible(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQActionGroup_MetaObject
func callbackQActionGroup_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQActionGroupFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QActionGroup) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QActionGroup_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QActionGroup) __actions_atList(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QActionGroup___actions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) __actions_setList(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup___actions_setList(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QActionGroup) __actions_newList() unsafe.Pointer {
	return C.QActionGroup___actions_newList(ptr.Pointer())
}

func (ptr *QActionGroup) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QActionGroup___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QActionGroup) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QActionGroup___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QActionGroup) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QActionGroup___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QActionGroup) __findChildren_newList2() unsafe.Pointer {
	return C.QActionGroup___findChildren_newList2(ptr.Pointer())
}

func (ptr *QActionGroup) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QActionGroup___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QActionGroup) __findChildren_newList3() unsafe.Pointer {
	return C.QActionGroup___findChildren_newList3(ptr.Pointer())
}

func (ptr *QActionGroup) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QActionGroup___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QActionGroup) __findChildren_newList() unsafe.Pointer {
	return C.QActionGroup___findChildren_newList(ptr.Pointer())
}

func (ptr *QActionGroup) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QActionGroup___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QActionGroup) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QActionGroup) __children_newList() unsafe.Pointer {
	return C.QActionGroup___children_newList(ptr.Pointer())
}

//export callbackQActionGroup_Event
func callbackQActionGroup_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQActionGroupFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QActionGroup) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QActionGroup_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

//export callbackQActionGroup_EventFilter
func callbackQActionGroup_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQActionGroupFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QActionGroup) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QActionGroup_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQActionGroup_ChildEvent
func callbackQActionGroup_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQActionGroupFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QActionGroup) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQActionGroup_ConnectNotify
func callbackQActionGroup_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQActionGroupFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QActionGroup) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQActionGroup_CustomEvent
func callbackQActionGroup_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQActionGroupFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QActionGroup) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQActionGroup_DeleteLater
func callbackQActionGroup_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQActionGroupFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QActionGroup) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QActionGroup_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQActionGroup_Destroyed
func callbackQActionGroup_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQActionGroup_DisconnectNotify
func callbackQActionGroup_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQActionGroupFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QActionGroup) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQActionGroup_ObjectNameChanged
func callbackQActionGroup_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQActionGroup_TimerEvent
func callbackQActionGroup_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQActionGroupFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QActionGroup) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QActionGroup_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

type QApplication struct {
	gui.QGuiApplication
}

type QApplication_ITF interface {
	gui.QGuiApplication_ITF
	QApplication_PTR() *QApplication
}

func (ptr *QApplication) QApplication_PTR() *QApplication {
	return ptr
}

func (ptr *QApplication) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGuiApplication_PTR().Pointer()
	}
	return nil
}

func (ptr *QApplication) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGuiApplication_PTR().SetPointer(p)
	}
}

func PointerFromQApplication(ptr QApplication_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QApplication_PTR().Pointer()
	}
	return nil
}

func NewQApplicationFromPointer(ptr unsafe.Pointer) (n *QApplication) {
	n = new(QApplication)
	n.SetPointer(ptr)
	return
}
func NewQApplication(argc int, argv []string) *QApplication {
	argvC := C.CString(strings.Join(argv, "|"))
	defer C.free(unsafe.Pointer(argvC))
	tmpValue := NewQApplicationFromPointer(C.QApplication_NewQApplication(C.int(int32(argc)), argvC))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_Desktop() *QDesktopWidget {
	tmpValue := NewQDesktopWidgetFromPointer(C.QApplication_QApplication_Desktop())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) Desktop() *QDesktopWidget {
	tmpValue := NewQDesktopWidgetFromPointer(C.QApplication_QApplication_Desktop())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_Font() *gui.QFont {
	tmpValue := gui.NewQFontFromPointer(C.QApplication_QApplication_Font())
	runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QApplication) Font() *gui.QFont {
	tmpValue := gui.NewQFontFromPointer(C.QApplication_QApplication_Font())
	runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
	return tmpValue
}

func QApplication_Font2(widget QWidget_ITF) *gui.QFont {
	tmpValue := gui.NewQFontFromPointer(C.QApplication_QApplication_Font2(PointerFromQWidget(widget)))
	runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QApplication) Font2(widget QWidget_ITF) *gui.QFont {
	tmpValue := gui.NewQFontFromPointer(C.QApplication_QApplication_Font2(PointerFromQWidget(widget)))
	runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
	return tmpValue
}

func QApplication_Font3(className string) *gui.QFont {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	tmpValue := gui.NewQFontFromPointer(C.QApplication_QApplication_Font3(classNameC))
	runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QApplication) Font3(className string) *gui.QFont {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	tmpValue := gui.NewQFontFromPointer(C.QApplication_QApplication_Font3(classNameC))
	runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
	return tmpValue
}

func QApplication_FontMetrics() *gui.QFontMetrics {
	tmpValue := gui.NewQFontMetricsFromPointer(C.QApplication_QApplication_FontMetrics())
	runtime.SetFinalizer(tmpValue, (*gui.QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func (ptr *QApplication) FontMetrics() *gui.QFontMetrics {
	tmpValue := gui.NewQFontMetricsFromPointer(C.QApplication_QApplication_FontMetrics())
	runtime.SetFinalizer(tmpValue, (*gui.QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func QApplication_WindowIcon() *gui.QIcon {
	tmpValue := gui.NewQIconFromPointer(C.QApplication_QApplication_WindowIcon())
	runtime.SetFinalizer(tmpValue, (*gui.QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QApplication) WindowIcon() *gui.QIcon {
	tmpValue := gui.NewQIconFromPointer(C.QApplication_QApplication_WindowIcon())
	runtime.SetFinalizer(tmpValue, (*gui.QIcon).DestroyQIcon)
	return tmpValue
}

func QApplication_Palette(widget QWidget_ITF) *gui.QPalette {
	tmpValue := gui.NewQPaletteFromPointer(C.QApplication_QApplication_Palette(PointerFromQWidget(widget)))
	runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
	return tmpValue
}

func (ptr *QApplication) Palette(widget QWidget_ITF) *gui.QPalette {
	tmpValue := gui.NewQPaletteFromPointer(C.QApplication_QApplication_Palette(PointerFromQWidget(widget)))
	runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
	return tmpValue
}

func QApplication_Palette2(className string) *gui.QPalette {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	tmpValue := gui.NewQPaletteFromPointer(C.QApplication_QApplication_Palette2(classNameC))
	runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
	return tmpValue
}

func (ptr *QApplication) Palette2(className string) *gui.QPalette {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	tmpValue := gui.NewQPaletteFromPointer(C.QApplication_QApplication_Palette2(classNameC))
	runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
	return tmpValue
}

func QApplication_GlobalStrut() *core.QSize {
	tmpValue := core.NewQSizeFromPointer(C.QApplication_QApplication_GlobalStrut())
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QApplication) GlobalStrut() *core.QSize {
	tmpValue := core.NewQSizeFromPointer(C.QApplication_QApplication_GlobalStrut())
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func QApplication_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QApplication_QApplication_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QApplication) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QApplication_QApplication_Tr(sC, cC, C.int(int32(n))))
}

func QApplication_SetStyle2(style string) *QStyle {
	var styleC *C.char
	if style != "" {
		styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
	}
	tmpValue := NewQStyleFromPointer(C.QApplication_QApplication_SetStyle2(C.struct_QtWidgets_PackedString{data: styleC, len: C.longlong(len(style))}))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) SetStyle2(style string) *QStyle {
	var styleC *C.char
	if style != "" {
		styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
	}
	tmpValue := NewQStyleFromPointer(C.QApplication_QApplication_SetStyle2(C.struct_QtWidgets_PackedString{data: styleC, len: C.longlong(len(style))}))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_Style() *QStyle {
	tmpValue := NewQStyleFromPointer(C.QApplication_QApplication_Style())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) Style() *QStyle {
	tmpValue := NewQStyleFromPointer(C.QApplication_QApplication_Style())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_ActiveModalWidget() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_ActiveModalWidget())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) ActiveModalWidget() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_ActiveModalWidget())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_ActivePopupWidget() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_ActivePopupWidget())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) ActivePopupWidget() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_ActivePopupWidget())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_ActiveWindow() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_ActiveWindow())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) ActiveWindow() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_ActiveWindow())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_FocusWidget() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_FocusWidget())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) FocusWidget() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_FocusWidget())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_TopLevelAt(point core.QPoint_ITF) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_TopLevelAt(core.PointerFromQPoint(point)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) TopLevelAt(point core.QPoint_ITF) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_TopLevelAt(core.PointerFromQPoint(point)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_TopLevelAt2(x int, y int) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_TopLevelAt2(C.int(int32(x)), C.int(int32(y))))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) TopLevelAt2(x int, y int) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_TopLevelAt2(C.int(int32(x)), C.int(int32(y))))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_WidgetAt(point core.QPoint_ITF) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_WidgetAt(core.PointerFromQPoint(point)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) WidgetAt(point core.QPoint_ITF) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_WidgetAt(core.PointerFromQPoint(point)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_WidgetAt2(x int, y int) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_WidgetAt2(C.int(int32(x)), C.int(int32(y))))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QApplication) WidgetAt2(x int, y int) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QApplication_QApplication_WidgetAt2(C.int(int32(x)), C.int(int32(y))))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QApplication_AllWidgets() []*QWidget {
	return func(l C.struct_QtWidgets_PackedList) []*QWidget {
		out := make([]*QWidget, int(l.len))
		tmpList := NewQApplicationFromPointer(l.data)
		for i := 0; i < len(out); i++ {
			out[i] = tmpList.__allWidgets_atList(i)
		}
		return out
	}(C.QApplication_QApplication_AllWidgets())
}

func (ptr *QApplication) AllWidgets() []*QWidget {
	return func(l C.struct_QtWidgets_PackedList) []*QWidget {
		out := make([]*QWidget, int(l.len))
		tmpList := NewQApplicationFromPointer(l.data)
		for i := 0; i < len(out); i++ {
			out[i] = tmpList.__allWidgets_atList(i)
		}
		return out
	}(C.QApplication_QApplication_AllWidgets())
}

func QApplication_TopLevelWidgets() []*QWidget {
	return func(l C.struct_QtWidgets_PackedList) []*QWidget {
		out := make([]*QWidget, int(l.len))
		tmpList := NewQApplicationFromPointer(l.data)
		for i := 0; i < len(out); i++ {
			out[i] = tmpList.__topLevelWidgets_atList(i)
		}
		return out
	}(C.QApplication_QApplication_TopLevelWidgets())
}

func (ptr *QApplication) TopLevelWidgets() []*QWidget {
	return func(l C.struct_QtWidgets_PackedList) []*QWidget {
		out := make([]*QWidget, int(l.len))
		tmpList := NewQApplicationFromPointer(l.data)
		for i := 0; i < len(out); i++ {
			out[i] = tmpList.__topLevelWidgets_atList(i)
		}
		return out
	}(C.QApplication_QApplication_TopLevelWidgets())
}

func QApplication_NavigationMode() core.Qt__NavigationMode {
	return core.Qt__NavigationMode(C.QApplication_QApplication_NavigationMode())
}

func (ptr *QApplication) NavigationMode() core.Qt__NavigationMode {
	return core.Qt__NavigationMode(C.QApplication_QApplication_NavigationMode())
}

//export callbackQApplication_Event
func callbackQApplication_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQApplicationFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QApplication) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QApplication_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

func QApplication_IsEffectEnabled(effect core.Qt__UIEffect) bool {
	return int8(C.QApplication_QApplication_IsEffectEnabled(C.longlong(effect))) != 0
}

func (ptr *QApplication) IsEffectEnabled(effect core.Qt__UIEffect) bool {
	return int8(C.QApplication_QApplication_IsEffectEnabled(C.longlong(effect))) != 0
}

func QApplication_CursorFlashTime() int {
	return int(int32(C.QApplication_QApplication_CursorFlashTime()))
}

func (ptr *QApplication) CursorFlashTime() int {
	return int(int32(C.QApplication_QApplication_CursorFlashTime()))
}

func QApplication_DoubleClickInterval() int {
	return int(int32(C.QApplication_QApplication_DoubleClickInterval()))
}

func (ptr *QApplication) DoubleClickInterval() int {
	return int(int32(C.QApplication_QApplication_DoubleClickInterval()))
}

func QApplication_Exec() int {
	return int(int32(C.QApplication_QApplication_Exec()))
}

func (ptr *QApplication) Exec() int {
	return int(int32(C.QApplication_QApplication_Exec()))
}

func QApplication_KeyboardInputInterval() int {
	return int(int32(C.QApplication_QApplication_KeyboardInputInterval()))
}

func (ptr *QApplication) KeyboardInputInterval() int {
	return int(int32(C.QApplication_QApplication_KeyboardInputInterval()))
}

func QApplication_StartDragDistance() int {
	return int(int32(C.QApplication_QApplication_StartDragDistance()))
}

func (ptr *QApplication) StartDragDistance() int {
	return int(int32(C.QApplication_QApplication_StartDragDistance()))
}

func QApplication_StartDragTime() int {
	return int(int32(C.QApplication_QApplication_StartDragTime()))
}

func (ptr *QApplication) StartDragTime() int {
	return int(int32(C.QApplication_QApplication_StartDragTime()))
}

func QApplication_WheelScrollLines() int {
	return int(int32(C.QApplication_QApplication_WheelScrollLines()))
}

func (ptr *QApplication) WheelScrollLines() int {
	return int(int32(C.QApplication_QApplication_WheelScrollLines()))
}

//export callbackQApplication_AboutQt
func callbackQApplication_AboutQt(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "aboutQt"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQApplicationFromPointer(ptr).AboutQtDefault()
	}
}

func (ptr *QApplication) ConnectAboutQt(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "aboutQt"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "aboutQt", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "aboutQt", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QApplication) DisconnectAboutQt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "aboutQt")
	}
}

func (ptr *QApplication) AboutQt() {
	if ptr.Pointer() != nil {
		C.QApplication_AboutQt(ptr.Pointer())
	}
}

func (ptr *QApplication) AboutQtDefault() {
	if ptr.Pointer() != nil {
		C.QApplication_AboutQtDefault(ptr.Pointer())
	}
}

func QApplication_Alert(widget QWidget_ITF, msec int) {
	C.QApplication_QApplication_Alert(PointerFromQWidget(widget), C.int(int32(msec)))
}

func (ptr *QApplication) Alert(widget QWidget_ITF, msec int) {
	C.QApplication_QApplication_Alert(PointerFromQWidget(widget), C.int(int32(msec)))
}

func QApplication_Beep() {
	C.QApplication_QApplication_Beep()
}

func (ptr *QApplication) Beep() {
	C.QApplication_QApplication_Beep()
}

//export callbackQApplication_CloseAllWindows
func callbackQApplication_CloseAllWindows(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "closeAllWindows"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQApplicationFromPointer(ptr).CloseAllWindowsDefault()
	}
}

func (ptr *QApplication) ConnectCloseAllWindows(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "closeAllWindows"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "closeAllWindows", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "closeAllWindows", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QApplication) DisconnectCloseAllWindows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "closeAllWindows")
	}
}

func (ptr *QApplication) CloseAllWindows() {
	if ptr.Pointer() != nil {
		C.QApplication_CloseAllWindows(ptr.Pointer())
	}
}

func (ptr *QApplication) CloseAllWindowsDefault() {
	if ptr.Pointer() != nil {
		C.QApplication_CloseAllWindowsDefault(ptr.Pointer())
	}
}

//export callbackQApplication_FocusChanged
func callbackQApplication_FocusChanged(ptr unsafe.Pointer, old unsafe.Pointer, now unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusChanged"); signal != nil {
		(*(*func(*QWidget, *QWidget))(signal))(NewQWidgetFromPointer(old), NewQWidgetFromPointer(now))
	}

}

func (ptr *QApplication) ConnectFocusChanged(f func(old *QWidget, now *QWidget)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "focusChanged") {
			C.QApplication_ConnectFocusChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "focusChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "focusChanged"); signal != nil {
			f := func(old *QWidget, now *QWidget) {
				(*(*func(*QWidget, *QWidget))(signal))(old, now)
				f(old, now)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QApplication) DisconnectFocusChanged() {
	if ptr.Pointer() != nil {
		C.QApplication_DisconnectFocusChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "focusChanged")
	}
}

func (ptr *QApplication) FocusChanged(old QWidget_ITF, now QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication_FocusChanged(ptr.Pointer(), PointerFromQWidget(old), PointerFromQWidget(now))
	}
}

func QApplication_SetActiveWindow(active QWidget_ITF) {
	C.QApplication_QApplication_SetActiveWindow(PointerFromQWidget(active))
}

func (ptr *QApplication) SetActiveWindow(active QWidget_ITF) {
	C.QApplication_QApplication_SetActiveWindow(PointerFromQWidget(active))
}

//export callbackQApplication_SetAutoSipEnabled
func callbackQApplication_SetAutoSipEnabled(ptr unsafe.Pointer, enabled C.char) {
	if signal := qt.GetSignal(ptr, "setAutoSipEnabled"); signal != nil {
		(*(*func(bool))(signal))(int8(enabled) != 0)
	} else {
		NewQApplicationFromPointer(ptr).SetAutoSipEnabledDefault(int8(enabled) != 0)
	}
}

func (ptr *QApplication) ConnectSetAutoSipEnabled(f func(enabled bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setAutoSipEnabled"); signal != nil {
			f := func(enabled bool) {
				(*(*func(bool))(signal))(enabled)
				f(enabled)
			}
			qt.ConnectSignal(ptr.Pointer(), "setAutoSipEnabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setAutoSipEnabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QApplication) DisconnectSetAutoSipEnabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setAutoSipEnabled")
	}
}

func (ptr *QApplication) SetAutoSipEnabled(enabled bool) {
	if ptr.Pointer() != nil {
		C.QApplication_SetAutoSipEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QApplication) SetAutoSipEnabledDefault(enabled bool) {
	if ptr.Pointer() != nil {
		C.QApplication_SetAutoSipEnabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func QApplication_SetCursorFlashTime(vin int) {
	C.QApplication_QApplication_SetCursorFlashTime(C.int(int32(vin)))
}

func (ptr *QApplication) SetCursorFlashTime(vin int) {
	C.QApplication_QApplication_SetCursorFlashTime(C.int(int32(vin)))
}

func QApplication_SetDoubleClickInterval(vin int) {
	C.QApplication_QApplication_SetDoubleClickInterval(C.int(int32(vin)))
}

func (ptr *QApplication) SetDoubleClickInterval(vin int) {
	C.QApplication_QApplication_SetDoubleClickInterval(C.int(int32(vin)))
}

func QApplication_SetEffectEnabled(effect core.Qt__UIEffect, enable bool) {
	C.QApplication_QApplication_SetEffectEnabled(C.longlong(effect), C.char(int8(qt.GoBoolToInt(enable))))
}

func (ptr *QApplication) SetEffectEnabled(effect core.Qt__UIEffect, enable bool) {
	C.QApplication_QApplication_SetEffectEnabled(C.longlong(effect), C.char(int8(qt.GoBoolToInt(enable))))
}

func QApplication_SetFont(font gui.QFont_ITF, className string) {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	C.QApplication_QApplication_SetFont(gui.PointerFromQFont(font), classNameC)
}

func (ptr *QApplication) SetFont(font gui.QFont_ITF, className string) {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	C.QApplication_QApplication_SetFont(gui.PointerFromQFont(font), classNameC)
}

func QApplication_SetGlobalStrut(vqs core.QSize_ITF) {
	C.QApplication_QApplication_SetGlobalStrut(core.PointerFromQSize(vqs))
}

func (ptr *QApplication) SetGlobalStrut(vqs core.QSize_ITF) {
	C.QApplication_QApplication_SetGlobalStrut(core.PointerFromQSize(vqs))
}

func QApplication_SetKeyboardInputInterval(vin int) {
	C.QApplication_QApplication_SetKeyboardInputInterval(C.int(int32(vin)))
}

func (ptr *QApplication) SetKeyboardInputInterval(vin int) {
	C.QApplication_QApplication_SetKeyboardInputInterval(C.int(int32(vin)))
}

func QApplication_SetNavigationMode(mode core.Qt__NavigationMode) {
	C.QApplication_QApplication_SetNavigationMode(C.longlong(mode))
}

func (ptr *QApplication) SetNavigationMode(mode core.Qt__NavigationMode) {
	C.QApplication_QApplication_SetNavigationMode(C.longlong(mode))
}

func QApplication_SetPalette(palette gui.QPalette_ITF, className string) {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	C.QApplication_QApplication_SetPalette(gui.PointerFromQPalette(palette), classNameC)
}

func (ptr *QApplication) SetPalette(palette gui.QPalette_ITF, className string) {
	var classNameC *C.char
	if className != "" {
		classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
	}
	C.QApplication_QApplication_SetPalette(gui.PointerFromQPalette(palette), classNameC)
}

func QApplication_SetStartDragDistance(l int) {
	C.QApplication_QApplication_SetStartDragDistance(C.int(int32(l)))
}

func (ptr *QApplication) SetStartDragDistance(l int) {
	C.QApplication_QApplication_SetStartDragDistance(C.int(int32(l)))
}

func QApplication_SetStartDragTime(ms int) {
	C.QApplication_QApplication_SetStartDragTime(C.int(int32(ms)))
}

func (ptr *QApplication) SetStartDragTime(ms int) {
	C.QApplication_QApplication_SetStartDragTime(C.int(int32(ms)))
}

func QApplication_SetStyle(style QStyle_ITF) {
	C.QApplication_QApplication_SetStyle(PointerFromQStyle(style))
}

func (ptr *QApplication) SetStyle(style QStyle_ITF) {
	C.QApplication_QApplication_SetStyle(PointerFromQStyle(style))
}

//export callbackQApplication_SetStyleSheet
func callbackQApplication_SetStyleSheet(ptr unsafe.Pointer, sheet C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "setStyleSheet"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(sheet))
	} else {
		NewQApplicationFromPointer(ptr).SetStyleSheetDefault(cGoUnpackString(sheet))
	}
}

func (ptr *QApplication) ConnectSetStyleSheet(f func(sheet string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setStyleSheet"); signal != nil {
			f := func(sheet string) {
				(*(*func(string))(signal))(sheet)
				f(sheet)
			}
			qt.ConnectSignal(ptr.Pointer(), "setStyleSheet", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setStyleSheet", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QApplication) DisconnectSetStyleSheet() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setStyleSheet")
	}
}

func (ptr *QApplication) SetStyleSheet(sheet string) {
	if ptr.Pointer() != nil {
		var sheetC *C.char
		if sheet != "" {
			sheetC = C.CString(sheet)
			defer C.free(unsafe.Pointer(sheetC))
		}
		C.QApplication_SetStyleSheet(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: sheetC, len: C.longlong(len(sheet))})
	}
}

func (ptr *QApplication) SetStyleSheetDefault(sheet string) {
	if ptr.Pointer() != nil {
		var sheetC *C.char
		if sheet != "" {
			sheetC = C.CString(sheet)
			defer C.free(unsafe.Pointer(sheetC))
		}
		C.QApplication_SetStyleSheetDefault(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: sheetC, len: C.longlong(len(sheet))})
	}
}

func QApplication_SetWheelScrollLines(vin int) {
	C.QApplication_QApplication_SetWheelScrollLines(C.int(int32(vin)))
}

func (ptr *QApplication) SetWheelScrollLines(vin int) {
	C.QApplication_QApplication_SetWheelScrollLines(C.int(int32(vin)))
}

func QApplication_SetWindowIcon(icon gui.QIcon_ITF) {
	C.QApplication_QApplication_SetWindowIcon(gui.PointerFromQIcon(icon))
}

func (ptr *QApplication) SetWindowIcon(icon gui.QIcon_ITF) {
	C.QApplication_QApplication_SetWindowIcon(gui.PointerFromQIcon(icon))
}

//export callbackQApplication_DestroyQApplication
func callbackQApplication_DestroyQApplication(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QApplication"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQApplicationFromPointer(ptr).DestroyQApplicationDefault()
	}
}

func (ptr *QApplication) ConnectDestroyQApplication(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QApplication"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QApplication", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QApplication", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QApplication) DisconnectDestroyQApplication() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QApplication")
	}
}

func (ptr *QApplication) DestroyQApplication() {
	if ptr.Pointer() != nil {
		C.QApplication_DestroyQApplication(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QApplication) DestroyQApplicationDefault() {
	if ptr.Pointer() != nil {
		C.QApplication_DestroyQApplicationDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QApplication) StyleSheet() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QApplication_StyleSheet(ptr.Pointer()))
	}
	return ""
}

//export callbackQApplication_AutoSipEnabled
func callbackQApplication_AutoSipEnabled(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "autoSipEnabled"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQApplicationFromPointer(ptr).AutoSipEnabledDefault())))
}

func (ptr *QApplication) ConnectAutoSipEnabled(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "autoSipEnabled"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "autoSipEnabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "autoSipEnabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QApplication) DisconnectAutoSipEnabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "autoSipEnabled")
	}
}

func (ptr *QApplication) AutoSipEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QApplication_AutoSipEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QApplication) AutoSipEnabledDefault() bool {
	if ptr.Pointer() != nil {
		return int8(C.QApplication_AutoSipEnabledDefault(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQApplication_MetaObject
func callbackQApplication_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQApplicationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QApplication) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QApplication_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QApplication) __allWidgets_atList(i int) *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QApplication___allWidgets_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __allWidgets_setList(i QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___allWidgets_setList(ptr.Pointer(), PointerFromQWidget(i))
	}
}

func (ptr *QApplication) __allWidgets_newList() unsafe.Pointer {
	return C.QApplication___allWidgets_newList(ptr.Pointer())
}

func (ptr *QApplication) __topLevelWidgets_atList(i int) *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QApplication___topLevelWidgets_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __topLevelWidgets_setList(i QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___topLevelWidgets_setList(ptr.Pointer(), PointerFromQWidget(i))
	}
}

func (ptr *QApplication) __topLevelWidgets_newList() unsafe.Pointer {
	return C.QApplication___topLevelWidgets_newList(ptr.Pointer())
}

func (ptr *QApplication) __screens_atList(i int) *gui.QScreen {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQScreenFromPointer(C.QApplication___screens_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __screens_setList(i gui.QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___screens_setList(ptr.Pointer(), gui.PointerFromQScreen(i))
	}
}

func (ptr *QApplication) __screens_newList() unsafe.Pointer {
	return C.QApplication___screens_newList(ptr.Pointer())
}

func (ptr *QApplication) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QApplication___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QApplication) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QApplication___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QApplication) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QApplication___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QApplication) __findChildren_newList2() unsafe.Pointer {
	return C.QApplication___findChildren_newList2(ptr.Pointer())
}

func (ptr *QApplication) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QApplication___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QApplication) __findChildren_newList3() unsafe.Pointer {
	return C.QApplication___findChildren_newList3(ptr.Pointer())
}

func (ptr *QApplication) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QApplication___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QApplication) __findChildren_newList() unsafe.Pointer {
	return C.QApplication___findChildren_newList(ptr.Pointer())
}

func (ptr *QApplication) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QApplication___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QApplication) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QApplication) __children_newList() unsafe.Pointer {
	return C.QApplication___children_newList(ptr.Pointer())
}

//export callbackQApplication_ApplicationDisplayNameChanged
func callbackQApplication_ApplicationDisplayNameChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "applicationDisplayNameChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

//export callbackQApplication_ApplicationStateChanged
func callbackQApplication_ApplicationStateChanged(ptr unsafe.Pointer, state C.longlong) {
	if signal := qt.GetSignal(ptr, "applicationStateChanged"); signal != nil {
		(*(*func(core.Qt__ApplicationState))(signal))(core.Qt__ApplicationState(state))
	}

}

//export callbackQApplication_CommitDataRequest
func callbackQApplication_CommitDataRequest(ptr unsafe.Pointer, manager unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "commitDataRequest"); signal != nil {
		(*(*func(*gui.QSessionManager))(signal))(gui.NewQSessionManagerFromPointer(manager))
	}

}

//export callbackQApplication_FocusObjectChanged
func callbackQApplication_FocusObjectChanged(ptr unsafe.Pointer, focusObject unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusObjectChanged"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(focusObject))
	}

}

//export callbackQApplication_FocusWindowChanged
func callbackQApplication_FocusWindowChanged(ptr unsafe.Pointer, focusWindow unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusWindowChanged"); signal != nil {
		(*(*func(*gui.QWindow))(signal))(gui.NewQWindowFromPointer(focusWindow))
	}

}

//export callbackQApplication_FontChanged
func callbackQApplication_FontChanged(ptr unsafe.Pointer, font unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "fontChanged"); signal != nil {
		(*(*func(*gui.QFont))(signal))(gui.NewQFontFromPointer(font))
	}

}

//export callbackQApplication_FontDatabaseChanged
func callbackQApplication_FontDatabaseChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "fontDatabaseChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

//export callbackQApplication_LastWindowClosed
func callbackQApplication_LastWindowClosed(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "lastWindowClosed"); signal != nil {
		(*(*func())(signal))()
	}

}

//export callbackQApplication_LayoutDirectionChanged
func callbackQApplication_LayoutDirectionChanged(ptr unsafe.Pointer, direction C.longlong) {
	if signal := qt.GetSignal(ptr, "layoutDirectionChanged"); signal != nil {
		(*(*func(core.Qt__LayoutDirection))(signal))(core.Qt__LayoutDirection(direction))
	}

}

//export callbackQApplication_PaletteChanged
func callbackQApplication_PaletteChanged(ptr unsafe.Pointer, palette unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paletteChanged"); signal != nil {
		(*(*func(*gui.QPalette))(signal))(gui.NewQPaletteFromPointer(palette))
	}

}

//export callbackQApplication_PrimaryScreenChanged
func callbackQApplication_PrimaryScreenChanged(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "primaryScreenChanged"); signal != nil {
		(*(*func(*gui.QScreen))(signal))(gui.NewQScreenFromPointer(screen))
	}

}

//export callbackQApplication_SaveStateRequest
func callbackQApplication_SaveStateRequest(ptr unsafe.Pointer, manager unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "saveStateRequest"); signal != nil {
		(*(*func(*gui.QSessionManager))(signal))(gui.NewQSessionManagerFromPointer(manager))
	}

}

//export callbackQApplication_ScreenAdded
func callbackQApplication_ScreenAdded(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "screenAdded"); signal != nil {
		(*(*func(*gui.QScreen))(signal))(gui.NewQScreenFromPointer(screen))
	}

}

//export callbackQApplication_ScreenRemoved
func callbackQApplication_ScreenRemoved(ptr unsafe.Pointer, screen unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "screenRemoved"); signal != nil {
		(*(*func(*gui.QScreen))(signal))(gui.NewQScreenFromPointer(screen))
	}

}

//export callbackQApplication_AboutToQuit
func callbackQApplication_AboutToQuit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "aboutToQuit"); signal != nil {
		(*(*func())(signal))()
	}

}

//export callbackQApplication_Quit
func callbackQApplication_Quit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "quit"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQApplicationFromPointer(ptr).QuitDefault()
	}
}

func (ptr *QApplication) QuitDefault() {
	if ptr.Pointer() != nil {
		C.QApplication_QuitDefault(ptr.Pointer())
	}
}

//export callbackQApplication_EventFilter
func callbackQApplication_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQApplicationFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QApplication) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QApplication_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQApplication_ChildEvent
func callbackQApplication_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQApplicationFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QApplication) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQApplication_ConnectNotify
func callbackQApplication_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQApplicationFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QApplication) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQApplication_CustomEvent
func callbackQApplication_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQApplicationFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QApplication) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQApplication_DeleteLater
func callbackQApplication_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQApplicationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QApplication) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QApplication_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQApplication_Destroyed
func callbackQApplication_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQApplication_DisconnectNotify
func callbackQApplication_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQApplicationFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QApplication) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQApplication_ObjectNameChanged
func callbackQApplication_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQApplication_TimerEvent
func callbackQApplication_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQApplicationFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QApplication) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QApplication_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//go:generate stringer -type=QBoxLayout__Direction
//QBoxLayout::Direction
type QBoxLayout__Direction int64

const (
	QBoxLayout__LeftToRight QBoxLayout__Direction = QBoxLayout__Direction(0)
	QBoxLayout__RightToLeft QBoxLayout__Direction = QBoxLayout__Direction(1)
	QBoxLayout__TopToBottom QBoxLayout__Direction = QBoxLayout__Direction(2)
	QBoxLayout__BottomToTop QBoxLayout__Direction = QBoxLayout__Direction(3)
	QBoxLayout__Down        QBoxLayout__Direction = QBoxLayout__Direction(QBoxLayout__TopToBottom)
	QBoxLayout__Up          QBoxLayout__Direction = QBoxLayout__Direction(QBoxLayout__BottomToTop)
)

//go:generate stringer -type=QCalendarWidget__HorizontalHeaderFormat
//QCalendarWidget::HorizontalHeaderFormat
type QCalendarWidget__HorizontalHeaderFormat int64

const (
	QCalendarWidget__NoHorizontalHeader   QCalendarWidget__HorizontalHeaderFormat = QCalendarWidget__HorizontalHeaderFormat(0)
	QCalendarWidget__SingleLetterDayNames QCalendarWidget__HorizontalHeaderFormat = QCalendarWidget__HorizontalHeaderFormat(1)
	QCalendarWidget__ShortDayNames        QCalendarWidget__HorizontalHeaderFormat = QCalendarWidget__HorizontalHeaderFormat(2)
	QCalendarWidget__LongDayNames         QCalendarWidget__HorizontalHeaderFormat = QCalendarWidget__HorizontalHeaderFormat(3)
)

//go:generate stringer -type=QCalendarWidget__SelectionMode
//QCalendarWidget::SelectionMode
type QCalendarWidget__SelectionMode int64

const (
	QCalendarWidget__NoSelection     QCalendarWidget__SelectionMode = QCalendarWidget__SelectionMode(0)
	QCalendarWidget__SingleSelection QCalendarWidget__SelectionMode = QCalendarWidget__SelectionMode(1)
)

//go:generate stringer -type=QCalendarWidget__VerticalHeaderFormat
//QCalendarWidget::VerticalHeaderFormat
type QCalendarWidget__VerticalHeaderFormat int64

const (
	QCalendarWidget__NoVerticalHeader QCalendarWidget__VerticalHeaderFormat = QCalendarWidget__VerticalHeaderFormat(0)
	QCalendarWidget__ISOWeekNumbers   QCalendarWidget__VerticalHeaderFormat = QCalendarWidget__VerticalHeaderFormat(1)
)

//go:generate stringer -type=QColorDialog__ColorDialogOption
//QColorDialog::ColorDialogOption
type QColorDialog__ColorDialogOption int64

const (
	QColorDialog__ShowAlphaChannel    QColorDialog__ColorDialogOption = QColorDialog__ColorDialogOption(0x00000001)
	QColorDialog__NoButtons           QColorDialog__ColorDialogOption = QColorDialog__ColorDialogOption(0x00000002)
	QColorDialog__DontUseNativeDialog QColorDialog__ColorDialogOption = QColorDialog__ColorDialogOption(0x00000004)
)

//go:generate stringer -type=QColormap__Mode
//QColormap::Mode
type QColormap__Mode int64

const (
	QColormap__Direct  QColormap__Mode = QColormap__Mode(0)
	QColormap__Indexed QColormap__Mode = QColormap__Mode(1)
	QColormap__Gray    QColormap__Mode = QColormap__Mode(2)
)

//go:generate stringer -type=QComboBox__InsertPolicy
//QComboBox::InsertPolicy
type QComboBox__InsertPolicy int64

const (
	QComboBox__NoInsert             QComboBox__InsertPolicy = QComboBox__InsertPolicy(0)
	QComboBox__InsertAtTop          QComboBox__InsertPolicy = QComboBox__InsertPolicy(1)
	QComboBox__InsertAtCurrent      QComboBox__InsertPolicy = QComboBox__InsertPolicy(2)
	QComboBox__InsertAtBottom       QComboBox__InsertPolicy = QComboBox__InsertPolicy(3)
	QComboBox__InsertAfterCurrent   QComboBox__InsertPolicy = QComboBox__InsertPolicy(4)
	QComboBox__InsertBeforeCurrent  QComboBox__InsertPolicy = QComboBox__InsertPolicy(5)
	QComboBox__InsertAlphabetically QComboBox__InsertPolicy = QComboBox__InsertPolicy(6)
)

//go:generate stringer -type=QComboBox__SizeAdjustPolicy
//QComboBox::SizeAdjustPolicy
type QComboBox__SizeAdjustPolicy int64

const (
	QComboBox__AdjustToContents                      QComboBox__SizeAdjustPolicy = QComboBox__SizeAdjustPolicy(0)
	QComboBox__AdjustToContentsOnFirstShow           QComboBox__SizeAdjustPolicy = QComboBox__SizeAdjustPolicy(1)
	QComboBox__AdjustToMinimumContentsLength         QComboBox__SizeAdjustPolicy = QComboBox__SizeAdjustPolicy(2)
	QComboBox__AdjustToMinimumContentsLengthWithIcon QComboBox__SizeAdjustPolicy = QComboBox__SizeAdjustPolicy(3)
)

//go:generate stringer -type=QCompleter__CompletionMode
//QCompleter::CompletionMode
type QCompleter__CompletionMode int64

const (
	QCompleter__PopupCompletion           QCompleter__CompletionMode = QCompleter__CompletionMode(0)
	QCompleter__UnfilteredPopupCompletion QCompleter__CompletionMode = QCompleter__CompletionMode(1)
	QCompleter__InlineCompletion          QCompleter__CompletionMode = QCompleter__CompletionMode(2)
)

//go:generate stringer -type=QCompleter__ModelSorting
//QCompleter::ModelSorting
type QCompleter__ModelSorting int64

const (
	QCompleter__UnsortedModel                QCompleter__ModelSorting = QCompleter__ModelSorting(0)
	QCompleter__CaseSensitivelySortedModel   QCompleter__ModelSorting = QCompleter__ModelSorting(1)
	QCompleter__CaseInsensitivelySortedModel QCompleter__ModelSorting = QCompleter__ModelSorting(2)
)

//go:generate stringer -type=QDataWidgetMapper__SubmitPolicy
//QDataWidgetMapper::SubmitPolicy
type QDataWidgetMapper__SubmitPolicy int64

const (
	QDataWidgetMapper__AutoSubmit   QDataWidgetMapper__SubmitPolicy = QDataWidgetMapper__SubmitPolicy(0)
	QDataWidgetMapper__ManualSubmit QDataWidgetMapper__SubmitPolicy = QDataWidgetMapper__SubmitPolicy(1)
)

//go:generate stringer -type=QDateTimeEdit__Section
//QDateTimeEdit::Section
type QDateTimeEdit__Section int64

const (
	QDateTimeEdit__NoSection     QDateTimeEdit__Section = QDateTimeEdit__Section(0x0000)
	QDateTimeEdit__AmPmSection   QDateTimeEdit__Section = QDateTimeEdit__Section(0x0001)
	QDateTimeEdit__MSecSection   QDateTimeEdit__Section = QDateTimeEdit__Section(0x0002)
	QDateTimeEdit__SecondSection QDateTimeEdit__Section = QDateTimeEdit__Section(0x0004)
	QDateTimeEdit__MinuteSection QDateTimeEdit__Section = QDateTimeEdit__Section(0x0008)
	QDateTimeEdit__HourSection   QDateTimeEdit__Section = QDateTimeEdit__Section(0x0010)
	QDateTimeEdit__DaySection    QDateTimeEdit__Section = QDateTimeEdit__Section(0x0100)
	QDateTimeEdit__MonthSection  QDateTimeEdit__Section = QDateTimeEdit__Section(0x0200)
	QDateTimeEdit__YearSection   QDateTimeEdit__Section = QDateTimeEdit__Section(0x0400)
)

type QDesktopWidget struct {
	QWidget
}

type QDesktopWidget_ITF interface {
	QWidget_ITF
	QDesktopWidget_PTR() *QDesktopWidget
}

func (ptr *QDesktopWidget) QDesktopWidget_PTR() *QDesktopWidget {
	return ptr
}

func (ptr *QDesktopWidget) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QWidget_PTR().Pointer()
	}
	return nil
}

func (ptr *QDesktopWidget) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QWidget_PTR().SetPointer(p)
	}
}

func PointerFromQDesktopWidget(ptr QDesktopWidget_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDesktopWidget_PTR().Pointer()
	}
	return nil
}

func NewQDesktopWidgetFromPointer(ptr unsafe.Pointer) (n *QDesktopWidget) {
	n = new(QDesktopWidget)
	n.SetPointer(ptr)
	return
}
func NewQDesktopWidget() *QDesktopWidget {
	tmpValue := NewQDesktopWidgetFromPointer(C.QDesktopWidget_NewQDesktopWidget())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QDesktopWidget) Screen(screen int) *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QDesktopWidget_Screen(ptr.Pointer(), C.int(int32(screen))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQDesktopWidget_PrimaryScreenChanged
func callbackQDesktopWidget_PrimaryScreenChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "primaryScreenChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QDesktopWidget) ConnectPrimaryScreenChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "primaryScreenChanged") {
			C.QDesktopWidget_ConnectPrimaryScreenChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "primaryScreenChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "primaryScreenChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "primaryScreenChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "primaryScreenChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QDesktopWidget) DisconnectPrimaryScreenChanged() {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_DisconnectPrimaryScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "primaryScreenChanged")
	}
}

func (ptr *QDesktopWidget) PrimaryScreenChanged() {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_PrimaryScreenChanged(ptr.Pointer())
	}
}

//export callbackQDesktopWidget_Resized
func callbackQDesktopWidget_Resized(ptr unsafe.Pointer, screen C.int) {
	if signal := qt.GetSignal(ptr, "resized"); signal != nil {
		(*(*func(int))(signal))(int(int32(screen)))
	}

}

func (ptr *QDesktopWidget) ConnectResized(f func(screen int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "resized") {
			C.QDesktopWidget_ConnectResized(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "resized")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "resized"); signal != nil {
			f := func(screen int) {
				(*(*func(int))(signal))(screen)
				f(screen)
			}
			qt.ConnectSignal(ptr.Pointer(), "resized", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "resized", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QDesktopWidget) DisconnectResized() {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_DisconnectResized(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "resized")
	}
}

func (ptr *QDesktopWidget) Resized(screen int) {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_Resized(ptr.Pointer(), C.int(int32(screen)))
	}
}

//export callbackQDesktopWidget_ScreenCountChanged
func callbackQDesktopWidget_ScreenCountChanged(ptr unsafe.Pointer, newCount C.int) {
	if signal := qt.GetSignal(ptr, "screenCountChanged"); signal != nil {
		(*(*func(int))(signal))(int(int32(newCount)))
	}

}

func (ptr *QDesktopWidget) ConnectScreenCountChanged(f func(newCount int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "screenCountChanged") {
			C.QDesktopWidget_ConnectScreenCountChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "screenCountChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "screenCountChanged"); signal != nil {
			f := func(newCount int) {
				(*(*func(int))(signal))(newCount)
				f(newCount)
			}
			qt.ConnectSignal(ptr.Pointer(), "screenCountChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "screenCountChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QDesktopWidget) DisconnectScreenCountChanged() {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_DisconnectScreenCountChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "screenCountChanged")
	}
}

func (ptr *QDesktopWidget) ScreenCountChanged(newCount int) {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_ScreenCountChanged(ptr.Pointer(), C.int(int32(newCount)))
	}
}

//export callbackQDesktopWidget_WorkAreaResized
func callbackQDesktopWidget_WorkAreaResized(ptr unsafe.Pointer, screen C.int) {
	if signal := qt.GetSignal(ptr, "workAreaResized"); signal != nil {
		(*(*func(int))(signal))(int(int32(screen)))
	}

}

func (ptr *QDesktopWidget) ConnectWorkAreaResized(f func(screen int)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "workAreaResized") {
			C.QDesktopWidget_ConnectWorkAreaResized(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "workAreaResized")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "workAreaResized"); signal != nil {
			f := func(screen int) {
				(*(*func(int))(signal))(screen)
				f(screen)
			}
			qt.ConnectSignal(ptr.Pointer(), "workAreaResized", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "workAreaResized", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QDesktopWidget) DisconnectWorkAreaResized() {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_DisconnectWorkAreaResized(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "workAreaResized")
	}
}

func (ptr *QDesktopWidget) WorkAreaResized(screen int) {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_WorkAreaResized(ptr.Pointer(), C.int(int32(screen)))
	}
}

//export callbackQDesktopWidget_DestroyQDesktopWidget
func callbackQDesktopWidget_DestroyQDesktopWidget(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QDesktopWidget"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQDesktopWidgetFromPointer(ptr).DestroyQDesktopWidgetDefault()
	}
}

func (ptr *QDesktopWidget) ConnectDestroyQDesktopWidget(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QDesktopWidget"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QDesktopWidget", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QDesktopWidget", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QDesktopWidget) DisconnectDestroyQDesktopWidget() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QDesktopWidget")
	}
}

func (ptr *QDesktopWidget) DestroyQDesktopWidget() {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_DestroyQDesktopWidget(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QDesktopWidget) DestroyQDesktopWidgetDefault() {
	if ptr.Pointer() != nil {
		C.QDesktopWidget_DestroyQDesktopWidgetDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QDesktopWidget) IsVirtualDesktop() bool {
	if ptr.Pointer() != nil {
		return int8(C.QDesktopWidget_IsVirtualDesktop(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QDesktopWidget) AvailableGeometry2(p core.QPoint_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QDesktopWidget_AvailableGeometry2(ptr.Pointer(), core.PointerFromQPoint(p)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDesktopWidget) AvailableGeometry(widget QWidget_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QDesktopWidget_AvailableGeometry(ptr.Pointer(), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDesktopWidget) ScreenGeometry2(p core.QPoint_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QDesktopWidget_ScreenGeometry2(ptr.Pointer(), core.PointerFromQPoint(p)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDesktopWidget) ScreenGeometry(widget QWidget_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QDesktopWidget_ScreenGeometry(ptr.Pointer(), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDesktopWidget) NumScreens() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDesktopWidget_NumScreens(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDesktopWidget) PrimaryScreen() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDesktopWidget_PrimaryScreen(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDesktopWidget) ScreenCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDesktopWidget_ScreenCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDesktopWidget) ScreenNumber2(point core.QPoint_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDesktopWidget_ScreenNumber2(ptr.Pointer(), core.PointerFromQPoint(point))))
	}
	return 0
}

func (ptr *QDesktopWidget) ScreenNumber(widget QWidget_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDesktopWidget_ScreenNumber(ptr.Pointer(), PointerFromQWidget(widget))))
	}
	return 0
}

//go:generate stringer -type=QDialog__DialogCode
//QDialog::DialogCode
type QDialog__DialogCode int64

const (
	QDialog__Rejected QDialog__DialogCode = QDialog__DialogCode(0)
	QDialog__Accepted QDialog__DialogCode = QDialog__DialogCode(1)
)

//go:generate stringer -type=QDialogButtonBox__ButtonLayout
//QDialogButtonBox::ButtonLayout
type QDialogButtonBox__ButtonLayout int64

var (
	QDialogButtonBox__WinLayout     QDialogButtonBox__ButtonLayout = QDialogButtonBox__ButtonLayout(0)
	QDialogButtonBox__MacLayout     QDialogButtonBox__ButtonLayout = QDialogButtonBox__ButtonLayout(1)
	QDialogButtonBox__KdeLayout     QDialogButtonBox__ButtonLayout = QDialogButtonBox__ButtonLayout(2)
	QDialogButtonBox__GnomeLayout   QDialogButtonBox__ButtonLayout = QDialogButtonBox__ButtonLayout(3)
	QDialogButtonBox__AndroidLayout QDialogButtonBox__ButtonLayout = QDialogButtonBox__ButtonLayout(C.QDialogButtonBox_AndroidLayout_Type())
)

//go:generate stringer -type=QDialogButtonBox__ButtonRole
//QDialogButtonBox::ButtonRole
type QDialogButtonBox__ButtonRole int64

const (
	QDialogButtonBox__InvalidRole     QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(-1)
	QDialogButtonBox__AcceptRole      QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(0)
	QDialogButtonBox__RejectRole      QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(1)
	QDialogButtonBox__DestructiveRole QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(2)
	QDialogButtonBox__ActionRole      QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(3)
	QDialogButtonBox__HelpRole        QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(4)
	QDialogButtonBox__YesRole         QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(5)
	QDialogButtonBox__NoRole          QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(6)
	QDialogButtonBox__ResetRole       QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(7)
	QDialogButtonBox__ApplyRole       QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(8)
	QDialogButtonBox__NRoles          QDialogButtonBox__ButtonRole = QDialogButtonBox__ButtonRole(9)
)

//go:generate stringer -type=QDialogButtonBox__StandardButton
//QDialogButtonBox::StandardButton
type QDialogButtonBox__StandardButton int64

const (
	QDialogButtonBox__NoButton        QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00000000)
	QDialogButtonBox__Ok              QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00000400)
	QDialogButtonBox__Save            QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00000800)
	QDialogButtonBox__SaveAll         QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00001000)
	QDialogButtonBox__Open            QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00002000)
	QDialogButtonBox__Yes             QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00004000)
	QDialogButtonBox__YesToAll        QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00008000)
	QDialogButtonBox__No              QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00010000)
	QDialogButtonBox__NoToAll         QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00020000)
	QDialogButtonBox__Abort           QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00040000)
	QDialogButtonBox__Retry           QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00080000)
	QDialogButtonBox__Ignore          QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00100000)
	QDialogButtonBox__Close           QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00200000)
	QDialogButtonBox__Cancel          QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00400000)
	QDialogButtonBox__Discard         QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x00800000)
	QDialogButtonBox__Help            QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x01000000)
	QDialogButtonBox__Apply           QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x02000000)
	QDialogButtonBox__Reset           QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x04000000)
	QDialogButtonBox__RestoreDefaults QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(0x08000000)
	QDialogButtonBox__FirstButton     QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(QDialogButtonBox__Ok)
	QDialogButtonBox__LastButton      QDialogButtonBox__StandardButton = QDialogButtonBox__StandardButton(QDialogButtonBox__RestoreDefaults)
)

//go:generate stringer -type=QDirModel__Roles
//QDirModel::Roles
type QDirModel__Roles int64

var (
	QDirModel__FileIconRole QDirModel__Roles = QDirModel__Roles(core.Qt__DecorationRole)
	QDirModel__FilePathRole QDirModel__Roles = QDirModel__Roles(C.QDirModel_FilePathRole_Type())
	QDirModel__FileNameRole QDirModel__Roles = QDirModel__Roles(258)
)

//go:generate stringer -type=QDockWidget__DockWidgetFeature
//QDockWidget::DockWidgetFeature
type QDockWidget__DockWidgetFeature int64

const (
	QDockWidget__DockWidgetClosable         QDockWidget__DockWidgetFeature = QDockWidget__DockWidgetFeature(0x01)
	QDockWidget__DockWidgetMovable          QDockWidget__DockWidgetFeature = QDockWidget__DockWidgetFeature(0x02)
	QDockWidget__DockWidgetFloatable        QDockWidget__DockWidgetFeature = QDockWidget__DockWidgetFeature(0x04)
	QDockWidget__DockWidgetVerticalTitleBar QDockWidget__DockWidgetFeature = QDockWidget__DockWidgetFeature(0x08)
	QDockWidget__DockWidgetFeatureMask      QDockWidget__DockWidgetFeature = QDockWidget__DockWidgetFeature(0x0f)
	QDockWidget__NoDockWidgetFeatures       QDockWidget__DockWidgetFeature = QDockWidget__DockWidgetFeature(0x00)
	QDockWidget__Reserved                   QDockWidget__DockWidgetFeature = QDockWidget__DockWidgetFeature(0xff)
)

//go:generate stringer -type=QFileDialog__AcceptMode
//QFileDialog::AcceptMode
type QFileDialog__AcceptMode int64

const (
	QFileDialog__AcceptOpen QFileDialog__AcceptMode = QFileDialog__AcceptMode(0)
	QFileDialog__AcceptSave QFileDialog__AcceptMode = QFileDialog__AcceptMode(1)
)

//go:generate stringer -type=QFileDialog__DialogLabel
//QFileDialog::DialogLabel
type QFileDialog__DialogLabel int64

const (
	QFileDialog__LookIn   QFileDialog__DialogLabel = QFileDialog__DialogLabel(0)
	QFileDialog__FileName QFileDialog__DialogLabel = QFileDialog__DialogLabel(1)
	QFileDialog__FileType QFileDialog__DialogLabel = QFileDialog__DialogLabel(2)
	QFileDialog__Accept   QFileDialog__DialogLabel = QFileDialog__DialogLabel(3)
	QFileDialog__Reject   QFileDialog__DialogLabel = QFileDialog__DialogLabel(4)
)

//go:generate stringer -type=QFileDialog__FileMode
//QFileDialog::FileMode
type QFileDialog__FileMode int64

const (
	QFileDialog__AnyFile       QFileDialog__FileMode = QFileDialog__FileMode(0)
	QFileDialog__ExistingFile  QFileDialog__FileMode = QFileDialog__FileMode(1)
	QFileDialog__Directory     QFileDialog__FileMode = QFileDialog__FileMode(2)
	QFileDialog__ExistingFiles QFileDialog__FileMode = QFileDialog__FileMode(3)
	QFileDialog__DirectoryOnly QFileDialog__FileMode = QFileDialog__FileMode(4)
)

//go:generate stringer -type=QFileDialog__Option
//QFileDialog::Option
type QFileDialog__Option int64

const (
	QFileDialog__ShowDirsOnly                QFileDialog__Option = QFileDialog__Option(0x00000001)
	QFileDialog__DontResolveSymlinks         QFileDialog__Option = QFileDialog__Option(0x00000002)
	QFileDialog__DontConfirmOverwrite        QFileDialog__Option = QFileDialog__Option(0x00000004)
	QFileDialog__DontUseSheet                QFileDialog__Option = QFileDialog__Option(0x00000008)
	QFileDialog__DontUseNativeDialog         QFileDialog__Option = QFileDialog__Option(0x00000010)
	QFileDialog__ReadOnly                    QFileDialog__Option = QFileDialog__Option(0x00000020)
	QFileDialog__HideNameFilterDetails       QFileDialog__Option = QFileDialog__Option(0x00000040)
	QFileDialog__DontUseCustomDirectoryIcons QFileDialog__Option = QFileDialog__Option(0x00000080)
)

//go:generate stringer -type=QFileDialog__ViewMode
//QFileDialog::ViewMode
type QFileDialog__ViewMode int64

const (
	QFileDialog__Detail QFileDialog__ViewMode = QFileDialog__ViewMode(0)
	QFileDialog__List   QFileDialog__ViewMode = QFileDialog__ViewMode(1)
)

//go:generate stringer -type=QFileIconProvider__IconType
//QFileIconProvider::IconType
type QFileIconProvider__IconType int64

const (
	QFileIconProvider__Computer QFileIconProvider__IconType = QFileIconProvider__IconType(0)
	QFileIconProvider__Desktop  QFileIconProvider__IconType = QFileIconProvider__IconType(1)
	QFileIconProvider__Trashcan QFileIconProvider__IconType = QFileIconProvider__IconType(2)
	QFileIconProvider__Network  QFileIconProvider__IconType = QFileIconProvider__IconType(3)
	QFileIconProvider__Drive    QFileIconProvider__IconType = QFileIconProvider__IconType(4)
	QFileIconProvider__Folder   QFileIconProvider__IconType = QFileIconProvider__IconType(5)
	QFileIconProvider__File     QFileIconProvider__IconType = QFileIconProvider__IconType(6)
)

//go:generate stringer -type=QFileIconProvider__Option
//QFileIconProvider::Option
type QFileIconProvider__Option int64

const (
	QFileIconProvider__DontUseCustomDirectoryIcons QFileIconProvider__Option = QFileIconProvider__Option(0x00000001)
)

//go:generate stringer -type=QFileSystemModel__Roles
//QFileSystemModel::Roles
type QFileSystemModel__Roles int64

var (
	QFileSystemModel__FileIconRole    QFileSystemModel__Roles = QFileSystemModel__Roles(core.Qt__DecorationRole)
	QFileSystemModel__FilePathRole    QFileSystemModel__Roles = QFileSystemModel__Roles(C.QFileSystemModel_FilePathRole_Type())
	QFileSystemModel__FileNameRole    QFileSystemModel__Roles = QFileSystemModel__Roles(C.QFileSystemModel_FileNameRole_Type())
	QFileSystemModel__FilePermissions QFileSystemModel__Roles = QFileSystemModel__Roles(C.QFileSystemModel_FilePermissions_Type())
)

//go:generate stringer -type=QFontComboBox__FontFilter
//QFontComboBox::FontFilter
type QFontComboBox__FontFilter int64

const (
	QFontComboBox__AllFonts          QFontComboBox__FontFilter = QFontComboBox__FontFilter(0)
	QFontComboBox__ScalableFonts     QFontComboBox__FontFilter = QFontComboBox__FontFilter(0x1)
	QFontComboBox__NonScalableFonts  QFontComboBox__FontFilter = QFontComboBox__FontFilter(0x2)
	QFontComboBox__MonospacedFonts   QFontComboBox__FontFilter = QFontComboBox__FontFilter(0x4)
	QFontComboBox__ProportionalFonts QFontComboBox__FontFilter = QFontComboBox__FontFilter(0x8)
)

//go:generate stringer -type=QFontDialog__FontDialogOption
//QFontDialog::FontDialogOption
type QFontDialog__FontDialogOption int64

const (
	QFontDialog__NoButtons           QFontDialog__FontDialogOption = QFontDialog__FontDialogOption(0x00000001)
	QFontDialog__DontUseNativeDialog QFontDialog__FontDialogOption = QFontDialog__FontDialogOption(0x00000002)
	QFontDialog__ScalableFonts       QFontDialog__FontDialogOption = QFontDialog__FontDialogOption(0x00000004)
	QFontDialog__NonScalableFonts    QFontDialog__FontDialogOption = QFontDialog__FontDialogOption(0x00000008)
	QFontDialog__MonospacedFonts     QFontDialog__FontDialogOption = QFontDialog__FontDialogOption(0x00000010)
	QFontDialog__ProportionalFonts   QFontDialog__FontDialogOption = QFontDialog__FontDialogOption(0x00000020)
)

//go:generate stringer -type=QFormLayout__FieldGrowthPolicy
//QFormLayout::FieldGrowthPolicy
type QFormLayout__FieldGrowthPolicy int64

const (
	QFormLayout__FieldsStayAtSizeHint  QFormLayout__FieldGrowthPolicy = QFormLayout__FieldGrowthPolicy(0)
	QFormLayout__ExpandingFieldsGrow   QFormLayout__FieldGrowthPolicy = QFormLayout__FieldGrowthPolicy(1)
	QFormLayout__AllNonFixedFieldsGrow QFormLayout__FieldGrowthPolicy = QFormLayout__FieldGrowthPolicy(2)
)

//go:generate stringer -type=QFormLayout__ItemRole
//QFormLayout::ItemRole
type QFormLayout__ItemRole int64

const (
	QFormLayout__LabelRole    QFormLayout__ItemRole = QFormLayout__ItemRole(0)
	QFormLayout__FieldRole    QFormLayout__ItemRole = QFormLayout__ItemRole(1)
	QFormLayout__SpanningRole QFormLayout__ItemRole = QFormLayout__ItemRole(2)
)

//go:generate stringer -type=QFormLayout__RowWrapPolicy
//QFormLayout::RowWrapPolicy
type QFormLayout__RowWrapPolicy int64

const (
	QFormLayout__DontWrapRows QFormLayout__RowWrapPolicy = QFormLayout__RowWrapPolicy(0)
	QFormLayout__WrapLongRows QFormLayout__RowWrapPolicy = QFormLayout__RowWrapPolicy(1)
	QFormLayout__WrapAllRows  QFormLayout__RowWrapPolicy = QFormLayout__RowWrapPolicy(2)
)

type QFrame struct {
	QWidget
}

type QFrame_ITF interface {
	QWidget_ITF
	QFrame_PTR() *QFrame
}

func (ptr *QFrame) QFrame_PTR() *QFrame {
	return ptr
}

func (ptr *QFrame) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QWidget_PTR().Pointer()
	}
	return nil
}

func (ptr *QFrame) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QWidget_PTR().SetPointer(p)
	}
}

func PointerFromQFrame(ptr QFrame_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFrame_PTR().Pointer()
	}
	return nil
}

func NewQFrameFromPointer(ptr unsafe.Pointer) (n *QFrame) {
	n = new(QFrame)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QFrame__Shadow
//QFrame::Shadow
type QFrame__Shadow int64

const (
	QFrame__Plain  QFrame__Shadow = QFrame__Shadow(0x0010)
	QFrame__Raised QFrame__Shadow = QFrame__Shadow(0x0020)
	QFrame__Sunken QFrame__Shadow = QFrame__Shadow(0x0030)
)

//go:generate stringer -type=QFrame__Shape
//QFrame::Shape
type QFrame__Shape int64

const (
	QFrame__NoFrame     QFrame__Shape = QFrame__Shape(0)
	QFrame__Box         QFrame__Shape = QFrame__Shape(0x0001)
	QFrame__Panel       QFrame__Shape = QFrame__Shape(0x0002)
	QFrame__WinPanel    QFrame__Shape = QFrame__Shape(0x0003)
	QFrame__HLine       QFrame__Shape = QFrame__Shape(0x0004)
	QFrame__VLine       QFrame__Shape = QFrame__Shape(0x0005)
	QFrame__StyledPanel QFrame__Shape = QFrame__Shape(0x0006)
)

//go:generate stringer -type=QFrame__StyleMask
//QFrame::StyleMask
type QFrame__StyleMask int64

var (
	QFrame__Shadow_Mask QFrame__StyleMask = QFrame__StyleMask(0x00f0)
	QFrame__Shape_Mask  QFrame__StyleMask = QFrame__StyleMask(0x000f)
)

func NewQFrame(parent QWidget_ITF, ff core.Qt__WindowType) *QFrame {
	tmpValue := NewQFrameFromPointer(C.QFrame_NewQFrame(PointerFromQWidget(parent), C.longlong(ff)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QFrame) SetFrameRect(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QFrame_SetFrameRect(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

func (ptr *QFrame) SetFrameShadow(vqf QFrame__Shadow) {
	if ptr.Pointer() != nil {
		C.QFrame_SetFrameShadow(ptr.Pointer(), C.longlong(vqf))
	}
}

func (ptr *QFrame) SetFrameShape(vqf QFrame__Shape) {
	if ptr.Pointer() != nil {
		C.QFrame_SetFrameShape(ptr.Pointer(), C.longlong(vqf))
	}
}

func (ptr *QFrame) SetFrameStyle(style int) {
	if ptr.Pointer() != nil {
		C.QFrame_SetFrameStyle(ptr.Pointer(), C.int(int32(style)))
	}
}

func (ptr *QFrame) SetLineWidth(vin int) {
	if ptr.Pointer() != nil {
		C.QFrame_SetLineWidth(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QFrame) SetMidLineWidth(vin int) {
	if ptr.Pointer() != nil {
		C.QFrame_SetMidLineWidth(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQFrame_DestroyQFrame
func callbackQFrame_DestroyQFrame(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QFrame"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQFrameFromPointer(ptr).DestroyQFrameDefault()
	}
}

func (ptr *QFrame) ConnectDestroyQFrame(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QFrame"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QFrame", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QFrame", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QFrame) DisconnectDestroyQFrame() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QFrame")
	}
}

func (ptr *QFrame) DestroyQFrame() {
	if ptr.Pointer() != nil {
		C.QFrame_DestroyQFrame(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QFrame) DestroyQFrameDefault() {
	if ptr.Pointer() != nil {
		C.QFrame_DestroyQFrameDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QFrame) FrameShadow() QFrame__Shadow {
	if ptr.Pointer() != nil {
		return QFrame__Shadow(C.QFrame_FrameShadow(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFrame) FrameShape() QFrame__Shape {
	if ptr.Pointer() != nil {
		return QFrame__Shape(C.QFrame_FrameShape(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFrame) FrameRect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QFrame_FrameRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFrame) FrameStyle() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFrame_FrameStyle(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFrame) FrameWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFrame_FrameWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFrame) LineWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFrame_LineWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFrame) MidLineWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFrame_MidLineWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFrame) InitStyleOption(option QStyleOptionFrame_ITF) {
	if ptr.Pointer() != nil {
		C.QFrame_InitStyleOption(ptr.Pointer(), PointerFromQStyleOptionFrame(option))
	}
}

//go:generate stringer -type=QGesture__GestureCancelPolicy
//QGesture::GestureCancelPolicy
type QGesture__GestureCancelPolicy int64

const (
	QGesture__CancelNone         QGesture__GestureCancelPolicy = QGesture__GestureCancelPolicy(0)
	QGesture__CancelAllInContext QGesture__GestureCancelPolicy = QGesture__GestureCancelPolicy(1)
)

//go:generate stringer -type=QGestureRecognizer__ResultFlag
//QGestureRecognizer::ResultFlag
type QGestureRecognizer__ResultFlag int64

const (
	QGestureRecognizer__Ignore           QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0x0001)
	QGestureRecognizer__MayBeGesture     QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0x0002)
	QGestureRecognizer__TriggerGesture   QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0x0004)
	QGestureRecognizer__FinishGesture    QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0x0008)
	QGestureRecognizer__CancelGesture    QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0x0010)
	QGestureRecognizer__ResultState_Mask QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0x00ff)
	QGestureRecognizer__ConsumeEventHint QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0x0100)
	QGestureRecognizer__ResultHint_Mask  QGestureRecognizer__ResultFlag = QGestureRecognizer__ResultFlag(0xff00)
)

//go:generate stringer -type=QGraphicsBlurEffect__BlurHint
//QGraphicsBlurEffect::BlurHint
type QGraphicsBlurEffect__BlurHint int64

const (
	QGraphicsBlurEffect__PerformanceHint QGraphicsBlurEffect__BlurHint = QGraphicsBlurEffect__BlurHint(0x00)
	QGraphicsBlurEffect__QualityHint     QGraphicsBlurEffect__BlurHint = QGraphicsBlurEffect__BlurHint(0x01)
	QGraphicsBlurEffect__AnimationHint   QGraphicsBlurEffect__BlurHint = QGraphicsBlurEffect__BlurHint(0x02)
)

type QGraphicsEffect struct {
	core.QObject
}

type QGraphicsEffect_ITF interface {
	core.QObject_ITF
	QGraphicsEffect_PTR() *QGraphicsEffect
}

func (ptr *QGraphicsEffect) QGraphicsEffect_PTR() *QGraphicsEffect {
	return ptr
}

func (ptr *QGraphicsEffect) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsEffect) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsEffect(ptr QGraphicsEffect_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsEffect_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsEffectFromPointer(ptr unsafe.Pointer) (n *QGraphicsEffect) {
	n = new(QGraphicsEffect)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsEffect__ChangeFlag
//QGraphicsEffect::ChangeFlag
type QGraphicsEffect__ChangeFlag int64

const (
	QGraphicsEffect__SourceAttached            QGraphicsEffect__ChangeFlag = QGraphicsEffect__ChangeFlag(0x1)
	QGraphicsEffect__SourceDetached            QGraphicsEffect__ChangeFlag = QGraphicsEffect__ChangeFlag(0x2)
	QGraphicsEffect__SourceBoundingRectChanged QGraphicsEffect__ChangeFlag = QGraphicsEffect__ChangeFlag(0x4)
	QGraphicsEffect__SourceInvalidated         QGraphicsEffect__ChangeFlag = QGraphicsEffect__ChangeFlag(0x8)
)

//go:generate stringer -type=QGraphicsEffect__PixmapPadMode
//QGraphicsEffect::PixmapPadMode
type QGraphicsEffect__PixmapPadMode int64

const (
	QGraphicsEffect__NoPad                      QGraphicsEffect__PixmapPadMode = QGraphicsEffect__PixmapPadMode(0)
	QGraphicsEffect__PadToTransparentBorder     QGraphicsEffect__PixmapPadMode = QGraphicsEffect__PixmapPadMode(1)
	QGraphicsEffect__PadToEffectiveBoundingRect QGraphicsEffect__PixmapPadMode = QGraphicsEffect__PixmapPadMode(2)
)

func NewQGraphicsEffect(parent core.QObject_ITF) *QGraphicsEffect {
	tmpValue := NewQGraphicsEffectFromPointer(C.QGraphicsEffect_NewQGraphicsEffect(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGraphicsEffect_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsEffect_QGraphicsEffect_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QGraphicsEffect) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsEffect_QGraphicsEffect_Tr(sC, cC, C.int(int32(n))))
}

//export callbackQGraphicsEffect_Draw
func callbackQGraphicsEffect_Draw(ptr unsafe.Pointer, painter unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "draw"); signal != nil {
		(*(*func(*gui.QPainter))(signal))(gui.NewQPainterFromPointer(painter))
	}

}

func (ptr *QGraphicsEffect) ConnectDraw(f func(painter *gui.QPainter)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "draw"); signal != nil {
			f := func(painter *gui.QPainter) {
				(*(*func(*gui.QPainter))(signal))(painter)
				f(painter)
			}
			qt.ConnectSignal(ptr.Pointer(), "draw", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "draw", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEffect) DisconnectDraw() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "draw")
	}
}

func (ptr *QGraphicsEffect) Draw(painter gui.QPainter_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_Draw(ptr.Pointer(), gui.PointerFromQPainter(painter))
	}
}

func (ptr *QGraphicsEffect) DrawSource(painter gui.QPainter_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_DrawSource(ptr.Pointer(), gui.PointerFromQPainter(painter))
	}
}

//export callbackQGraphicsEffect_EnabledChanged
func callbackQGraphicsEffect_EnabledChanged(ptr unsafe.Pointer, enabled C.char) {
	if signal := qt.GetSignal(ptr, "enabledChanged"); signal != nil {
		(*(*func(bool))(signal))(int8(enabled) != 0)
	}

}

func (ptr *QGraphicsEffect) ConnectEnabledChanged(f func(enabled bool)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "enabledChanged") {
			C.QGraphicsEffect_ConnectEnabledChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "enabledChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "enabledChanged"); signal != nil {
			f := func(enabled bool) {
				(*(*func(bool))(signal))(enabled)
				f(enabled)
			}
			qt.ConnectSignal(ptr.Pointer(), "enabledChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "enabledChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEffect) DisconnectEnabledChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_DisconnectEnabledChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "enabledChanged")
	}
}

func (ptr *QGraphicsEffect) EnabledChanged(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_EnabledChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

//export callbackQGraphicsEffect_SetEnabled
func callbackQGraphicsEffect_SetEnabled(ptr unsafe.Pointer, enable C.char) {
	if signal := qt.GetSignal(ptr, "setEnabled"); signal != nil {
		(*(*func(bool))(signal))(int8(enable) != 0)
	} else {
		NewQGraphicsEffectFromPointer(ptr).SetEnabledDefault(int8(enable) != 0)
	}
}

func (ptr *QGraphicsEffect) ConnectSetEnabled(f func(enable bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setEnabled"); signal != nil {
			f := func(enable bool) {
				(*(*func(bool))(signal))(enable)
				f(enable)
			}
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEffect) DisconnectSetEnabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setEnabled")
	}
}

func (ptr *QGraphicsEffect) SetEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QGraphicsEffect) SetEnabledDefault(enable bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_SetEnabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

//export callbackQGraphicsEffect_SourceChanged
func callbackQGraphicsEffect_SourceChanged(ptr unsafe.Pointer, flags C.longlong) {
	if signal := qt.GetSignal(ptr, "sourceChanged"); signal != nil {
		(*(*func(QGraphicsEffect__ChangeFlag))(signal))(QGraphicsEffect__ChangeFlag(flags))
	} else {
		NewQGraphicsEffectFromPointer(ptr).SourceChangedDefault(QGraphicsEffect__ChangeFlag(flags))
	}
}

func (ptr *QGraphicsEffect) ConnectSourceChanged(f func(flags QGraphicsEffect__ChangeFlag)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sourceChanged"); signal != nil {
			f := func(flags QGraphicsEffect__ChangeFlag) {
				(*(*func(QGraphicsEffect__ChangeFlag))(signal))(flags)
				f(flags)
			}
			qt.ConnectSignal(ptr.Pointer(), "sourceChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sourceChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEffect) DisconnectSourceChanged() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sourceChanged")
	}
}

func (ptr *QGraphicsEffect) SourceChanged(flags QGraphicsEffect__ChangeFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_SourceChanged(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QGraphicsEffect) SourceChangedDefault(flags QGraphicsEffect__ChangeFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_SourceChangedDefault(ptr.Pointer(), C.longlong(flags))
	}
}

//export callbackQGraphicsEffect_Update
func callbackQGraphicsEffect_Update(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "update"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsEffectFromPointer(ptr).UpdateDefault()
	}
}

func (ptr *QGraphicsEffect) ConnectUpdate(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "update"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEffect) DisconnectUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "update")
	}
}

func (ptr *QGraphicsEffect) Update() {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_Update(ptr.Pointer())
	}
}

func (ptr *QGraphicsEffect) UpdateDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_UpdateDefault(ptr.Pointer())
	}
}

func (ptr *QGraphicsEffect) UpdateBoundingRect() {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_UpdateBoundingRect(ptr.Pointer())
	}
}

//export callbackQGraphicsEffect_DestroyQGraphicsEffect
func callbackQGraphicsEffect_DestroyQGraphicsEffect(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsEffect"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsEffectFromPointer(ptr).DestroyQGraphicsEffectDefault()
	}
}

func (ptr *QGraphicsEffect) ConnectDestroyQGraphicsEffect(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsEffect"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsEffect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsEffect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEffect) DisconnectDestroyQGraphicsEffect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsEffect")
	}
}

func (ptr *QGraphicsEffect) DestroyQGraphicsEffect() {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_DestroyQGraphicsEffect(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsEffect) DestroyQGraphicsEffectDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_DestroyQGraphicsEffectDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsEffect) SourcePixmap(system core.Qt__CoordinateSystem, offset core.QPoint_ITF, mode QGraphicsEffect__PixmapPadMode) *gui.QPixmap {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPixmapFromPointer(C.QGraphicsEffect_SourcePixmap(ptr.Pointer(), C.longlong(system), core.PointerFromQPoint(offset), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*gui.QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsEffect_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsEffect_BoundingRectFor
func callbackQGraphicsEffect_BoundingRectFor(ptr unsafe.Pointer, rect unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRectFor"); signal != nil {
		return core.PointerFromQRectF((*(*func(*core.QRectF) *core.QRectF)(signal))(core.NewQRectFFromPointer(rect)))
	}

	return core.PointerFromQRectF(NewQGraphicsEffectFromPointer(ptr).BoundingRectForDefault(core.NewQRectFFromPointer(rect)))
}

func (ptr *QGraphicsEffect) ConnectBoundingRectFor(f func(rect *core.QRectF) *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRectFor"); signal != nil {
			f := func(rect *core.QRectF) *core.QRectF {
				(*(*func(*core.QRectF) *core.QRectF)(signal))(rect)
				return f(rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRectFor", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRectFor", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEffect) DisconnectBoundingRectFor() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRectFor")
	}
}

func (ptr *QGraphicsEffect) BoundingRectFor(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsEffect_BoundingRectFor(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) BoundingRectForDefault(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsEffect_BoundingRectForDefault(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) SourceBoundingRect(system core.Qt__CoordinateSystem) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsEffect_SourceBoundingRect(ptr.Pointer(), C.longlong(system)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsEffect_IsEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsEffect) SourceIsPixmap() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsEffect_SourceIsPixmap(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQGraphicsEffect_MetaObject
func callbackQGraphicsEffect_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQGraphicsEffectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGraphicsEffect) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGraphicsEffect_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsEffect) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QGraphicsEffect___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QGraphicsEffect) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QGraphicsEffect___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QGraphicsEffect) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsEffect___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsEffect) __findChildren_newList2() unsafe.Pointer {
	return C.QGraphicsEffect___findChildren_newList2(ptr.Pointer())
}

func (ptr *QGraphicsEffect) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsEffect___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsEffect) __findChildren_newList3() unsafe.Pointer {
	return C.QGraphicsEffect___findChildren_newList3(ptr.Pointer())
}

func (ptr *QGraphicsEffect) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsEffect___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsEffect) __findChildren_newList() unsafe.Pointer {
	return C.QGraphicsEffect___findChildren_newList(ptr.Pointer())
}

func (ptr *QGraphicsEffect) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsEffect___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEffect) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsEffect) __children_newList() unsafe.Pointer {
	return C.QGraphicsEffect___children_newList(ptr.Pointer())
}

//export callbackQGraphicsEffect_Event
func callbackQGraphicsEffect_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsEffectFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QGraphicsEffect) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsEffect_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

//export callbackQGraphicsEffect_EventFilter
func callbackQGraphicsEffect_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsEffectFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsEffect) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsEffect_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQGraphicsEffect_ChildEvent
func callbackQGraphicsEffect_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGraphicsEffectFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGraphicsEffect) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGraphicsEffect_ConnectNotify
func callbackQGraphicsEffect_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsEffectFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsEffect) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsEffect_CustomEvent
func callbackQGraphicsEffect_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsEffectFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsEffect) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsEffect_DeleteLater
func callbackQGraphicsEffect_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsEffectFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGraphicsEffect) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsEffect_Destroyed
func callbackQGraphicsEffect_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQGraphicsEffect_DisconnectNotify
func callbackQGraphicsEffect_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsEffectFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsEffect) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsEffect_ObjectNameChanged
func callbackQGraphicsEffect_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQGraphicsEffect_TimerEvent
func callbackQGraphicsEffect_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGraphicsEffectFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGraphicsEffect) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEffect_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

type QGraphicsEllipseItem struct {
	QAbstractGraphicsShapeItem
}

type QGraphicsEllipseItem_ITF interface {
	QAbstractGraphicsShapeItem_ITF
	QGraphicsEllipseItem_PTR() *QGraphicsEllipseItem
}

func (ptr *QGraphicsEllipseItem) QGraphicsEllipseItem_PTR() *QGraphicsEllipseItem {
	return ptr
}

func (ptr *QGraphicsEllipseItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractGraphicsShapeItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsEllipseItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractGraphicsShapeItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsEllipseItem(ptr QGraphicsEllipseItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsEllipseItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsEllipseItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsEllipseItem) {
	n = new(QGraphicsEllipseItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsEllipseItem__anonymous
//QGraphicsEllipseItem::anonymous
type QGraphicsEllipseItem__anonymous int64

const (
	QGraphicsEllipseItem__Type QGraphicsEllipseItem__anonymous = QGraphicsEllipseItem__anonymous(4)
)

func NewQGraphicsEllipseItem(parent QGraphicsItem_ITF) *QGraphicsEllipseItem {
	return NewQGraphicsEllipseItemFromPointer(C.QGraphicsEllipseItem_NewQGraphicsEllipseItem(PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsEllipseItem2(rect core.QRectF_ITF, parent QGraphicsItem_ITF) *QGraphicsEllipseItem {
	return NewQGraphicsEllipseItemFromPointer(C.QGraphicsEllipseItem_NewQGraphicsEllipseItem2(core.PointerFromQRectF(rect), PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsEllipseItem3(x float64, y float64, width float64, height float64, parent QGraphicsItem_ITF) *QGraphicsEllipseItem {
	return NewQGraphicsEllipseItemFromPointer(C.QGraphicsEllipseItem_NewQGraphicsEllipseItem3(C.double(x), C.double(y), C.double(width), C.double(height), PointerFromQGraphicsItem(parent)))
}

//export callbackQGraphicsEllipseItem_Paint
func callbackQGraphicsEllipseItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsEllipseItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsEllipseItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEllipseItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsEllipseItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsEllipseItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsEllipseItem) SetRect(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_SetRect(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsEllipseItem) SetRect2(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_SetRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QGraphicsEllipseItem) SetSpanAngle(angle int) {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_SetSpanAngle(ptr.Pointer(), C.int(int32(angle)))
	}
}

func (ptr *QGraphicsEllipseItem) SetStartAngle(angle int) {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_SetStartAngle(ptr.Pointer(), C.int(int32(angle)))
	}
}

//export callbackQGraphicsEllipseItem_DestroyQGraphicsEllipseItem
func callbackQGraphicsEllipseItem_DestroyQGraphicsEllipseItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsEllipseItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsEllipseItemFromPointer(ptr).DestroyQGraphicsEllipseItemDefault()
	}
}

func (ptr *QGraphicsEllipseItem) ConnectDestroyQGraphicsEllipseItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsEllipseItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsEllipseItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsEllipseItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEllipseItem) DisconnectDestroyQGraphicsEllipseItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsEllipseItem")
	}
}

func (ptr *QGraphicsEllipseItem) DestroyQGraphicsEllipseItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_DestroyQGraphicsEllipseItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsEllipseItem) DestroyQGraphicsEllipseItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsEllipseItem_DestroyQGraphicsEllipseItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsEllipseItem_BoundingRect
func callbackQGraphicsEllipseItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsEllipseItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsEllipseItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsEllipseItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsEllipseItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsEllipseItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEllipseItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsEllipseItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEllipseItem) Rect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsEllipseItem_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsEllipseItem) SpanAngle() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsEllipseItem_SpanAngle(ptr.Pointer())))
	}
	return 0
}

func (ptr *QGraphicsEllipseItem) StartAngle() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsEllipseItem_StartAngle(ptr.Pointer())))
	}
	return 0
}

type QGraphicsItem struct {
	ptr unsafe.Pointer
}

type QGraphicsItem_ITF interface {
	QGraphicsItem_PTR() *QGraphicsItem
}

func (ptr *QGraphicsItem) QGraphicsItem_PTR() *QGraphicsItem {
	return ptr
}

func (ptr *QGraphicsItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QGraphicsItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQGraphicsItem(ptr QGraphicsItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsItem) {
	n = new(QGraphicsItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsItem__CacheMode
//QGraphicsItem::CacheMode
type QGraphicsItem__CacheMode int64

const (
	QGraphicsItem__NoCache               QGraphicsItem__CacheMode = QGraphicsItem__CacheMode(0)
	QGraphicsItem__ItemCoordinateCache   QGraphicsItem__CacheMode = QGraphicsItem__CacheMode(1)
	QGraphicsItem__DeviceCoordinateCache QGraphicsItem__CacheMode = QGraphicsItem__CacheMode(2)
)

//go:generate stringer -type=QGraphicsItem__GraphicsItemChange
//QGraphicsItem::GraphicsItemChange
type QGraphicsItem__GraphicsItemChange int64

const (
	QGraphicsItem__ItemPositionChange                 QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(0)
	QGraphicsItem__ItemMatrixChange                   QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(1)
	QGraphicsItem__ItemVisibleChange                  QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(2)
	QGraphicsItem__ItemEnabledChange                  QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(3)
	QGraphicsItem__ItemSelectedChange                 QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(4)
	QGraphicsItem__ItemParentChange                   QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(5)
	QGraphicsItem__ItemChildAddedChange               QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(6)
	QGraphicsItem__ItemChildRemovedChange             QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(7)
	QGraphicsItem__ItemTransformChange                QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(8)
	QGraphicsItem__ItemPositionHasChanged             QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(9)
	QGraphicsItem__ItemTransformHasChanged            QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(10)
	QGraphicsItem__ItemSceneChange                    QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(11)
	QGraphicsItem__ItemVisibleHasChanged              QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(12)
	QGraphicsItem__ItemEnabledHasChanged              QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(13)
	QGraphicsItem__ItemSelectedHasChanged             QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(14)
	QGraphicsItem__ItemParentHasChanged               QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(15)
	QGraphicsItem__ItemSceneHasChanged                QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(16)
	QGraphicsItem__ItemCursorChange                   QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(17)
	QGraphicsItem__ItemCursorHasChanged               QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(18)
	QGraphicsItem__ItemToolTipChange                  QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(19)
	QGraphicsItem__ItemToolTipHasChanged              QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(20)
	QGraphicsItem__ItemFlagsChange                    QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(21)
	QGraphicsItem__ItemFlagsHaveChanged               QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(22)
	QGraphicsItem__ItemZValueChange                   QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(23)
	QGraphicsItem__ItemZValueHasChanged               QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(24)
	QGraphicsItem__ItemOpacityChange                  QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(25)
	QGraphicsItem__ItemOpacityHasChanged              QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(26)
	QGraphicsItem__ItemScenePositionHasChanged        QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(27)
	QGraphicsItem__ItemRotationChange                 QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(28)
	QGraphicsItem__ItemRotationHasChanged             QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(29)
	QGraphicsItem__ItemScaleChange                    QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(30)
	QGraphicsItem__ItemScaleHasChanged                QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(31)
	QGraphicsItem__ItemTransformOriginPointChange     QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(32)
	QGraphicsItem__ItemTransformOriginPointHasChanged QGraphicsItem__GraphicsItemChange = QGraphicsItem__GraphicsItemChange(33)
)

//go:generate stringer -type=QGraphicsItem__GraphicsItemFlag
//QGraphicsItem::GraphicsItemFlag
type QGraphicsItem__GraphicsItemFlag int64

const (
	QGraphicsItem__ItemIsMovable                        QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x1)
	QGraphicsItem__ItemIsSelectable                     QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x2)
	QGraphicsItem__ItemIsFocusable                      QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x4)
	QGraphicsItem__ItemClipsToShape                     QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x8)
	QGraphicsItem__ItemClipsChildrenToShape             QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x10)
	QGraphicsItem__ItemIgnoresTransformations           QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x20)
	QGraphicsItem__ItemIgnoresParentOpacity             QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x40)
	QGraphicsItem__ItemDoesntPropagateOpacityToChildren QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x80)
	QGraphicsItem__ItemStacksBehindParent               QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x100)
	QGraphicsItem__ItemUsesExtendedStyleOption          QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x200)
	QGraphicsItem__ItemHasNoContents                    QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x400)
	QGraphicsItem__ItemSendsGeometryChanges             QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x800)
	QGraphicsItem__ItemAcceptsInputMethod               QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x1000)
	QGraphicsItem__ItemNegativeZStacksBehindParent      QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x2000)
	QGraphicsItem__ItemIsPanel                          QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x4000)
	QGraphicsItem__ItemIsFocusScope                     QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x8000)
	QGraphicsItem__ItemSendsScenePositionChanges        QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x10000)
	QGraphicsItem__ItemStopsClickFocusPropagation       QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x20000)
	QGraphicsItem__ItemStopsFocusHandling               QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x40000)
	QGraphicsItem__ItemContainsChildrenInShape          QGraphicsItem__GraphicsItemFlag = QGraphicsItem__GraphicsItemFlag(0x80000)
)

//go:generate stringer -type=QGraphicsItem__PanelModality
//QGraphicsItem::PanelModality
type QGraphicsItem__PanelModality int64

const (
	QGraphicsItem__NonModal   QGraphicsItem__PanelModality = QGraphicsItem__PanelModality(0)
	QGraphicsItem__PanelModal QGraphicsItem__PanelModality = QGraphicsItem__PanelModality(1)
	QGraphicsItem__SceneModal QGraphicsItem__PanelModality = QGraphicsItem__PanelModality(2)
)

//go:generate stringer -type=QGraphicsItem__anonymous
//QGraphicsItem::anonymous
type QGraphicsItem__anonymous int64

const (
	QGraphicsItem__Type     QGraphicsItem__anonymous = QGraphicsItem__anonymous(1)
	QGraphicsItem__UserType QGraphicsItem__anonymous = QGraphicsItem__anonymous(65536)
)

func NewQGraphicsItem(parent QGraphicsItem_ITF) *QGraphicsItem {
	return NewQGraphicsItemFromPointer(C.QGraphicsItem_NewQGraphicsItem(PointerFromQGraphicsItem(parent)))
}

func (ptr *QGraphicsItem) ToGraphicsObject() *QGraphicsObject {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsObjectFromPointer(C.QGraphicsItem_ToGraphicsObject(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsItem_ItemChange
func callbackQGraphicsItem_ItemChange(ptr unsafe.Pointer, change C.longlong, value unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "itemChange"); signal != nil {
		return core.PointerFromQVariant((*(*func(QGraphicsItem__GraphicsItemChange, *core.QVariant) *core.QVariant)(signal))(QGraphicsItem__GraphicsItemChange(change), core.NewQVariantFromPointer(value)))
	}

	return core.PointerFromQVariant(NewQGraphicsItemFromPointer(ptr).ItemChangeDefault(QGraphicsItem__GraphicsItemChange(change), core.NewQVariantFromPointer(value)))
}

func (ptr *QGraphicsItem) ConnectItemChange(f func(change QGraphicsItem__GraphicsItemChange, value *core.QVariant) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "itemChange"); signal != nil {
			f := func(change QGraphicsItem__GraphicsItemChange, value *core.QVariant) *core.QVariant {
				(*(*func(QGraphicsItem__GraphicsItemChange, *core.QVariant) *core.QVariant)(signal))(change, value)
				return f(change, value)
			}
			qt.ConnectSignal(ptr.Pointer(), "itemChange", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "itemChange", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectItemChange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "itemChange")
	}
}

func (ptr *QGraphicsItem) ItemChange(change QGraphicsItem__GraphicsItemChange, value core.QVariant_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QGraphicsItem_ItemChange(ptr.Pointer(), C.longlong(change), core.PointerFromQVariant(value)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ItemChangeDefault(change QGraphicsItem__GraphicsItemChange, value core.QVariant_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QGraphicsItem_ItemChangeDefault(ptr.Pointer(), C.longlong(change), core.PointerFromQVariant(value)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsItem_SceneEvent
func callbackQGraphicsItem_SceneEvent(ptr unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "sceneEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsItemFromPointer(ptr).SceneEventDefault(core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsItem) ConnectSceneEvent(f func(event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sceneEvent"); signal != nil {
			f := func(event *core.QEvent) bool {
				(*(*func(*core.QEvent) bool)(signal))(event)
				return f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "sceneEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sceneEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectSceneEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sceneEvent")
	}
}

func (ptr *QGraphicsItem) SceneEvent(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_SceneEvent(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) SceneEventDefault(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_SceneEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQGraphicsItem_SceneEventFilter
func callbackQGraphicsItem_SceneEventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "sceneEventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*QGraphicsItem, *core.QEvent) bool)(signal))(NewQGraphicsItemFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsItemFromPointer(ptr).SceneEventFilterDefault(NewQGraphicsItemFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsItem) ConnectSceneEventFilter(f func(watched *QGraphicsItem, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sceneEventFilter"); signal != nil {
			f := func(watched *QGraphicsItem, event *core.QEvent) bool {
				(*(*func(*QGraphicsItem, *core.QEvent) bool)(signal))(watched, event)
				return f(watched, event)
			}
			qt.ConnectSignal(ptr.Pointer(), "sceneEventFilter", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sceneEventFilter", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectSceneEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sceneEventFilter")
	}
}

func (ptr *QGraphicsItem) SceneEventFilter(watched QGraphicsItem_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_SceneEventFilter(ptr.Pointer(), PointerFromQGraphicsItem(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) SceneEventFilterDefault(watched QGraphicsItem_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_SceneEventFilterDefault(ptr.Pointer(), PointerFromQGraphicsItem(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQGraphicsItem_Advance
func callbackQGraphicsItem_Advance(ptr unsafe.Pointer, phase C.int) {
	if signal := qt.GetSignal(ptr, "advance"); signal != nil {
		(*(*func(int))(signal))(int(int32(phase)))
	} else {
		NewQGraphicsItemFromPointer(ptr).AdvanceDefault(int(int32(phase)))
	}
}

func (ptr *QGraphicsItem) ConnectAdvance(f func(phase int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "advance"); signal != nil {
			f := func(phase int) {
				(*(*func(int))(signal))(phase)
				f(phase)
			}
			qt.ConnectSignal(ptr.Pointer(), "advance", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "advance", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectAdvance() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "advance")
	}
}

func (ptr *QGraphicsItem) Advance(phase int) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_Advance(ptr.Pointer(), C.int(int32(phase)))
	}
}

func (ptr *QGraphicsItem) AdvanceDefault(phase int) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_AdvanceDefault(ptr.Pointer(), C.int(int32(phase)))
	}
}

func (ptr *QGraphicsItem) ClearFocus() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_ClearFocus(ptr.Pointer())
	}
}

//export callbackQGraphicsItem_ContextMenuEvent
func callbackQGraphicsItem_ContextMenuEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "contextMenuEvent"); signal != nil {
		(*(*func(*QGraphicsSceneContextMenuEvent))(signal))(NewQGraphicsSceneContextMenuEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).ContextMenuEventDefault(NewQGraphicsSceneContextMenuEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectContextMenuEvent(f func(event *QGraphicsSceneContextMenuEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "contextMenuEvent"); signal != nil {
			f := func(event *QGraphicsSceneContextMenuEvent) {
				(*(*func(*QGraphicsSceneContextMenuEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "contextMenuEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "contextMenuEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectContextMenuEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "contextMenuEvent")
	}
}

func (ptr *QGraphicsItem) ContextMenuEvent(event QGraphicsSceneContextMenuEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_ContextMenuEvent(ptr.Pointer(), PointerFromQGraphicsSceneContextMenuEvent(event))
	}
}

func (ptr *QGraphicsItem) ContextMenuEventDefault(event QGraphicsSceneContextMenuEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_ContextMenuEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneContextMenuEvent(event))
	}
}

//export callbackQGraphicsItem_DragEnterEvent
func callbackQGraphicsItem_DragEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragEnterEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).DragEnterEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectDragEnterEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragEnterEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragEnterEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragEnterEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectDragEnterEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragEnterEvent")
	}
}

func (ptr *QGraphicsItem) DragEnterEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DragEnterEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsItem) DragEnterEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DragEnterEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsItem_DragLeaveEvent
func callbackQGraphicsItem_DragLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragLeaveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).DragLeaveEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectDragLeaveEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragLeaveEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragLeaveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragLeaveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectDragLeaveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragLeaveEvent")
	}
}

func (ptr *QGraphicsItem) DragLeaveEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DragLeaveEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsItem) DragLeaveEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DragLeaveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsItem_DragMoveEvent
func callbackQGraphicsItem_DragMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragMoveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).DragMoveEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectDragMoveEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragMoveEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectDragMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragMoveEvent")
	}
}

func (ptr *QGraphicsItem) DragMoveEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DragMoveEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsItem) DragMoveEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DragMoveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsItem_DropEvent
func callbackQGraphicsItem_DropEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dropEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).DropEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectDropEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dropEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dropEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dropEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectDropEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dropEvent")
	}
}

func (ptr *QGraphicsItem) DropEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DropEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsItem) DropEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DropEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsItem) EnsureVisible(rect core.QRectF_ITF, xmargin int, ymargin int) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_EnsureVisible(ptr.Pointer(), core.PointerFromQRectF(rect), C.int(int32(xmargin)), C.int(int32(ymargin)))
	}
}

func (ptr *QGraphicsItem) EnsureVisible2(x float64, y float64, w float64, h float64, xmargin int, ymargin int) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_EnsureVisible2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.int(int32(xmargin)), C.int(int32(ymargin)))
	}
}

//export callbackQGraphicsItem_FocusInEvent
func callbackQGraphicsItem_FocusInEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusInEvent"); signal != nil {
		(*(*func(*gui.QFocusEvent))(signal))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).FocusInEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectFocusInEvent(f func(event *gui.QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusInEvent"); signal != nil {
			f := func(event *gui.QFocusEvent) {
				(*(*func(*gui.QFocusEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusInEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusInEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectFocusInEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusInEvent")
	}
}

func (ptr *QGraphicsItem) FocusInEvent(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_FocusInEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QGraphicsItem) FocusInEventDefault(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_FocusInEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQGraphicsItem_FocusOutEvent
func callbackQGraphicsItem_FocusOutEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusOutEvent"); signal != nil {
		(*(*func(*gui.QFocusEvent))(signal))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).FocusOutEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectFocusOutEvent(f func(event *gui.QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusOutEvent"); signal != nil {
			f := func(event *gui.QFocusEvent) {
				(*(*func(*gui.QFocusEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusOutEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusOutEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectFocusOutEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusOutEvent")
	}
}

func (ptr *QGraphicsItem) FocusOutEvent(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_FocusOutEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QGraphicsItem) FocusOutEventDefault(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_FocusOutEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QGraphicsItem) GrabKeyboard() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_GrabKeyboard(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) GrabMouse() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_GrabMouse(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) Hide() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_Hide(ptr.Pointer())
	}
}

//export callbackQGraphicsItem_HoverEnterEvent
func callbackQGraphicsItem_HoverEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hoverEnterEvent"); signal != nil {
		(*(*func(*QGraphicsSceneHoverEvent))(signal))(NewQGraphicsSceneHoverEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).HoverEnterEventDefault(NewQGraphicsSceneHoverEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectHoverEnterEvent(f func(event *QGraphicsSceneHoverEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hoverEnterEvent"); signal != nil {
			f := func(event *QGraphicsSceneHoverEvent) {
				(*(*func(*QGraphicsSceneHoverEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "hoverEnterEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hoverEnterEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectHoverEnterEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hoverEnterEvent")
	}
}

func (ptr *QGraphicsItem) HoverEnterEvent(event QGraphicsSceneHoverEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_HoverEnterEvent(ptr.Pointer(), PointerFromQGraphicsSceneHoverEvent(event))
	}
}

func (ptr *QGraphicsItem) HoverEnterEventDefault(event QGraphicsSceneHoverEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_HoverEnterEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneHoverEvent(event))
	}
}

//export callbackQGraphicsItem_HoverLeaveEvent
func callbackQGraphicsItem_HoverLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hoverLeaveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneHoverEvent))(signal))(NewQGraphicsSceneHoverEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).HoverLeaveEventDefault(NewQGraphicsSceneHoverEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectHoverLeaveEvent(f func(event *QGraphicsSceneHoverEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hoverLeaveEvent"); signal != nil {
			f := func(event *QGraphicsSceneHoverEvent) {
				(*(*func(*QGraphicsSceneHoverEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "hoverLeaveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hoverLeaveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectHoverLeaveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hoverLeaveEvent")
	}
}

func (ptr *QGraphicsItem) HoverLeaveEvent(event QGraphicsSceneHoverEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_HoverLeaveEvent(ptr.Pointer(), PointerFromQGraphicsSceneHoverEvent(event))
	}
}

func (ptr *QGraphicsItem) HoverLeaveEventDefault(event QGraphicsSceneHoverEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_HoverLeaveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneHoverEvent(event))
	}
}

//export callbackQGraphicsItem_HoverMoveEvent
func callbackQGraphicsItem_HoverMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hoverMoveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneHoverEvent))(signal))(NewQGraphicsSceneHoverEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).HoverMoveEventDefault(NewQGraphicsSceneHoverEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectHoverMoveEvent(f func(event *QGraphicsSceneHoverEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hoverMoveEvent"); signal != nil {
			f := func(event *QGraphicsSceneHoverEvent) {
				(*(*func(*QGraphicsSceneHoverEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "hoverMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hoverMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectHoverMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hoverMoveEvent")
	}
}

func (ptr *QGraphicsItem) HoverMoveEvent(event QGraphicsSceneHoverEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_HoverMoveEvent(ptr.Pointer(), PointerFromQGraphicsSceneHoverEvent(event))
	}
}

func (ptr *QGraphicsItem) HoverMoveEventDefault(event QGraphicsSceneHoverEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_HoverMoveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneHoverEvent(event))
	}
}

//export callbackQGraphicsItem_InputMethodEvent
func callbackQGraphicsItem_InputMethodEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "inputMethodEvent"); signal != nil {
		(*(*func(*gui.QInputMethodEvent))(signal))(gui.NewQInputMethodEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).InputMethodEventDefault(gui.NewQInputMethodEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectInputMethodEvent(f func(event *gui.QInputMethodEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "inputMethodEvent"); signal != nil {
			f := func(event *gui.QInputMethodEvent) {
				(*(*func(*gui.QInputMethodEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "inputMethodEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "inputMethodEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectInputMethodEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "inputMethodEvent")
	}
}

func (ptr *QGraphicsItem) InputMethodEvent(event gui.QInputMethodEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_InputMethodEvent(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QGraphicsItem) InputMethodEventDefault(event gui.QInputMethodEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_InputMethodEventDefault(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QGraphicsItem) InstallSceneEventFilter(filterItem QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_InstallSceneEventFilter(ptr.Pointer(), PointerFromQGraphicsItem(filterItem))
	}
}

//export callbackQGraphicsItem_KeyPressEvent
func callbackQGraphicsItem_KeyPressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "keyPressEvent"); signal != nil {
		(*(*func(*gui.QKeyEvent))(signal))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).KeyPressEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectKeyPressEvent(f func(event *gui.QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "keyPressEvent"); signal != nil {
			f := func(event *gui.QKeyEvent) {
				(*(*func(*gui.QKeyEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "keyPressEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "keyPressEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectKeyPressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "keyPressEvent")
	}
}

func (ptr *QGraphicsItem) KeyPressEvent(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_KeyPressEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QGraphicsItem) KeyPressEventDefault(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_KeyPressEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQGraphicsItem_KeyReleaseEvent
func callbackQGraphicsItem_KeyReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "keyReleaseEvent"); signal != nil {
		(*(*func(*gui.QKeyEvent))(signal))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).KeyReleaseEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectKeyReleaseEvent(f func(event *gui.QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "keyReleaseEvent"); signal != nil {
			f := func(event *gui.QKeyEvent) {
				(*(*func(*gui.QKeyEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "keyReleaseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "keyReleaseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectKeyReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "keyReleaseEvent")
	}
}

func (ptr *QGraphicsItem) KeyReleaseEvent(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_KeyReleaseEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QGraphicsItem) KeyReleaseEventDefault(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_KeyReleaseEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQGraphicsItem_MouseDoubleClickEvent
func callbackQGraphicsItem_MouseDoubleClickEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseDoubleClickEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).MouseDoubleClickEventDefault(NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectMouseDoubleClickEvent(f func(event *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseDoubleClickEvent"); signal != nil {
			f := func(event *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseDoubleClickEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseDoubleClickEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectMouseDoubleClickEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseDoubleClickEvent")
	}
}

func (ptr *QGraphicsItem) MouseDoubleClickEvent(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsItem) MouseDoubleClickEventDefault(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

//export callbackQGraphicsItem_MouseMoveEvent
func callbackQGraphicsItem_MouseMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseMoveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).MouseMoveEventDefault(NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectMouseMoveEvent(f func(event *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseMoveEvent"); signal != nil {
			f := func(event *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectMouseMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseMoveEvent")
	}
}

func (ptr *QGraphicsItem) MouseMoveEvent(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MouseMoveEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsItem) MouseMoveEventDefault(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MouseMoveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

//export callbackQGraphicsItem_MousePressEvent
func callbackQGraphicsItem_MousePressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mousePressEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).MousePressEventDefault(NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectMousePressEvent(f func(event *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mousePressEvent"); signal != nil {
			f := func(event *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mousePressEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mousePressEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectMousePressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mousePressEvent")
	}
}

func (ptr *QGraphicsItem) MousePressEvent(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MousePressEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsItem) MousePressEventDefault(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MousePressEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

//export callbackQGraphicsItem_MouseReleaseEvent
func callbackQGraphicsItem_MouseReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseReleaseEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).MouseReleaseEventDefault(NewQGraphicsSceneMouseEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectMouseReleaseEvent(f func(event *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseReleaseEvent"); signal != nil {
			f := func(event *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseReleaseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseReleaseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectMouseReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseReleaseEvent")
	}
}

func (ptr *QGraphicsItem) MouseReleaseEvent(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MouseReleaseEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsItem) MouseReleaseEventDefault(event QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(event))
	}
}

func (ptr *QGraphicsItem) MoveBy(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_MoveBy(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

//export callbackQGraphicsItem_Paint
func callbackQGraphicsItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}

}

func (ptr *QGraphicsItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsItem) PrepareGeometryChange() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_PrepareGeometryChange(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) RemoveSceneEventFilter(filterItem QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_RemoveSceneEventFilter(ptr.Pointer(), PointerFromQGraphicsItem(filterItem))
	}
}

func (ptr *QGraphicsItem) ResetTransform() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_ResetTransform(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) Scroll(dx float64, dy float64, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_Scroll(ptr.Pointer(), C.double(dx), C.double(dy), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsItem) SetAcceptDrops(on bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetAcceptDrops(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QGraphicsItem) SetAcceptHoverEvents(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetAcceptHoverEvents(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsItem) SetAcceptTouchEvents(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetAcceptTouchEvents(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsItem) SetAcceptedMouseButtons(buttons core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetAcceptedMouseButtons(ptr.Pointer(), C.longlong(buttons))
	}
}

func (ptr *QGraphicsItem) SetActive(active bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetActive(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(active))))
	}
}

func (ptr *QGraphicsItem) SetBoundingRegionGranularity(granularity float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetBoundingRegionGranularity(ptr.Pointer(), C.double(granularity))
	}
}

func (ptr *QGraphicsItem) SetCacheMode(mode QGraphicsItem__CacheMode, logicalCacheSize core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetCacheMode(ptr.Pointer(), C.longlong(mode), core.PointerFromQSize(logicalCacheSize))
	}
}

func (ptr *QGraphicsItem) SetCursor(cursor gui.QCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetCursor(ptr.Pointer(), gui.PointerFromQCursor(cursor))
	}
}

func (ptr *QGraphicsItem) SetData(key int, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetData(ptr.Pointer(), C.int(int32(key)), core.PointerFromQVariant(value))
	}
}

func (ptr *QGraphicsItem) SetEnabled(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsItem) SetFiltersChildEvents(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetFiltersChildEvents(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsItem) SetFlag(flag QGraphicsItem__GraphicsItemFlag, enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetFlag(ptr.Pointer(), C.longlong(flag), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsItem) SetFlags(flags QGraphicsItem__GraphicsItemFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QGraphicsItem) SetFocus(focusReason core.Qt__FocusReason) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetFocus(ptr.Pointer(), C.longlong(focusReason))
	}
}

func (ptr *QGraphicsItem) SetFocusProxy(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetFocusProxy(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

func (ptr *QGraphicsItem) SetGraphicsEffect(effect QGraphicsEffect_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetGraphicsEffect(ptr.Pointer(), PointerFromQGraphicsEffect(effect))
	}
}

func (ptr *QGraphicsItem) SetGroup(group QGraphicsItemGroup_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetGroup(ptr.Pointer(), PointerFromQGraphicsItemGroup(group))
	}
}

func (ptr *QGraphicsItem) SetInputMethodHints(hints core.Qt__InputMethodHint) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetInputMethodHints(ptr.Pointer(), C.longlong(hints))
	}
}

func (ptr *QGraphicsItem) SetOpacity(opacity float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetOpacity(ptr.Pointer(), C.double(opacity))
	}
}

func (ptr *QGraphicsItem) SetPanelModality(panelModality QGraphicsItem__PanelModality) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetPanelModality(ptr.Pointer(), C.longlong(panelModality))
	}
}

func (ptr *QGraphicsItem) SetParentItem(newParent QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetParentItem(ptr.Pointer(), PointerFromQGraphicsItem(newParent))
	}
}

func (ptr *QGraphicsItem) SetPos(pos core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetPos(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QGraphicsItem) SetPos2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetPos2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QGraphicsItem) SetRotation(angle float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetRotation(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QGraphicsItem) SetScale(factor float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetScale(ptr.Pointer(), C.double(factor))
	}
}

func (ptr *QGraphicsItem) SetSelected(selected bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetSelected(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(selected))))
	}
}

func (ptr *QGraphicsItem) SetToolTip(toolTip string) {
	if ptr.Pointer() != nil {
		var toolTipC *C.char
		if toolTip != "" {
			toolTipC = C.CString(toolTip)
			defer C.free(unsafe.Pointer(toolTipC))
		}
		C.QGraphicsItem_SetToolTip(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: toolTipC, len: C.longlong(len(toolTip))})
	}
}

func (ptr *QGraphicsItem) SetTransform(matrix gui.QTransform_ITF, combine bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetTransform(ptr.Pointer(), gui.PointerFromQTransform(matrix), C.char(int8(qt.GoBoolToInt(combine))))
	}
}

func (ptr *QGraphicsItem) SetTransformOriginPoint(origin core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetTransformOriginPoint(ptr.Pointer(), core.PointerFromQPointF(origin))
	}
}

func (ptr *QGraphicsItem) SetTransformOriginPoint2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetTransformOriginPoint2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QGraphicsItem) SetTransformations(transformations []*QGraphicsTransform) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetTransformations(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQGraphicsItemFromPointer(NewQGraphicsItemFromPointer(nil).__setTransformations_transformations_newList())
			for _, v := range transformations {
				tmpList.__setTransformations_transformations_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QGraphicsItem) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QGraphicsItem) SetX(x float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetX(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QGraphicsItem) SetY(y float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetY(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QGraphicsItem) SetZValue(z float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_SetZValue(ptr.Pointer(), C.double(z))
	}
}

func (ptr *QGraphicsItem) Show() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_Show(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) StackBefore(sibling QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_StackBefore(ptr.Pointer(), PointerFromQGraphicsItem(sibling))
	}
}

func (ptr *QGraphicsItem) UngrabKeyboard() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_UngrabKeyboard(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) UngrabMouse() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_UngrabMouse(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) UnsetCursor() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_UnsetCursor(ptr.Pointer())
	}
}

func (ptr *QGraphicsItem) Update(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_Update(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsItem) Update2(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_Update2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

//export callbackQGraphicsItem_WheelEvent
func callbackQGraphicsItem_WheelEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "wheelEvent"); signal != nil {
		(*(*func(*QGraphicsSceneWheelEvent))(signal))(NewQGraphicsSceneWheelEventFromPointer(event))
	} else {
		NewQGraphicsItemFromPointer(ptr).WheelEventDefault(NewQGraphicsSceneWheelEventFromPointer(event))
	}
}

func (ptr *QGraphicsItem) ConnectWheelEvent(f func(event *QGraphicsSceneWheelEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "wheelEvent"); signal != nil {
			f := func(event *QGraphicsSceneWheelEvent) {
				(*(*func(*QGraphicsSceneWheelEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "wheelEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "wheelEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "wheelEvent")
	}
}

func (ptr *QGraphicsItem) WheelEvent(event QGraphicsSceneWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_WheelEvent(ptr.Pointer(), PointerFromQGraphicsSceneWheelEvent(event))
	}
}

func (ptr *QGraphicsItem) WheelEventDefault(event QGraphicsSceneWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_WheelEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneWheelEvent(event))
	}
}

//export callbackQGraphicsItem_DestroyQGraphicsItem
func callbackQGraphicsItem_DestroyQGraphicsItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsItemFromPointer(ptr).DestroyQGraphicsItemDefault()
	}
}

func (ptr *QGraphicsItem) ConnectDestroyQGraphicsItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectDestroyQGraphicsItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsItem")
	}
}

func (ptr *QGraphicsItem) DestroyQGraphicsItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DestroyQGraphicsItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsItem) DestroyQGraphicsItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsItem_DestroyQGraphicsItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsItem) Cursor() *gui.QCursor {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQCursorFromPointer(C.QGraphicsItem_Cursor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QCursor).DestroyQCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) GraphicsEffect() *QGraphicsEffect {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsEffectFromPointer(C.QGraphicsItem_GraphicsEffect(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) CommonAncestorItem(other QGraphicsItem_ITF) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem_CommonAncestorItem(ptr.Pointer(), PointerFromQGraphicsItem(other)))
	}
	return nil
}

func (ptr *QGraphicsItem) FocusItem() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem_FocusItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsItem) FocusProxy() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem_FocusProxy(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsItem) Panel() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem_Panel(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsItem) ParentItem() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem_ParentItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsItem) TopLevelItem() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem_TopLevelItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsItem) CacheMode() QGraphicsItem__CacheMode {
	if ptr.Pointer() != nil {
		return QGraphicsItem__CacheMode(C.QGraphicsItem_CacheMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) Flags() QGraphicsItem__GraphicsItemFlag {
	if ptr.Pointer() != nil {
		return QGraphicsItem__GraphicsItemFlag(C.QGraphicsItem_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) PanelModality() QGraphicsItem__PanelModality {
	if ptr.Pointer() != nil {
		return QGraphicsItem__PanelModality(C.QGraphicsItem_PanelModality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) Group() *QGraphicsItemGroup {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemGroupFromPointer(C.QGraphicsItem_Group(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsItem) ParentObject() *QGraphicsObject {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsObjectFromPointer(C.QGraphicsItem_ParentObject(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) Scene() *QGraphicsScene {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsSceneFromPointer(C.QGraphicsItem_Scene(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ParentWidget() *QGraphicsWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsWidgetFromPointer(C.QGraphicsItem_ParentWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) TopLevelWidget() *QGraphicsWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsWidgetFromPointer(C.QGraphicsItem_TopLevelWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) Window() *QGraphicsWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsWidgetFromPointer(C.QGraphicsItem_Window(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ChildItems() []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsItemFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__childItems_atList(i)
			}
			return out
		}(C.QGraphicsItem_ChildItems(ptr.Pointer()))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsItem) CollidingItems(mode core.Qt__ItemSelectionMode) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsItemFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__collidingItems_atList(i)
			}
			return out
		}(C.QGraphicsItem_CollidingItems(ptr.Pointer(), C.longlong(mode)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsItem) Transformations() []*QGraphicsTransform {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsTransform {
			out := make([]*QGraphicsTransform, int(l.len))
			tmpList := NewQGraphicsItemFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__transformations_atList(i)
			}
			return out
		}(C.QGraphicsItem_Transformations(ptr.Pointer()))
	}
	return make([]*QGraphicsTransform, 0)
}

func (ptr *QGraphicsItem) ClipPath() *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_ClipPath(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromItem4(item QGraphicsItem_ITF, path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_MapFromItem4(ptr.Pointer(), PointerFromQGraphicsItem(item), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromParent4(path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_MapFromParent4(ptr.Pointer(), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromScene4(path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_MapFromScene4(ptr.Pointer(), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToItem4(item QGraphicsItem_ITF, path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_MapToItem4(ptr.Pointer(), PointerFromQGraphicsItem(item), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToParent4(path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_MapToParent4(ptr.Pointer(), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToScene4(path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_MapToScene4(ptr.Pointer(), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsItem_OpaqueArea
func callbackQGraphicsItem_OpaqueArea(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "opaqueArea"); signal != nil {
		return gui.PointerFromQPainterPath((*(*func() *gui.QPainterPath)(signal))())
	}

	return gui.PointerFromQPainterPath(NewQGraphicsItemFromPointer(ptr).OpaqueAreaDefault())
}

func (ptr *QGraphicsItem) ConnectOpaqueArea(f func() *gui.QPainterPath) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "opaqueArea"); signal != nil {
			f := func() *gui.QPainterPath {
				(*(*func() *gui.QPainterPath)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "opaqueArea", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "opaqueArea", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectOpaqueArea() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "opaqueArea")
	}
}

func (ptr *QGraphicsItem) OpaqueArea() *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_OpaqueArea(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) OpaqueAreaDefault() *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_OpaqueAreaDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsItem_Shape
func callbackQGraphicsItem_Shape(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "shape"); signal != nil {
		return gui.PointerFromQPainterPath((*(*func() *gui.QPainterPath)(signal))())
	}

	return gui.PointerFromQPainterPath(NewQGraphicsItemFromPointer(ptr).ShapeDefault())
}

func (ptr *QGraphicsItem) ConnectShape(f func() *gui.QPainterPath) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "shape"); signal != nil {
			f := func() *gui.QPainterPath {
				(*(*func() *gui.QPainterPath)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "shape", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "shape", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectShape() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "shape")
	}
}

func (ptr *QGraphicsItem) Shape() *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_Shape(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ShapeDefault() *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsItem_ShapeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromItem(item QGraphicsItem_ITF, point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapFromItem(ptr.Pointer(), PointerFromQGraphicsItem(item), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromItem5(item QGraphicsItem_ITF, x float64, y float64) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapFromItem5(ptr.Pointer(), PointerFromQGraphicsItem(item), C.double(x), C.double(y)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromParent(point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapFromParent(ptr.Pointer(), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromParent5(x float64, y float64) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapFromParent5(ptr.Pointer(), C.double(x), C.double(y)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromScene(point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapFromScene(ptr.Pointer(), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromScene5(x float64, y float64) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapFromScene5(ptr.Pointer(), C.double(x), C.double(y)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToItem(item QGraphicsItem_ITF, point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapToItem(ptr.Pointer(), PointerFromQGraphicsItem(item), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToItem5(item QGraphicsItem_ITF, x float64, y float64) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapToItem5(ptr.Pointer(), PointerFromQGraphicsItem(item), C.double(x), C.double(y)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToParent(point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapToParent(ptr.Pointer(), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToParent5(x float64, y float64) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapToParent5(ptr.Pointer(), C.double(x), C.double(y)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToScene(point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapToScene(ptr.Pointer(), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToScene5(x float64, y float64) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_MapToScene5(ptr.Pointer(), C.double(x), C.double(y)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) Pos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_ScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) TransformOriginPoint() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsItem_TransformOriginPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromItem3(item QGraphicsItem_ITF, polygon gui.QPolygonF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromItem3(ptr.Pointer(), PointerFromQGraphicsItem(item), gui.PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromItem2(item QGraphicsItem_ITF, rect core.QRectF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromItem2(ptr.Pointer(), PointerFromQGraphicsItem(item), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromItem6(item QGraphicsItem_ITF, x float64, y float64, w float64, h float64) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromItem6(ptr.Pointer(), PointerFromQGraphicsItem(item), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromParent3(polygon gui.QPolygonF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromParent3(ptr.Pointer(), gui.PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromParent2(rect core.QRectF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromParent2(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromParent6(x float64, y float64, w float64, h float64) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromParent6(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromScene3(polygon gui.QPolygonF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromScene3(ptr.Pointer(), gui.PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromScene2(rect core.QRectF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromScene2(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapFromScene6(x float64, y float64, w float64, h float64) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapFromScene6(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToItem3(item QGraphicsItem_ITF, polygon gui.QPolygonF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToItem3(ptr.Pointer(), PointerFromQGraphicsItem(item), gui.PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToItem2(item QGraphicsItem_ITF, rect core.QRectF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToItem2(ptr.Pointer(), PointerFromQGraphicsItem(item), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToItem6(item QGraphicsItem_ITF, x float64, y float64, w float64, h float64) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToItem6(ptr.Pointer(), PointerFromQGraphicsItem(item), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToParent3(polygon gui.QPolygonF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToParent3(ptr.Pointer(), gui.PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToParent2(rect core.QRectF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToParent2(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToParent6(x float64, y float64, w float64, h float64) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToParent6(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToScene3(polygon gui.QPolygonF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToScene3(ptr.Pointer(), gui.PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToScene2(rect core.QRectF_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToScene2(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapToScene6(x float64, y float64, w float64, h float64) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsItem_MapToScene6(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsItem_BoundingRect
func callbackQGraphicsItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(core.NewQRectF())
}

func (ptr *QGraphicsItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ChildrenBoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_ChildrenBoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectFromItem(item QGraphicsItem_ITF, rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectFromItem(ptr.Pointer(), PointerFromQGraphicsItem(item), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectFromItem2(item QGraphicsItem_ITF, x float64, y float64, w float64, h float64) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectFromItem2(ptr.Pointer(), PointerFromQGraphicsItem(item), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectFromParent(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectFromParent(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectFromParent2(x float64, y float64, w float64, h float64) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectFromParent2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectFromScene(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectFromScene(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectFromScene2(x float64, y float64, w float64, h float64) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectFromScene2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectToItem(item QGraphicsItem_ITF, rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectToItem(ptr.Pointer(), PointerFromQGraphicsItem(item), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectToItem2(item QGraphicsItem_ITF, x float64, y float64, w float64, h float64) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectToItem2(ptr.Pointer(), PointerFromQGraphicsItem(item), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectToParent(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectToParent(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectToParent2(x float64, y float64, w float64, h float64) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectToParent2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectToScene(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectToScene(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) MapRectToScene2(x float64, y float64, w float64, h float64) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_MapRectToScene2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) SceneBoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItem_SceneBoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) BoundingRegion(itemToDeviceTransform gui.QTransform_ITF) *gui.QRegion {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQRegionFromPointer(C.QGraphicsItem_BoundingRegion(ptr.Pointer(), gui.PointerFromQTransform(itemToDeviceTransform)))
		runtime.SetFinalizer(tmpValue, (*gui.QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ToolTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGraphicsItem_ToolTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGraphicsItem) DeviceTransform(viewportTransform gui.QTransform_ITF) *gui.QTransform {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQTransformFromPointer(C.QGraphicsItem_DeviceTransform(ptr.Pointer(), gui.PointerFromQTransform(viewportTransform)))
		runtime.SetFinalizer(tmpValue, (*gui.QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) ItemTransform(other QGraphicsItem_ITF, ok *bool) *gui.QTransform {
	if ptr.Pointer() != nil {
		var okC C.char
		if ok != nil {
			okC = C.char(int8(qt.GoBoolToInt(*ok)))
			defer func() { *ok = int8(okC) != 0 }()
		}
		tmpValue := gui.NewQTransformFromPointer(C.QGraphicsItem_ItemTransform(ptr.Pointer(), PointerFromQGraphicsItem(other), &okC))
		runtime.SetFinalizer(tmpValue, (*gui.QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) SceneTransform() *gui.QTransform {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQTransformFromPointer(C.QGraphicsItem_SceneTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) Transform() *gui.QTransform {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQTransformFromPointer(C.QGraphicsItem_Transform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) Data(key int) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QGraphicsItem_Data(ptr.Pointer(), C.int(int32(key))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsItem_InputMethodQuery
func callbackQGraphicsItem_InputMethodQuery(ptr unsafe.Pointer, query C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "inputMethodQuery"); signal != nil {
		return core.PointerFromQVariant((*(*func(core.Qt__InputMethodQuery) *core.QVariant)(signal))(core.Qt__InputMethodQuery(query)))
	}

	return core.PointerFromQVariant(NewQGraphicsItemFromPointer(ptr).InputMethodQueryDefault(core.Qt__InputMethodQuery(query)))
}

func (ptr *QGraphicsItem) ConnectInputMethodQuery(f func(query core.Qt__InputMethodQuery) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "inputMethodQuery"); signal != nil {
			f := func(query core.Qt__InputMethodQuery) *core.QVariant {
				(*(*func(core.Qt__InputMethodQuery) *core.QVariant)(signal))(query)
				return f(query)
			}
			qt.ConnectSignal(ptr.Pointer(), "inputMethodQuery", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "inputMethodQuery", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectInputMethodQuery() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "inputMethodQuery")
	}
}

func (ptr *QGraphicsItem) InputMethodQuery(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QGraphicsItem_InputMethodQuery(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) InputMethodQueryDefault(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QGraphicsItem_InputMethodQueryDefault(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) InputMethodHints() core.Qt__InputMethodHint {
	if ptr.Pointer() != nil {
		return core.Qt__InputMethodHint(C.QGraphicsItem_InputMethodHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) AcceptedMouseButtons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QGraphicsItem_AcceptedMouseButtons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) AcceptDrops() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_AcceptDrops(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) AcceptHoverEvents() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_AcceptHoverEvents(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) AcceptTouchEvents() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_AcceptTouchEvents(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQGraphicsItem_CollidesWithItem
func callbackQGraphicsItem_CollidesWithItem(ptr unsafe.Pointer, other unsafe.Pointer, mode C.longlong) C.char {
	if signal := qt.GetSignal(ptr, "collidesWithItem"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*QGraphicsItem, core.Qt__ItemSelectionMode) bool)(signal))(NewQGraphicsItemFromPointer(other), core.Qt__ItemSelectionMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsItemFromPointer(ptr).CollidesWithItemDefault(NewQGraphicsItemFromPointer(other), core.Qt__ItemSelectionMode(mode)))))
}

func (ptr *QGraphicsItem) ConnectCollidesWithItem(f func(other *QGraphicsItem, mode core.Qt__ItemSelectionMode) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "collidesWithItem"); signal != nil {
			f := func(other *QGraphicsItem, mode core.Qt__ItemSelectionMode) bool {
				(*(*func(*QGraphicsItem, core.Qt__ItemSelectionMode) bool)(signal))(other, mode)
				return f(other, mode)
			}
			qt.ConnectSignal(ptr.Pointer(), "collidesWithItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "collidesWithItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectCollidesWithItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "collidesWithItem")
	}
}

func (ptr *QGraphicsItem) CollidesWithItem(other QGraphicsItem_ITF, mode core.Qt__ItemSelectionMode) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_CollidesWithItem(ptr.Pointer(), PointerFromQGraphicsItem(other), C.longlong(mode))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) CollidesWithItemDefault(other QGraphicsItem_ITF, mode core.Qt__ItemSelectionMode) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_CollidesWithItemDefault(ptr.Pointer(), PointerFromQGraphicsItem(other), C.longlong(mode))) != 0
	}
	return false
}

//export callbackQGraphicsItem_CollidesWithPath
func callbackQGraphicsItem_CollidesWithPath(ptr unsafe.Pointer, path unsafe.Pointer, mode C.longlong) C.char {
	if signal := qt.GetSignal(ptr, "collidesWithPath"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*gui.QPainterPath, core.Qt__ItemSelectionMode) bool)(signal))(gui.NewQPainterPathFromPointer(path), core.Qt__ItemSelectionMode(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsItemFromPointer(ptr).CollidesWithPathDefault(gui.NewQPainterPathFromPointer(path), core.Qt__ItemSelectionMode(mode)))))
}

func (ptr *QGraphicsItem) ConnectCollidesWithPath(f func(path *gui.QPainterPath, mode core.Qt__ItemSelectionMode) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "collidesWithPath"); signal != nil {
			f := func(path *gui.QPainterPath, mode core.Qt__ItemSelectionMode) bool {
				(*(*func(*gui.QPainterPath, core.Qt__ItemSelectionMode) bool)(signal))(path, mode)
				return f(path, mode)
			}
			qt.ConnectSignal(ptr.Pointer(), "collidesWithPath", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "collidesWithPath", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectCollidesWithPath() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "collidesWithPath")
	}
}

func (ptr *QGraphicsItem) CollidesWithPath(path gui.QPainterPath_ITF, mode core.Qt__ItemSelectionMode) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_CollidesWithPath(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(mode))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) CollidesWithPathDefault(path gui.QPainterPath_ITF, mode core.Qt__ItemSelectionMode) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_CollidesWithPathDefault(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(mode))) != 0
	}
	return false
}

//export callbackQGraphicsItem_Contains
func callbackQGraphicsItem_Contains(ptr unsafe.Pointer, point unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "contains"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QPointF) bool)(signal))(core.NewQPointFFromPointer(point)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsItemFromPointer(ptr).ContainsDefault(core.NewQPointFFromPointer(point)))))
}

func (ptr *QGraphicsItem) ConnectContains(f func(point *core.QPointF) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "contains"); signal != nil {
			f := func(point *core.QPointF) bool {
				(*(*func(*core.QPointF) bool)(signal))(point)
				return f(point)
			}
			qt.ConnectSignal(ptr.Pointer(), "contains", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "contains", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectContains() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "contains")
	}
}

func (ptr *QGraphicsItem) Contains(point core.QPointF_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_Contains(ptr.Pointer(), core.PointerFromQPointF(point))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) ContainsDefault(point core.QPointF_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_ContainsDefault(ptr.Pointer(), core.PointerFromQPointF(point))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) FiltersChildEvents() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_FiltersChildEvents(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) HasCursor() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_HasCursor(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) HasFocus() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_HasFocus(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsActive() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsActive(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsAncestorOf(child QGraphicsItem_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsAncestorOf(ptr.Pointer(), PointerFromQGraphicsItem(child))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsClipped() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsClipped(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsObscured(rect core.QRectF_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsObscured(ptr.Pointer(), core.PointerFromQRectF(rect))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsObscured2(x float64, y float64, w float64, h float64) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsObscured2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h))) != 0
	}
	return false
}

//export callbackQGraphicsItem_IsObscuredBy
func callbackQGraphicsItem_IsObscuredBy(ptr unsafe.Pointer, item unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "isObscuredBy"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*QGraphicsItem) bool)(signal))(NewQGraphicsItemFromPointer(item)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsItemFromPointer(ptr).IsObscuredByDefault(NewQGraphicsItemFromPointer(item)))))
}

func (ptr *QGraphicsItem) ConnectIsObscuredBy(f func(item *QGraphicsItem) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "isObscuredBy"); signal != nil {
			f := func(item *QGraphicsItem) bool {
				(*(*func(*QGraphicsItem) bool)(signal))(item)
				return f(item)
			}
			qt.ConnectSignal(ptr.Pointer(), "isObscuredBy", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "isObscuredBy", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectIsObscuredBy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "isObscuredBy")
	}
}

func (ptr *QGraphicsItem) IsObscuredBy(item QGraphicsItem_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsObscuredBy(ptr.Pointer(), PointerFromQGraphicsItem(item))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsObscuredByDefault(item QGraphicsItem_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsObscuredByDefault(ptr.Pointer(), PointerFromQGraphicsItem(item))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsPanel() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsPanel(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsSelected() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsSelected(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsUnderMouse() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsUnderMouse(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsVisible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsVisible(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsVisibleTo(parent QGraphicsItem_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsVisibleTo(ptr.Pointer(), PointerFromQGraphicsItem(parent))) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsWidget() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsWidget(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) IsWindow() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsItem_IsWindow(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsItem) ToGraphicsObject2() *QGraphicsObject {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsObjectFromPointer(C.QGraphicsItem_ToGraphicsObject2(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsItem_Type
func callbackQGraphicsItem_Type(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(ptr, "type"); signal != nil {
		return C.int(int32((*(*func() int)(signal))()))
	}

	return C.int(int32(NewQGraphicsItemFromPointer(ptr).TypeDefault()))
}

func (ptr *QGraphicsItem) ConnectType(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "type"); signal != nil {
			f := func() int {
				(*(*func() int)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "type", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "type", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItem) DisconnectType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "type")
	}
}

func (ptr *QGraphicsItem) Type() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsItem_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QGraphicsItem) TypeDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsItem_TypeDefault(ptr.Pointer())))
	}
	return 0
}

func (ptr *QGraphicsItem) BoundingRegionGranularity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_BoundingRegionGranularity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) EffectiveOpacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_EffectiveOpacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) Rotation() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_Rotation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) Scale() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_Scale(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) X() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) Y() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) ZValue() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsItem_ZValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsItem) __setTransformations_transformations_atList(i int) *QGraphicsTransform {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsTransformFromPointer(C.QGraphicsItem___setTransformations_transformations_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) __setTransformations_transformations_setList(i QGraphicsTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem___setTransformations_transformations_setList(ptr.Pointer(), PointerFromQGraphicsTransform(i))
	}
}

func (ptr *QGraphicsItem) __setTransformations_transformations_newList() unsafe.Pointer {
	return C.QGraphicsItem___setTransformations_transformations_newList(ptr.Pointer())
}

func (ptr *QGraphicsItem) __childItems_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem___childItems_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsItem) __childItems_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem___childItems_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsItem) __childItems_newList() unsafe.Pointer {
	return C.QGraphicsItem___childItems_newList(ptr.Pointer())
}

func (ptr *QGraphicsItem) __children_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem___children_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsItem) __children_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem___children_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsItem) __children_newList() unsafe.Pointer {
	return C.QGraphicsItem___children_newList(ptr.Pointer())
}

func (ptr *QGraphicsItem) __collidingItems_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsItem___collidingItems_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsItem) __collidingItems_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem___collidingItems_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsItem) __collidingItems_newList() unsafe.Pointer {
	return C.QGraphicsItem___collidingItems_newList(ptr.Pointer())
}

func (ptr *QGraphicsItem) __transformations_atList(i int) *QGraphicsTransform {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsTransformFromPointer(C.QGraphicsItem___transformations_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItem) __transformations_setList(i QGraphicsTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItem___transformations_setList(ptr.Pointer(), PointerFromQGraphicsTransform(i))
	}
}

func (ptr *QGraphicsItem) __transformations_newList() unsafe.Pointer {
	return C.QGraphicsItem___transformations_newList(ptr.Pointer())
}

type QGraphicsItemGroup struct {
	QGraphicsItem
}

type QGraphicsItemGroup_ITF interface {
	QGraphicsItem_ITF
	QGraphicsItemGroup_PTR() *QGraphicsItemGroup
}

func (ptr *QGraphicsItemGroup) QGraphicsItemGroup_PTR() *QGraphicsItemGroup {
	return ptr
}

func (ptr *QGraphicsItemGroup) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsItemGroup) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsItemGroup(ptr QGraphicsItemGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsItemGroup_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsItemGroupFromPointer(ptr unsafe.Pointer) (n *QGraphicsItemGroup) {
	n = new(QGraphicsItemGroup)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsItemGroup__anonymous
//QGraphicsItemGroup::anonymous
type QGraphicsItemGroup__anonymous int64

const (
	QGraphicsItemGroup__Type QGraphicsItemGroup__anonymous = QGraphicsItemGroup__anonymous(10)
)

func NewQGraphicsItemGroup(parent QGraphicsItem_ITF) *QGraphicsItemGroup {
	return NewQGraphicsItemGroupFromPointer(C.QGraphicsItemGroup_NewQGraphicsItemGroup(PointerFromQGraphicsItem(parent)))
}

func (ptr *QGraphicsItemGroup) AddToGroup(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItemGroup_AddToGroup(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

//export callbackQGraphicsItemGroup_Paint
func callbackQGraphicsItemGroup_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsItemGroupFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsItemGroup) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItemGroup) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsItemGroup) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItemGroup_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsItemGroup) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItemGroup_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsItemGroup) RemoveFromGroup(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsItemGroup_RemoveFromGroup(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

//export callbackQGraphicsItemGroup_DestroyQGraphicsItemGroup
func callbackQGraphicsItemGroup_DestroyQGraphicsItemGroup(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsItemGroup"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsItemGroupFromPointer(ptr).DestroyQGraphicsItemGroupDefault()
	}
}

func (ptr *QGraphicsItemGroup) ConnectDestroyQGraphicsItemGroup(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsItemGroup"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsItemGroup", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsItemGroup", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItemGroup) DisconnectDestroyQGraphicsItemGroup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsItemGroup")
	}
}

func (ptr *QGraphicsItemGroup) DestroyQGraphicsItemGroup() {
	if ptr.Pointer() != nil {
		C.QGraphicsItemGroup_DestroyQGraphicsItemGroup(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsItemGroup) DestroyQGraphicsItemGroupDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsItemGroup_DestroyQGraphicsItemGroupDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsItemGroup_BoundingRect
func callbackQGraphicsItemGroup_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsItemGroupFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsItemGroup) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsItemGroup) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsItemGroup) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItemGroup_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsItemGroup) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsItemGroup_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

type QGraphicsLayout struct {
	QGraphicsLayoutItem
}

type QGraphicsLayout_ITF interface {
	QGraphicsLayoutItem_ITF
	QGraphicsLayout_PTR() *QGraphicsLayout
}

func (ptr *QGraphicsLayout) QGraphicsLayout_PTR() *QGraphicsLayout {
	return ptr
}

func (ptr *QGraphicsLayout) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsLayoutItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsLayout) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsLayoutItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsLayout(ptr QGraphicsLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsLayout_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsLayoutFromPointer(ptr unsafe.Pointer) (n *QGraphicsLayout) {
	n = new(QGraphicsLayout)
	n.SetPointer(ptr)
	return
}
func NewQGraphicsLayout(parent QGraphicsLayoutItem_ITF) *QGraphicsLayout {
	return NewQGraphicsLayoutFromPointer(C.QGraphicsLayout_NewQGraphicsLayout(PointerFromQGraphicsLayoutItem(parent)))
}

func (ptr *QGraphicsLayout) Activate() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_Activate(ptr.Pointer())
	}
}

func (ptr *QGraphicsLayout) AddChildLayoutItem(layoutItem QGraphicsLayoutItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_AddChildLayoutItem(ptr.Pointer(), PointerFromQGraphicsLayoutItem(layoutItem))
	}
}

//export callbackQGraphicsLayout_Invalidate
func callbackQGraphicsLayout_Invalidate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "invalidate"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsLayoutFromPointer(ptr).InvalidateDefault()
	}
}

func (ptr *QGraphicsLayout) ConnectInvalidate(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "invalidate"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "invalidate", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "invalidate", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayout) DisconnectInvalidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "invalidate")
	}
}

func (ptr *QGraphicsLayout) Invalidate() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_Invalidate(ptr.Pointer())
	}
}

func (ptr *QGraphicsLayout) InvalidateDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_InvalidateDefault(ptr.Pointer())
	}
}

//export callbackQGraphicsLayout_RemoveAt
func callbackQGraphicsLayout_RemoveAt(ptr unsafe.Pointer, index C.int) {
	if signal := qt.GetSignal(ptr, "removeAt"); signal != nil {
		(*(*func(int))(signal))(int(int32(index)))
	}

}

func (ptr *QGraphicsLayout) ConnectRemoveAt(f func(index int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "removeAt"); signal != nil {
			f := func(index int) {
				(*(*func(int))(signal))(index)
				f(index)
			}
			qt.ConnectSignal(ptr.Pointer(), "removeAt", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "removeAt", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayout) DisconnectRemoveAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "removeAt")
	}
}

func (ptr *QGraphicsLayout) RemoveAt(index int) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_RemoveAt(ptr.Pointer(), C.int(int32(index)))
	}
}

func (ptr *QGraphicsLayout) SetContentsMargins(left float64, top float64, right float64, bottom float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_SetContentsMargins(ptr.Pointer(), C.double(left), C.double(top), C.double(right), C.double(bottom))
	}
}

//export callbackQGraphicsLayout_WidgetEvent
func callbackQGraphicsLayout_WidgetEvent(ptr unsafe.Pointer, e unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "widgetEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(e))
	} else {
		NewQGraphicsLayoutFromPointer(ptr).WidgetEventDefault(core.NewQEventFromPointer(e))
	}
}

func (ptr *QGraphicsLayout) ConnectWidgetEvent(f func(e *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "widgetEvent"); signal != nil {
			f := func(e *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(e)
				f(e)
			}
			qt.ConnectSignal(ptr.Pointer(), "widgetEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "widgetEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayout) DisconnectWidgetEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "widgetEvent")
	}
}

func (ptr *QGraphicsLayout) WidgetEvent(e core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_WidgetEvent(ptr.Pointer(), core.PointerFromQEvent(e))
	}
}

func (ptr *QGraphicsLayout) WidgetEventDefault(e core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_WidgetEventDefault(ptr.Pointer(), core.PointerFromQEvent(e))
	}
}

//export callbackQGraphicsLayout_DestroyQGraphicsLayout
func callbackQGraphicsLayout_DestroyQGraphicsLayout(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsLayout"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsLayoutFromPointer(ptr).DestroyQGraphicsLayoutDefault()
	}
}

func (ptr *QGraphicsLayout) ConnectDestroyQGraphicsLayout(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsLayout"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsLayout", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsLayout", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayout) DisconnectDestroyQGraphicsLayout() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsLayout")
	}
}

func (ptr *QGraphicsLayout) DestroyQGraphicsLayout() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_DestroyQGraphicsLayout(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QGraphicsLayout) DestroyQGraphicsLayoutDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayout_DestroyQGraphicsLayoutDefault(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQGraphicsLayout_ItemAt
func callbackQGraphicsLayout_ItemAt(ptr unsafe.Pointer, i C.int) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "itemAt"); signal != nil {
		return PointerFromQGraphicsLayoutItem((*(*func(int) *QGraphicsLayoutItem)(signal))(int(int32(i))))
	}

	return PointerFromQGraphicsLayoutItem(nil)
}

func (ptr *QGraphicsLayout) ConnectItemAt(f func(i int) *QGraphicsLayoutItem) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "itemAt"); signal != nil {
			f := func(i int) *QGraphicsLayoutItem {
				(*(*func(int) *QGraphicsLayoutItem)(signal))(i)
				return f(i)
			}
			qt.ConnectSignal(ptr.Pointer(), "itemAt", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "itemAt", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayout) DisconnectItemAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "itemAt")
	}
}

func (ptr *QGraphicsLayout) ItemAt(i int) *QGraphicsLayoutItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsLayoutItemFromPointer(C.QGraphicsLayout_ItemAt(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsLayout) IsActivated() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsLayout_IsActivated(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQGraphicsLayout_Count
func callbackQGraphicsLayout_Count(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(ptr, "count"); signal != nil {
		return C.int(int32((*(*func() int)(signal))()))
	}

	return C.int(int32(0))
}

func (ptr *QGraphicsLayout) ConnectCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "count"); signal != nil {
			f := func() int {
				(*(*func() int)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "count", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "count", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayout) DisconnectCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "count")
	}
}

func (ptr *QGraphicsLayout) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsLayout_Count(ptr.Pointer())))
	}
	return 0
}

//export callbackQGraphicsLayout_SizeHint
func callbackQGraphicsLayout_SizeHint(ptr unsafe.Pointer, which C.longlong, constraint unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeHint"); signal != nil {
		return core.PointerFromQSizeF((*(*func(core.Qt__SizeHint, *core.QSizeF) *core.QSizeF)(signal))(core.Qt__SizeHint(which), core.NewQSizeFFromPointer(constraint)))
	}

	return core.PointerFromQSizeF(NewQGraphicsLayoutFromPointer(ptr).SizeHintDefault(core.Qt__SizeHint(which), core.NewQSizeFFromPointer(constraint)))
}

func (ptr *QGraphicsLayout) SizeHint(which core.Qt__SizeHint, constraint core.QSizeF_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsLayout_SizeHint(ptr.Pointer(), C.longlong(which), core.PointerFromQSizeF(constraint)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayout) SizeHintDefault(which core.Qt__SizeHint, constraint core.QSizeF_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsLayout_SizeHintDefault(ptr.Pointer(), C.longlong(which), core.PointerFromQSizeF(constraint)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

type QGraphicsLayoutItem struct {
	ptr unsafe.Pointer
}

type QGraphicsLayoutItem_ITF interface {
	QGraphicsLayoutItem_PTR() *QGraphicsLayoutItem
}

func (ptr *QGraphicsLayoutItem) QGraphicsLayoutItem_PTR() *QGraphicsLayoutItem {
	return ptr
}

func (ptr *QGraphicsLayoutItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQGraphicsLayoutItem(ptr QGraphicsLayoutItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsLayoutItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsLayoutItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsLayoutItem) {
	n = new(QGraphicsLayoutItem)
	n.SetPointer(ptr)
	return
}
func NewQGraphicsLayoutItem(parent QGraphicsLayoutItem_ITF, isLayout bool) *QGraphicsLayoutItem {
	return NewQGraphicsLayoutItemFromPointer(C.QGraphicsLayoutItem_NewQGraphicsLayoutItem(PointerFromQGraphicsLayoutItem(parent), C.char(int8(qt.GoBoolToInt(isLayout)))))
}

//export callbackQGraphicsLayoutItem_SetGeometry
func callbackQGraphicsLayoutItem_SetGeometry(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setGeometry"); signal != nil {
		(*(*func(*core.QRectF))(signal))(core.NewQRectFFromPointer(rect))
	} else {
		NewQGraphicsLayoutItemFromPointer(ptr).SetGeometryDefault(core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QGraphicsLayoutItem) ConnectSetGeometry(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setGeometry"); signal != nil {
			f := func(rect *core.QRectF) {
				(*(*func(*core.QRectF))(signal))(rect)
				f(rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayoutItem) DisconnectSetGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setGeometry")
	}
}

func (ptr *QGraphicsLayoutItem) SetGeometry(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetGeometry(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsLayoutItem) SetGeometryDefault(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetGeometryDefault(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsLayoutItem) SetGraphicsItem(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetGraphicsItem(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

func (ptr *QGraphicsLayoutItem) SetMaximumHeight(height float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMaximumHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QGraphicsLayoutItem) SetMaximumSize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMaximumSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QGraphicsLayoutItem) SetMaximumSize2(w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMaximumSize2(ptr.Pointer(), C.double(w), C.double(h))
	}
}

func (ptr *QGraphicsLayoutItem) SetMaximumWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMaximumWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QGraphicsLayoutItem) SetMinimumHeight(height float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMinimumHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QGraphicsLayoutItem) SetMinimumSize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMinimumSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QGraphicsLayoutItem) SetMinimumSize2(w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMinimumSize2(ptr.Pointer(), C.double(w), C.double(h))
	}
}

func (ptr *QGraphicsLayoutItem) SetMinimumWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetMinimumWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QGraphicsLayoutItem) SetOwnedByLayout(ownership bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetOwnedByLayout(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ownership))))
	}
}

func (ptr *QGraphicsLayoutItem) SetParentLayoutItem(parent QGraphicsLayoutItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetParentLayoutItem(ptr.Pointer(), PointerFromQGraphicsLayoutItem(parent))
	}
}

func (ptr *QGraphicsLayoutItem) SetPreferredHeight(height float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetPreferredHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QGraphicsLayoutItem) SetPreferredSize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetPreferredSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QGraphicsLayoutItem) SetPreferredSize2(w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetPreferredSize2(ptr.Pointer(), C.double(w), C.double(h))
	}
}

func (ptr *QGraphicsLayoutItem) SetPreferredWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetPreferredWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QGraphicsLayoutItem) SetSizePolicy2(hPolicy QSizePolicy__Policy, vPolicy QSizePolicy__Policy, controlType QSizePolicy__ControlType) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetSizePolicy2(ptr.Pointer(), C.longlong(hPolicy), C.longlong(vPolicy), C.longlong(controlType))
	}
}

func (ptr *QGraphicsLayoutItem) SetSizePolicy(policy QSizePolicy_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_SetSizePolicy(ptr.Pointer(), PointerFromQSizePolicy(policy))
	}
}

//export callbackQGraphicsLayoutItem_UpdateGeometry
func callbackQGraphicsLayoutItem_UpdateGeometry(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "updateGeometry"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsLayoutItemFromPointer(ptr).UpdateGeometryDefault()
	}
}

func (ptr *QGraphicsLayoutItem) ConnectUpdateGeometry(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "updateGeometry"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "updateGeometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "updateGeometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayoutItem) DisconnectUpdateGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "updateGeometry")
	}
}

func (ptr *QGraphicsLayoutItem) UpdateGeometry() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_UpdateGeometry(ptr.Pointer())
	}
}

func (ptr *QGraphicsLayoutItem) UpdateGeometryDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_UpdateGeometryDefault(ptr.Pointer())
	}
}

//export callbackQGraphicsLayoutItem_DestroyQGraphicsLayoutItem
func callbackQGraphicsLayoutItem_DestroyQGraphicsLayoutItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsLayoutItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsLayoutItemFromPointer(ptr).DestroyQGraphicsLayoutItemDefault()
	}
}

func (ptr *QGraphicsLayoutItem) ConnectDestroyQGraphicsLayoutItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsLayoutItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsLayoutItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsLayoutItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayoutItem) DisconnectDestroyQGraphicsLayoutItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsLayoutItem")
	}
}

func (ptr *QGraphicsLayoutItem) DestroyQGraphicsLayoutItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_DestroyQGraphicsLayoutItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsLayoutItem) DestroyQGraphicsLayoutItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_DestroyQGraphicsLayoutItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsLayoutItem) GraphicsItem() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsLayoutItem_GraphicsItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) ParentLayoutItem() *QGraphicsLayoutItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsLayoutItemFromPointer(C.QGraphicsLayoutItem_ParentLayoutItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) ContentsRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsLayoutItem_ContentsRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) Geometry() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsLayoutItem_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) EffectiveSizeHint(which core.Qt__SizeHint, constraint core.QSizeF_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsLayoutItem_EffectiveSizeHint(ptr.Pointer(), C.longlong(which), core.PointerFromQSizeF(constraint)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) MaximumSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsLayoutItem_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) MinimumSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsLayoutItem_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) PreferredSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsLayoutItem_PreferredSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsLayoutItem_SizeHint
func callbackQGraphicsLayoutItem_SizeHint(ptr unsafe.Pointer, which C.longlong, constraint unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeHint"); signal != nil {
		return core.PointerFromQSizeF((*(*func(core.Qt__SizeHint, *core.QSizeF) *core.QSizeF)(signal))(core.Qt__SizeHint(which), core.NewQSizeFFromPointer(constraint)))
	}

	return core.PointerFromQSizeF(core.NewQSizeF())
}

func (ptr *QGraphicsLayoutItem) ConnectSizeHint(f func(which core.Qt__SizeHint, constraint *core.QSizeF) *core.QSizeF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sizeHint"); signal != nil {
			f := func(which core.Qt__SizeHint, constraint *core.QSizeF) *core.QSizeF {
				(*(*func(core.Qt__SizeHint, *core.QSizeF) *core.QSizeF)(signal))(which, constraint)
				return f(which, constraint)
			}
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayoutItem) DisconnectSizeHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sizeHint")
	}
}

func (ptr *QGraphicsLayoutItem) SizeHint(which core.Qt__SizeHint, constraint core.QSizeF_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsLayoutItem_SizeHint(ptr.Pointer(), C.longlong(which), core.PointerFromQSizeF(constraint)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) SizePolicy() *QSizePolicy {
	if ptr.Pointer() != nil {
		tmpValue := NewQSizePolicyFromPointer(C.QGraphicsLayoutItem_SizePolicy(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizePolicy).DestroyQSizePolicy)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLayoutItem) IsLayout() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsLayoutItem_IsLayout(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsLayoutItem) OwnedByLayout() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsLayoutItem_OwnedByLayout(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsLayoutItem) MaximumHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsLayoutItem_MaximumHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsLayoutItem) MaximumWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsLayoutItem_MaximumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsLayoutItem) MinimumHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsLayoutItem_MinimumHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsLayoutItem) MinimumWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsLayoutItem_MinimumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsLayoutItem) PreferredHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsLayoutItem_PreferredHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsLayoutItem) PreferredWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsLayoutItem_PreferredWidth(ptr.Pointer()))
	}
	return 0
}

//export callbackQGraphicsLayoutItem_GetContentsMargins
func callbackQGraphicsLayoutItem_GetContentsMargins(ptr unsafe.Pointer, left C.double, top C.double, right C.double, bottom C.double) {
	if signal := qt.GetSignal(ptr, "getContentsMargins"); signal != nil {
		(*(*func(float64, float64, float64, float64))(signal))(float64(left), float64(top), float64(right), float64(bottom))
	} else {
		NewQGraphicsLayoutItemFromPointer(ptr).GetContentsMarginsDefault(float64(left), float64(top), float64(right), float64(bottom))
	}
}

func (ptr *QGraphicsLayoutItem) ConnectGetContentsMargins(f func(left float64, top float64, right float64, bottom float64)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "getContentsMargins"); signal != nil {
			f := func(left float64, top float64, right float64, bottom float64) {
				(*(*func(float64, float64, float64, float64))(signal))(left, top, right, bottom)
				f(left, top, right, bottom)
			}
			qt.ConnectSignal(ptr.Pointer(), "getContentsMargins", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "getContentsMargins", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLayoutItem) DisconnectGetContentsMargins() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "getContentsMargins")
	}
}

func (ptr *QGraphicsLayoutItem) GetContentsMargins(left float64, top float64, right float64, bottom float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_GetContentsMargins(ptr.Pointer(), C.double(left), C.double(top), C.double(right), C.double(bottom))
	}
}

func (ptr *QGraphicsLayoutItem) GetContentsMarginsDefault(left float64, top float64, right float64, bottom float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLayoutItem_GetContentsMarginsDefault(ptr.Pointer(), C.double(left), C.double(top), C.double(right), C.double(bottom))
	}
}

type QGraphicsLineItem struct {
	QGraphicsItem
}

type QGraphicsLineItem_ITF interface {
	QGraphicsItem_ITF
	QGraphicsLineItem_PTR() *QGraphicsLineItem
}

func (ptr *QGraphicsLineItem) QGraphicsLineItem_PTR() *QGraphicsLineItem {
	return ptr
}

func (ptr *QGraphicsLineItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsLineItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsLineItem(ptr QGraphicsLineItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsLineItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsLineItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsLineItem) {
	n = new(QGraphicsLineItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsLineItem__anonymous
//QGraphicsLineItem::anonymous
type QGraphicsLineItem__anonymous int64

const (
	QGraphicsLineItem__Type QGraphicsLineItem__anonymous = QGraphicsLineItem__anonymous(6)
)

func NewQGraphicsLineItem(parent QGraphicsItem_ITF) *QGraphicsLineItem {
	return NewQGraphicsLineItemFromPointer(C.QGraphicsLineItem_NewQGraphicsLineItem(PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsLineItem2(line core.QLineF_ITF, parent QGraphicsItem_ITF) *QGraphicsLineItem {
	return NewQGraphicsLineItemFromPointer(C.QGraphicsLineItem_NewQGraphicsLineItem2(core.PointerFromQLineF(line), PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsLineItem3(x1 float64, y1 float64, x2 float64, y2 float64, parent QGraphicsItem_ITF) *QGraphicsLineItem {
	return NewQGraphicsLineItemFromPointer(C.QGraphicsLineItem_NewQGraphicsLineItem3(C.double(x1), C.double(y1), C.double(x2), C.double(y2), PointerFromQGraphicsItem(parent)))
}

//export callbackQGraphicsLineItem_Paint
func callbackQGraphicsLineItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsLineItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsLineItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLineItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsLineItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLineItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsLineItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLineItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsLineItem) SetLine(line core.QLineF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLineItem_SetLine(ptr.Pointer(), core.PointerFromQLineF(line))
	}
}

func (ptr *QGraphicsLineItem) SetLine2(x1 float64, y1 float64, x2 float64, y2 float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsLineItem_SetLine2(ptr.Pointer(), C.double(x1), C.double(y1), C.double(x2), C.double(y2))
	}
}

func (ptr *QGraphicsLineItem) SetPen(pen gui.QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsLineItem_SetPen(ptr.Pointer(), gui.PointerFromQPen(pen))
	}
}

//export callbackQGraphicsLineItem_DestroyQGraphicsLineItem
func callbackQGraphicsLineItem_DestroyQGraphicsLineItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsLineItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsLineItemFromPointer(ptr).DestroyQGraphicsLineItemDefault()
	}
}

func (ptr *QGraphicsLineItem) ConnectDestroyQGraphicsLineItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsLineItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsLineItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsLineItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLineItem) DisconnectDestroyQGraphicsLineItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsLineItem")
	}
}

func (ptr *QGraphicsLineItem) DestroyQGraphicsLineItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsLineItem_DestroyQGraphicsLineItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsLineItem) DestroyQGraphicsLineItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsLineItem_DestroyQGraphicsLineItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsLineItem) Line() *core.QLineF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQLineFFromPointer(C.QGraphicsLineItem_Line(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLineItem) Pen() *gui.QPen {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPenFromPointer(C.QGraphicsLineItem_Pen(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsLineItem_BoundingRect
func callbackQGraphicsLineItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsLineItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsLineItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsLineItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsLineItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsLineItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsLineItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsLineItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

type QGraphicsObject struct {
	core.QObject
	QGraphicsItem
}

type QGraphicsObject_ITF interface {
	core.QObject_ITF
	QGraphicsItem_ITF
	QGraphicsObject_PTR() *QGraphicsObject
}

func (ptr *QGraphicsObject) QGraphicsObject_PTR() *QGraphicsObject {
	return ptr
}

func (ptr *QGraphicsObject) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsObject) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
		ptr.QGraphicsItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsObject(ptr QGraphicsObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsObject_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsObjectFromPointer(ptr unsafe.Pointer) (n *QGraphicsObject) {
	n = new(QGraphicsObject)
	n.SetPointer(ptr)
	return
}
func NewQGraphicsObject(parent QGraphicsItem_ITF) *QGraphicsObject {
	tmpValue := NewQGraphicsObjectFromPointer(C.QGraphicsObject_NewQGraphicsObject(PointerFromQGraphicsItem(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGraphicsObject_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsObject_QGraphicsObject_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QGraphicsObject) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsObject_QGraphicsObject_Tr(sC, cC, C.int(int32(n))))
}

//export callbackQGraphicsObject_Event
func callbackQGraphicsObject_Event(ptr unsafe.Pointer, ev unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(ev)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsObjectFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev)))))
}

func (ptr *QGraphicsObject) ConnectEvent(f func(ev *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "event"); signal != nil {
			f := func(ev *core.QEvent) bool {
				(*(*func(*core.QEvent) bool)(signal))(ev)
				return f(ev)
			}
			qt.ConnectSignal(ptr.Pointer(), "event", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "event", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "event")
	}
}

func (ptr *QGraphicsObject) Event(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsObject_Event(ptr.Pointer(), core.PointerFromQEvent(ev))) != 0
	}
	return false
}

func (ptr *QGraphicsObject) EventDefault(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsObject_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev))) != 0
	}
	return false
}

//export callbackQGraphicsObject_EnabledChanged
func callbackQGraphicsObject_EnabledChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "enabledChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectEnabledChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "enabledChanged") {
			C.QGraphicsObject_ConnectEnabledChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "enabledChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "enabledChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "enabledChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "enabledChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectEnabledChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectEnabledChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "enabledChanged")
	}
}

func (ptr *QGraphicsObject) EnabledChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_EnabledChanged(ptr.Pointer())
	}
}

func (ptr *QGraphicsObject) GrabGesture(gesture core.Qt__GestureType, flags core.Qt__GestureFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_GrabGesture(ptr.Pointer(), C.longlong(gesture), C.longlong(flags))
	}
}

//export callbackQGraphicsObject_OpacityChanged
func callbackQGraphicsObject_OpacityChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "opacityChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectOpacityChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "opacityChanged") {
			C.QGraphicsObject_ConnectOpacityChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "opacityChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "opacityChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "opacityChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "opacityChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectOpacityChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectOpacityChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "opacityChanged")
	}
}

func (ptr *QGraphicsObject) OpacityChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_OpacityChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_ParentChanged
func callbackQGraphicsObject_ParentChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "parentChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectParentChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "parentChanged") {
			C.QGraphicsObject_ConnectParentChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "parentChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "parentChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "parentChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "parentChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectParentChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectParentChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "parentChanged")
	}
}

func (ptr *QGraphicsObject) ParentChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_ParentChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_RotationChanged
func callbackQGraphicsObject_RotationChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "rotationChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectRotationChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "rotationChanged") {
			C.QGraphicsObject_ConnectRotationChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "rotationChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "rotationChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "rotationChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "rotationChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectRotationChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectRotationChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "rotationChanged")
	}
}

func (ptr *QGraphicsObject) RotationChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_RotationChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_ScaleChanged
func callbackQGraphicsObject_ScaleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "scaleChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectScaleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "scaleChanged") {
			C.QGraphicsObject_ConnectScaleChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "scaleChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "scaleChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "scaleChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "scaleChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectScaleChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectScaleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "scaleChanged")
	}
}

func (ptr *QGraphicsObject) ScaleChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_ScaleChanged(ptr.Pointer())
	}
}

func (ptr *QGraphicsObject) UngrabGesture(gesture core.Qt__GestureType) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_UngrabGesture(ptr.Pointer(), C.longlong(gesture))
	}
}

//export callbackQGraphicsObject_UpdateMicroFocus
func callbackQGraphicsObject_UpdateMicroFocus(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "updateMicroFocus"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsObjectFromPointer(ptr).UpdateMicroFocusDefault()
	}
}

func (ptr *QGraphicsObject) ConnectUpdateMicroFocus(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "updateMicroFocus"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "updateMicroFocus", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "updateMicroFocus", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectUpdateMicroFocus() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "updateMicroFocus")
	}
}

func (ptr *QGraphicsObject) UpdateMicroFocus() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_UpdateMicroFocus(ptr.Pointer())
	}
}

func (ptr *QGraphicsObject) UpdateMicroFocusDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_UpdateMicroFocusDefault(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_VisibleChanged
func callbackQGraphicsObject_VisibleChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "visibleChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectVisibleChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "visibleChanged") {
			C.QGraphicsObject_ConnectVisibleChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "visibleChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "visibleChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "visibleChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "visibleChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectVisibleChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectVisibleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "visibleChanged")
	}
}

func (ptr *QGraphicsObject) VisibleChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_VisibleChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_XChanged
func callbackQGraphicsObject_XChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "xChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectXChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "xChanged") {
			C.QGraphicsObject_ConnectXChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "xChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "xChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "xChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "xChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectXChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectXChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "xChanged")
	}
}

func (ptr *QGraphicsObject) XChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_XChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_YChanged
func callbackQGraphicsObject_YChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "yChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectYChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "yChanged") {
			C.QGraphicsObject_ConnectYChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "yChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "yChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "yChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "yChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectYChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectYChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "yChanged")
	}
}

func (ptr *QGraphicsObject) YChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_YChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_ZChanged
func callbackQGraphicsObject_ZChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "zChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsObject) ConnectZChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "zChanged") {
			C.QGraphicsObject_ConnectZChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "zChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "zChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "zChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "zChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectZChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectZChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "zChanged")
	}
}

func (ptr *QGraphicsObject) ZChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_ZChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsObject_DestroyQGraphicsObject
func callbackQGraphicsObject_DestroyQGraphicsObject(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsObject"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsObjectFromPointer(ptr).DestroyQGraphicsObjectDefault()
	}
}

func (ptr *QGraphicsObject) ConnectDestroyQGraphicsObject(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsObject"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsObject", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsObject", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectDestroyQGraphicsObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsObject")
	}
}

func (ptr *QGraphicsObject) DestroyQGraphicsObject() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DestroyQGraphicsObject(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsObject) DestroyQGraphicsObjectDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DestroyQGraphicsObjectDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsObject_MetaObject
func callbackQGraphicsObject_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQGraphicsObjectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGraphicsObject) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "metaObject"); signal != nil {
			f := func() *core.QMetaObject {
				(*(*func() *core.QMetaObject)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "metaObject", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "metaObject", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsObject) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "metaObject")
	}
}

func (ptr *QGraphicsObject) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGraphicsObject_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsObject) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGraphicsObject_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsObject) GraphicsEffect() *QGraphicsEffect {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsEffectFromPointer(C.QGraphicsObject_GraphicsEffect(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) SetGraphicsEffect(effect QGraphicsEffect_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetGraphicsEffect(ptr.Pointer(), PointerFromQGraphicsEffect(effect))
	}
}

func (ptr *QGraphicsObject) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsObject_IsEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsObject) SetEnabled(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsObject) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsObject_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsObject) SetOpacity(opacity float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetOpacity(ptr.Pointer(), C.double(opacity))
	}
}

func (ptr *QGraphicsObject) Parent() *QGraphicsObject {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsObjectFromPointer(C.QGraphicsObject_Parent(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) SetParent(parent QGraphicsObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetParent(ptr.Pointer(), PointerFromQGraphicsObject(parent))
	}
}

func (ptr *QGraphicsObject) Pos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsObject_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) SetPos(pos core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetPos(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QGraphicsObject) Rotation() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsObject_Rotation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsObject) SetRotation(rotation float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetRotation(ptr.Pointer(), C.double(rotation))
	}
}

func (ptr *QGraphicsObject) Scale() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsObject_Scale(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsObject) SetScale(scale float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetScale(ptr.Pointer(), C.double(scale))
	}
}

func (ptr *QGraphicsObject) TransformOriginPoint() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsObject_TransformOriginPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) SetTransformOriginPoint(transformOriginPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetTransformOriginPoint(ptr.Pointer(), core.PointerFromQPointF(transformOriginPoint))
	}
}

func (ptr *QGraphicsObject) IsVisible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsObject_IsVisible(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsObject) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QGraphicsObject) X() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsObject_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsObject) SetX(x float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetX(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QGraphicsObject) Y() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsObject_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsObject) SetY(y float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetY(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QGraphicsObject) ZValue() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsObject_ZValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsObject) SetZValue(z float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_SetZValue(ptr.Pointer(), C.double(z))
	}
}

func (ptr *QGraphicsObject) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QGraphicsObject___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QGraphicsObject) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QGraphicsObject___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QGraphicsObject) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsObject___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsObject) __findChildren_newList2() unsafe.Pointer {
	return C.QGraphicsObject___findChildren_newList2(ptr.Pointer())
}

func (ptr *QGraphicsObject) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsObject___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsObject) __findChildren_newList3() unsafe.Pointer {
	return C.QGraphicsObject___findChildren_newList3(ptr.Pointer())
}

func (ptr *QGraphicsObject) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsObject___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsObject) __findChildren_newList() unsafe.Pointer {
	return C.QGraphicsObject___findChildren_newList(ptr.Pointer())
}

func (ptr *QGraphicsObject) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsObject___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsObject) __children_newList() unsafe.Pointer {
	return C.QGraphicsObject___children_newList(ptr.Pointer())
}

//export callbackQGraphicsObject_EventFilter
func callbackQGraphicsObject_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsObjectFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsObject) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsObject_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QGraphicsObject) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsObject_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQGraphicsObject_ChildEvent
func callbackQGraphicsObject_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGraphicsObjectFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGraphicsObject) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QGraphicsObject) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGraphicsObject_ConnectNotify
func callbackQGraphicsObject_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsObjectFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsObject) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGraphicsObject) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsObject_CustomEvent
func callbackQGraphicsObject_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsObjectFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsObject) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsObject) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsObject_DeleteLater
func callbackQGraphicsObject_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsObjectFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGraphicsObject) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DeleteLater(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsObject) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsObject_Destroyed
func callbackQGraphicsObject_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQGraphicsObject_DisconnectNotify
func callbackQGraphicsObject_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsObjectFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsObject) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGraphicsObject) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsObject_ObjectNameChanged
func callbackQGraphicsObject_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQGraphicsObject_TimerEvent
func callbackQGraphicsObject_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGraphicsObjectFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGraphicsObject) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QGraphicsObject) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGraphicsObject_Paint
func callbackQGraphicsObject_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsObjectFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsObject) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsObject) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsObject_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

//export callbackQGraphicsObject_BoundingRect
func callbackQGraphicsObject_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsObjectFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsObject) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsObject_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsObject) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsObject_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

type QGraphicsPathItem struct {
	QAbstractGraphicsShapeItem
}

type QGraphicsPathItem_ITF interface {
	QAbstractGraphicsShapeItem_ITF
	QGraphicsPathItem_PTR() *QGraphicsPathItem
}

func (ptr *QGraphicsPathItem) QGraphicsPathItem_PTR() *QGraphicsPathItem {
	return ptr
}

func (ptr *QGraphicsPathItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractGraphicsShapeItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsPathItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractGraphicsShapeItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsPathItem(ptr QGraphicsPathItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsPathItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsPathItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsPathItem) {
	n = new(QGraphicsPathItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsPathItem__anonymous
//QGraphicsPathItem::anonymous
type QGraphicsPathItem__anonymous int64

const (
	QGraphicsPathItem__Type QGraphicsPathItem__anonymous = QGraphicsPathItem__anonymous(2)
)

func NewQGraphicsPathItem(parent QGraphicsItem_ITF) *QGraphicsPathItem {
	return NewQGraphicsPathItemFromPointer(C.QGraphicsPathItem_NewQGraphicsPathItem(PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsPathItem2(path gui.QPainterPath_ITF, parent QGraphicsItem_ITF) *QGraphicsPathItem {
	return NewQGraphicsPathItemFromPointer(C.QGraphicsPathItem_NewQGraphicsPathItem2(gui.PointerFromQPainterPath(path), PointerFromQGraphicsItem(parent)))
}

//export callbackQGraphicsPathItem_Paint
func callbackQGraphicsPathItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsPathItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsPathItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPathItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsPathItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPathItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsPathItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPathItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsPathItem) SetPath(path gui.QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPathItem_SetPath(ptr.Pointer(), gui.PointerFromQPainterPath(path))
	}
}

//export callbackQGraphicsPathItem_DestroyQGraphicsPathItem
func callbackQGraphicsPathItem_DestroyQGraphicsPathItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsPathItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsPathItemFromPointer(ptr).DestroyQGraphicsPathItemDefault()
	}
}

func (ptr *QGraphicsPathItem) ConnectDestroyQGraphicsPathItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsPathItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsPathItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsPathItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPathItem) DisconnectDestroyQGraphicsPathItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsPathItem")
	}
}

func (ptr *QGraphicsPathItem) DestroyQGraphicsPathItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsPathItem_DestroyQGraphicsPathItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsPathItem) DestroyQGraphicsPathItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsPathItem_DestroyQGraphicsPathItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsPathItem) Path() *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsPathItem_Path(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsPathItem_BoundingRect
func callbackQGraphicsPathItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsPathItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsPathItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPathItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsPathItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsPathItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsPathItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsPathItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

type QGraphicsPixmapItem struct {
	QGraphicsItem
}

type QGraphicsPixmapItem_ITF interface {
	QGraphicsItem_ITF
	QGraphicsPixmapItem_PTR() *QGraphicsPixmapItem
}

func (ptr *QGraphicsPixmapItem) QGraphicsPixmapItem_PTR() *QGraphicsPixmapItem {
	return ptr
}

func (ptr *QGraphicsPixmapItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsPixmapItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsPixmapItem(ptr QGraphicsPixmapItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsPixmapItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsPixmapItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsPixmapItem) {
	n = new(QGraphicsPixmapItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsPixmapItem__ShapeMode
//QGraphicsPixmapItem::ShapeMode
type QGraphicsPixmapItem__ShapeMode int64

const (
	QGraphicsPixmapItem__MaskShape          QGraphicsPixmapItem__ShapeMode = QGraphicsPixmapItem__ShapeMode(0)
	QGraphicsPixmapItem__BoundingRectShape  QGraphicsPixmapItem__ShapeMode = QGraphicsPixmapItem__ShapeMode(1)
	QGraphicsPixmapItem__HeuristicMaskShape QGraphicsPixmapItem__ShapeMode = QGraphicsPixmapItem__ShapeMode(2)
)

//go:generate stringer -type=QGraphicsPixmapItem__anonymous
//QGraphicsPixmapItem::anonymous
type QGraphicsPixmapItem__anonymous int64

const (
	QGraphicsPixmapItem__Type QGraphicsPixmapItem__anonymous = QGraphicsPixmapItem__anonymous(7)
)

func NewQGraphicsPixmapItem(parent QGraphicsItem_ITF) *QGraphicsPixmapItem {
	return NewQGraphicsPixmapItemFromPointer(C.QGraphicsPixmapItem_NewQGraphicsPixmapItem(PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsPixmapItem2(pixmap gui.QPixmap_ITF, parent QGraphicsItem_ITF) *QGraphicsPixmapItem {
	return NewQGraphicsPixmapItemFromPointer(C.QGraphicsPixmapItem_NewQGraphicsPixmapItem2(gui.PointerFromQPixmap(pixmap), PointerFromQGraphicsItem(parent)))
}

//export callbackQGraphicsPixmapItem_Paint
func callbackQGraphicsPixmapItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsPixmapItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsPixmapItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPixmapItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsPixmapItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsPixmapItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsPixmapItem) SetOffset(offset core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_SetOffset(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QGraphicsPixmapItem) SetOffset2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_SetOffset2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QGraphicsPixmapItem) SetPixmap(pixmap gui.QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_SetPixmap(ptr.Pointer(), gui.PointerFromQPixmap(pixmap))
	}
}

func (ptr *QGraphicsPixmapItem) SetShapeMode(mode QGraphicsPixmapItem__ShapeMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_SetShapeMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QGraphicsPixmapItem) SetTransformationMode(mode core.Qt__TransformationMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_SetTransformationMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQGraphicsPixmapItem_DestroyQGraphicsPixmapItem
func callbackQGraphicsPixmapItem_DestroyQGraphicsPixmapItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsPixmapItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsPixmapItemFromPointer(ptr).DestroyQGraphicsPixmapItemDefault()
	}
}

func (ptr *QGraphicsPixmapItem) ConnectDestroyQGraphicsPixmapItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsPixmapItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsPixmapItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsPixmapItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPixmapItem) DisconnectDestroyQGraphicsPixmapItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsPixmapItem")
	}
}

func (ptr *QGraphicsPixmapItem) DestroyQGraphicsPixmapItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_DestroyQGraphicsPixmapItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsPixmapItem) DestroyQGraphicsPixmapItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsPixmapItem_DestroyQGraphicsPixmapItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsPixmapItem) ShapeMode() QGraphicsPixmapItem__ShapeMode {
	if ptr.Pointer() != nil {
		return QGraphicsPixmapItem__ShapeMode(C.QGraphicsPixmapItem_ShapeMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsPixmapItem) Pixmap() *gui.QPixmap {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPixmapFromPointer(C.QGraphicsPixmapItem_Pixmap(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsPixmapItem) Offset() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsPixmapItem_Offset(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsPixmapItem_BoundingRect
func callbackQGraphicsPixmapItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsPixmapItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsPixmapItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPixmapItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsPixmapItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsPixmapItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsPixmapItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsPixmapItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsPixmapItem) TransformationMode() core.Qt__TransformationMode {
	if ptr.Pointer() != nil {
		return core.Qt__TransformationMode(C.QGraphicsPixmapItem_TransformationMode(ptr.Pointer()))
	}
	return 0
}

type QGraphicsPolygonItem struct {
	QAbstractGraphicsShapeItem
}

type QGraphicsPolygonItem_ITF interface {
	QAbstractGraphicsShapeItem_ITF
	QGraphicsPolygonItem_PTR() *QGraphicsPolygonItem
}

func (ptr *QGraphicsPolygonItem) QGraphicsPolygonItem_PTR() *QGraphicsPolygonItem {
	return ptr
}

func (ptr *QGraphicsPolygonItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractGraphicsShapeItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsPolygonItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractGraphicsShapeItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsPolygonItem(ptr QGraphicsPolygonItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsPolygonItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsPolygonItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsPolygonItem) {
	n = new(QGraphicsPolygonItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsPolygonItem__anonymous
//QGraphicsPolygonItem::anonymous
type QGraphicsPolygonItem__anonymous int64

const (
	QGraphicsPolygonItem__Type QGraphicsPolygonItem__anonymous = QGraphicsPolygonItem__anonymous(5)
)

func NewQGraphicsPolygonItem(parent QGraphicsItem_ITF) *QGraphicsPolygonItem {
	return NewQGraphicsPolygonItemFromPointer(C.QGraphicsPolygonItem_NewQGraphicsPolygonItem(PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsPolygonItem2(polygon gui.QPolygonF_ITF, parent QGraphicsItem_ITF) *QGraphicsPolygonItem {
	return NewQGraphicsPolygonItemFromPointer(C.QGraphicsPolygonItem_NewQGraphicsPolygonItem2(gui.PointerFromQPolygonF(polygon), PointerFromQGraphicsItem(parent)))
}

//export callbackQGraphicsPolygonItem_Paint
func callbackQGraphicsPolygonItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsPolygonItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsPolygonItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPolygonItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsPolygonItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPolygonItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsPolygonItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPolygonItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsPolygonItem) SetFillRule(rule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QGraphicsPolygonItem_SetFillRule(ptr.Pointer(), C.longlong(rule))
	}
}

func (ptr *QGraphicsPolygonItem) SetPolygon(polygon gui.QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsPolygonItem_SetPolygon(ptr.Pointer(), gui.PointerFromQPolygonF(polygon))
	}
}

//export callbackQGraphicsPolygonItem_DestroyQGraphicsPolygonItem
func callbackQGraphicsPolygonItem_DestroyQGraphicsPolygonItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsPolygonItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsPolygonItemFromPointer(ptr).DestroyQGraphicsPolygonItemDefault()
	}
}

func (ptr *QGraphicsPolygonItem) ConnectDestroyQGraphicsPolygonItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsPolygonItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsPolygonItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsPolygonItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPolygonItem) DisconnectDestroyQGraphicsPolygonItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsPolygonItem")
	}
}

func (ptr *QGraphicsPolygonItem) DestroyQGraphicsPolygonItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsPolygonItem_DestroyQGraphicsPolygonItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsPolygonItem) DestroyQGraphicsPolygonItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsPolygonItem_DestroyQGraphicsPolygonItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsPolygonItem) Polygon() *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsPolygonItem_Polygon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsPolygonItem_BoundingRect
func callbackQGraphicsPolygonItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsPolygonItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsPolygonItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsPolygonItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsPolygonItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsPolygonItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsPolygonItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsPolygonItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsPolygonItem) FillRule() core.Qt__FillRule {
	if ptr.Pointer() != nil {
		return core.Qt__FillRule(C.QGraphicsPolygonItem_FillRule(ptr.Pointer()))
	}
	return 0
}

type QGraphicsProxyWidget struct {
	QGraphicsWidget
}

type QGraphicsProxyWidget_ITF interface {
	QGraphicsWidget_ITF
	QGraphicsProxyWidget_PTR() *QGraphicsProxyWidget
}

func (ptr *QGraphicsProxyWidget) QGraphicsProxyWidget_PTR() *QGraphicsProxyWidget {
	return ptr
}

func (ptr *QGraphicsProxyWidget) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsWidget_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsProxyWidget) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsWidget_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsProxyWidget(ptr QGraphicsProxyWidget_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsProxyWidget_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsProxyWidgetFromPointer(ptr unsafe.Pointer) (n *QGraphicsProxyWidget) {
	n = new(QGraphicsProxyWidget)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsProxyWidget__anonymous
//QGraphicsProxyWidget::anonymous
type QGraphicsProxyWidget__anonymous int64

const (
	QGraphicsProxyWidget__Type QGraphicsProxyWidget__anonymous = QGraphicsProxyWidget__anonymous(12)
)

func (ptr *QGraphicsProxyWidget) CreateProxyForChildWidget(child QWidget_ITF) *QGraphicsProxyWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsProxyWidgetFromPointer(C.QGraphicsProxyWidget_CreateProxyForChildWidget(ptr.Pointer(), PointerFromQWidget(child)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsProxyWidget_NewProxyWidget
func callbackQGraphicsProxyWidget_NewProxyWidget(ptr unsafe.Pointer, child unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "newProxyWidget"); signal != nil {
		return PointerFromQGraphicsProxyWidget((*(*func(*QWidget) *QGraphicsProxyWidget)(signal))(NewQWidgetFromPointer(child)))
	}

	return PointerFromQGraphicsProxyWidget(NewQGraphicsProxyWidgetFromPointer(ptr).NewProxyWidgetDefault(NewQWidgetFromPointer(child)))
}

func (ptr *QGraphicsProxyWidget) ConnectNewProxyWidget(f func(child *QWidget) *QGraphicsProxyWidget) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "newProxyWidget"); signal != nil {
			f := func(child *QWidget) *QGraphicsProxyWidget {
				(*(*func(*QWidget) *QGraphicsProxyWidget)(signal))(child)
				return f(child)
			}
			qt.ConnectSignal(ptr.Pointer(), "newProxyWidget", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "newProxyWidget", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsProxyWidget) DisconnectNewProxyWidget() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "newProxyWidget")
	}
}

func (ptr *QGraphicsProxyWidget) NewProxyWidget(child QWidget_ITF) *QGraphicsProxyWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsProxyWidgetFromPointer(C.QGraphicsProxyWidget_NewProxyWidget(ptr.Pointer(), PointerFromQWidget(child)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsProxyWidget) NewProxyWidgetDefault(child QWidget_ITF) *QGraphicsProxyWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsProxyWidgetFromPointer(C.QGraphicsProxyWidget_NewProxyWidgetDefault(ptr.Pointer(), PointerFromQWidget(child)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func NewQGraphicsProxyWidget(parent QGraphicsItem_ITF, wFlags core.Qt__WindowType) *QGraphicsProxyWidget {
	tmpValue := NewQGraphicsProxyWidgetFromPointer(C.QGraphicsProxyWidget_NewQGraphicsProxyWidget(PointerFromQGraphicsItem(parent), C.longlong(wFlags)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGraphicsProxyWidget) SetWidget(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsProxyWidget_SetWidget(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

//export callbackQGraphicsProxyWidget_DestroyQGraphicsProxyWidget
func callbackQGraphicsProxyWidget_DestroyQGraphicsProxyWidget(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsProxyWidget"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsProxyWidgetFromPointer(ptr).DestroyQGraphicsProxyWidgetDefault()
	}
}

func (ptr *QGraphicsProxyWidget) ConnectDestroyQGraphicsProxyWidget(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsProxyWidget"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsProxyWidget", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsProxyWidget", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsProxyWidget) DisconnectDestroyQGraphicsProxyWidget() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsProxyWidget")
	}
}

func (ptr *QGraphicsProxyWidget) DestroyQGraphicsProxyWidget() {
	if ptr.Pointer() != nil {
		C.QGraphicsProxyWidget_DestroyQGraphicsProxyWidget(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsProxyWidget) DestroyQGraphicsProxyWidgetDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsProxyWidget_DestroyQGraphicsProxyWidgetDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsProxyWidget) SubWidgetRect(widget QWidget_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsProxyWidget_SubWidgetRect(ptr.Pointer(), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsProxyWidget) Widget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QGraphicsProxyWidget_Widget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

type QGraphicsRectItem struct {
	QAbstractGraphicsShapeItem
}

type QGraphicsRectItem_ITF interface {
	QAbstractGraphicsShapeItem_ITF
	QGraphicsRectItem_PTR() *QGraphicsRectItem
}

func (ptr *QGraphicsRectItem) QGraphicsRectItem_PTR() *QGraphicsRectItem {
	return ptr
}

func (ptr *QGraphicsRectItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractGraphicsShapeItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsRectItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractGraphicsShapeItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsRectItem(ptr QGraphicsRectItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsRectItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsRectItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsRectItem) {
	n = new(QGraphicsRectItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsRectItem__anonymous
//QGraphicsRectItem::anonymous
type QGraphicsRectItem__anonymous int64

const (
	QGraphicsRectItem__Type QGraphicsRectItem__anonymous = QGraphicsRectItem__anonymous(3)
)

func NewQGraphicsRectItem(parent QGraphicsItem_ITF) *QGraphicsRectItem {
	return NewQGraphicsRectItemFromPointer(C.QGraphicsRectItem_NewQGraphicsRectItem(PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsRectItem2(rect core.QRectF_ITF, parent QGraphicsItem_ITF) *QGraphicsRectItem {
	return NewQGraphicsRectItemFromPointer(C.QGraphicsRectItem_NewQGraphicsRectItem2(core.PointerFromQRectF(rect), PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsRectItem3(x float64, y float64, width float64, height float64, parent QGraphicsItem_ITF) *QGraphicsRectItem {
	return NewQGraphicsRectItemFromPointer(C.QGraphicsRectItem_NewQGraphicsRectItem3(C.double(x), C.double(y), C.double(width), C.double(height), PointerFromQGraphicsItem(parent)))
}

//export callbackQGraphicsRectItem_Paint
func callbackQGraphicsRectItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsRectItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsRectItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsRectItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsRectItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsRectItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsRectItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsRectItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsRectItem) SetRect(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsRectItem_SetRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QGraphicsRectItem) SetRect2(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsRectItem_SetRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

//export callbackQGraphicsRectItem_DestroyQGraphicsRectItem
func callbackQGraphicsRectItem_DestroyQGraphicsRectItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsRectItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsRectItemFromPointer(ptr).DestroyQGraphicsRectItemDefault()
	}
}

func (ptr *QGraphicsRectItem) ConnectDestroyQGraphicsRectItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsRectItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsRectItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsRectItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsRectItem) DisconnectDestroyQGraphicsRectItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsRectItem")
	}
}

func (ptr *QGraphicsRectItem) DestroyQGraphicsRectItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsRectItem_DestroyQGraphicsRectItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsRectItem) DestroyQGraphicsRectItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsRectItem_DestroyQGraphicsRectItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsRectItem_BoundingRect
func callbackQGraphicsRectItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsRectItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsRectItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsRectItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsRectItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsRectItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsRectItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsRectItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsRectItem) Rect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsRectItem_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

type QGraphicsScene struct {
	core.QObject
}

type QGraphicsScene_ITF interface {
	core.QObject_ITF
	QGraphicsScene_PTR() *QGraphicsScene
}

func (ptr *QGraphicsScene) QGraphicsScene_PTR() *QGraphicsScene {
	return ptr
}

func (ptr *QGraphicsScene) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsScene) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsScene(ptr QGraphicsScene_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsScene_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneFromPointer(ptr unsafe.Pointer) (n *QGraphicsScene) {
	n = new(QGraphicsScene)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsScene__ItemIndexMethod
//QGraphicsScene::ItemIndexMethod
type QGraphicsScene__ItemIndexMethod int64

const (
	QGraphicsScene__BspTreeIndex QGraphicsScene__ItemIndexMethod = QGraphicsScene__ItemIndexMethod(0)
	QGraphicsScene__NoIndex      QGraphicsScene__ItemIndexMethod = QGraphicsScene__ItemIndexMethod(-1)
)

//go:generate stringer -type=QGraphicsScene__SceneLayer
//QGraphicsScene::SceneLayer
type QGraphicsScene__SceneLayer int64

const (
	QGraphicsScene__ItemLayer       QGraphicsScene__SceneLayer = QGraphicsScene__SceneLayer(0x1)
	QGraphicsScene__BackgroundLayer QGraphicsScene__SceneLayer = QGraphicsScene__SceneLayer(0x2)
	QGraphicsScene__ForegroundLayer QGraphicsScene__SceneLayer = QGraphicsScene__SceneLayer(0x4)
	QGraphicsScene__AllLayers       QGraphicsScene__SceneLayer = QGraphicsScene__SceneLayer(0xffff)
)

func (ptr *QGraphicsScene) AddEllipse(rect core.QRectF_ITF, pen gui.QPen_ITF, brush gui.QBrush_ITF) *QGraphicsEllipseItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsEllipseItemFromPointer(C.QGraphicsScene_AddEllipse(ptr.Pointer(), core.PointerFromQRectF(rect), gui.PointerFromQPen(pen), gui.PointerFromQBrush(brush)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddEllipse2(x float64, y float64, w float64, h float64, pen gui.QPen_ITF, brush gui.QBrush_ITF) *QGraphicsEllipseItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsEllipseItemFromPointer(C.QGraphicsScene_AddEllipse2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), gui.PointerFromQPen(pen), gui.PointerFromQBrush(brush)))
	}
	return nil
}

func (ptr *QGraphicsScene) CreateItemGroup(items []*QGraphicsItem) *QGraphicsItemGroup {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemGroupFromPointer(C.QGraphicsScene_CreateItemGroup(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQGraphicsSceneFromPointer(NewQGraphicsSceneFromPointer(nil).__createItemGroup_items_newList())
			for _, v := range items {
				tmpList.__createItemGroup_items_setList(v)
			}
			return tmpList.Pointer()
		}()))
	}
	return nil
}

func (ptr *QGraphicsScene) AddLine(line core.QLineF_ITF, pen gui.QPen_ITF) *QGraphicsLineItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsLineItemFromPointer(C.QGraphicsScene_AddLine(ptr.Pointer(), core.PointerFromQLineF(line), gui.PointerFromQPen(pen)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddLine2(x1 float64, y1 float64, x2 float64, y2 float64, pen gui.QPen_ITF) *QGraphicsLineItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsLineItemFromPointer(C.QGraphicsScene_AddLine2(ptr.Pointer(), C.double(x1), C.double(y1), C.double(x2), C.double(y2), gui.PointerFromQPen(pen)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddPath(path gui.QPainterPath_ITF, pen gui.QPen_ITF, brush gui.QBrush_ITF) *QGraphicsPathItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsPathItemFromPointer(C.QGraphicsScene_AddPath(ptr.Pointer(), gui.PointerFromQPainterPath(path), gui.PointerFromQPen(pen), gui.PointerFromQBrush(brush)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddPixmap(pixmap gui.QPixmap_ITF) *QGraphicsPixmapItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsPixmapItemFromPointer(C.QGraphicsScene_AddPixmap(ptr.Pointer(), gui.PointerFromQPixmap(pixmap)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddPolygon(polygon gui.QPolygonF_ITF, pen gui.QPen_ITF, brush gui.QBrush_ITF) *QGraphicsPolygonItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsPolygonItemFromPointer(C.QGraphicsScene_AddPolygon(ptr.Pointer(), gui.PointerFromQPolygonF(polygon), gui.PointerFromQPen(pen), gui.PointerFromQBrush(brush)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddWidget(widget QWidget_ITF, wFlags core.Qt__WindowType) *QGraphicsProxyWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsProxyWidgetFromPointer(C.QGraphicsScene_AddWidget(ptr.Pointer(), PointerFromQWidget(widget), C.longlong(wFlags)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) AddRect(rect core.QRectF_ITF, pen gui.QPen_ITF, brush gui.QBrush_ITF) *QGraphicsRectItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsRectItemFromPointer(C.QGraphicsScene_AddRect(ptr.Pointer(), core.PointerFromQRectF(rect), gui.PointerFromQPen(pen), gui.PointerFromQBrush(brush)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddRect2(x float64, y float64, w float64, h float64, pen gui.QPen_ITF, brush gui.QBrush_ITF) *QGraphicsRectItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsRectItemFromPointer(C.QGraphicsScene_AddRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), gui.PointerFromQPen(pen), gui.PointerFromQBrush(brush)))
	}
	return nil
}

func NewQGraphicsScene(parent core.QObject_ITF) *QGraphicsScene {
	tmpValue := NewQGraphicsSceneFromPointer(C.QGraphicsScene_NewQGraphicsScene(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQGraphicsScene2(sceneRect core.QRectF_ITF, parent core.QObject_ITF) *QGraphicsScene {
	tmpValue := NewQGraphicsSceneFromPointer(C.QGraphicsScene_NewQGraphicsScene2(core.PointerFromQRectF(sceneRect), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQGraphicsScene3(x float64, y float64, width float64, height float64, parent core.QObject_ITF) *QGraphicsScene {
	tmpValue := NewQGraphicsSceneFromPointer(C.QGraphicsScene_NewQGraphicsScene3(C.double(x), C.double(y), C.double(width), C.double(height), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGraphicsScene) AddSimpleText(text string, font gui.QFont_ITF) *QGraphicsSimpleTextItem {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		return NewQGraphicsSimpleTextItemFromPointer(C.QGraphicsScene_AddSimpleText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, gui.PointerFromQFont(font)))
	}
	return nil
}

func (ptr *QGraphicsScene) AddText(text string, font gui.QFont_ITF) *QGraphicsTextItem {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQGraphicsTextItemFromPointer(C.QGraphicsScene_AddText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, gui.PointerFromQFont(font)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func QGraphicsScene_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsScene_QGraphicsScene_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QGraphicsScene) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsScene_QGraphicsScene_Tr(sC, cC, C.int(int32(n))))
}

//export callbackQGraphicsScene_Event
func callbackQGraphicsScene_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsSceneFromPointer(ptr).EventDefault(core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsScene) EventDefault(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_EventDefault(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQGraphicsScene_EventFilter
func callbackQGraphicsScene_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsSceneFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsScene) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQGraphicsScene_FocusNextPrevChild
func callbackQGraphicsScene_FocusNextPrevChild(ptr unsafe.Pointer, next C.char) C.char {
	if signal := qt.GetSignal(ptr, "focusNextPrevChild"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(bool) bool)(signal))(int8(next) != 0))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsSceneFromPointer(ptr).FocusNextPrevChildDefault(int8(next) != 0))))
}

func (ptr *QGraphicsScene) ConnectFocusNextPrevChild(f func(next bool) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusNextPrevChild"); signal != nil {
			f := func(next bool) bool {
				(*(*func(bool) bool)(signal))(next)
				return f(next)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusNextPrevChild", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusNextPrevChild", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectFocusNextPrevChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusNextPrevChild")
	}
}

func (ptr *QGraphicsScene) FocusNextPrevChild(next bool) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_FocusNextPrevChild(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next))))) != 0
	}
	return false
}

func (ptr *QGraphicsScene) FocusNextPrevChildDefault(next bool) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_FocusNextPrevChildDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next))))) != 0
	}
	return false
}

func (ptr *QGraphicsScene) SendEvent(item QGraphicsItem_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_SendEvent(ptr.Pointer(), PointerFromQGraphicsItem(item), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QGraphicsScene) AddItem(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_AddItem(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

//export callbackQGraphicsScene_Advance
func callbackQGraphicsScene_Advance(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "advance"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneFromPointer(ptr).AdvanceDefault()
	}
}

func (ptr *QGraphicsScene) ConnectAdvance(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "advance"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "advance", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "advance", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectAdvance() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "advance")
	}
}

func (ptr *QGraphicsScene) Advance() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Advance(ptr.Pointer())
	}
}

func (ptr *QGraphicsScene) AdvanceDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_AdvanceDefault(ptr.Pointer())
	}
}

//export callbackQGraphicsScene_Changed
func callbackQGraphicsScene_Changed(ptr unsafe.Pointer, region C.struct_QtWidgets_PackedList) {
	if signal := qt.GetSignal(ptr, "changed"); signal != nil {
		(*(*func([]*core.QRectF))(signal))(func(l C.struct_QtWidgets_PackedList) []*core.QRectF {
			out := make([]*core.QRectF, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__changed_region_atList(i)
			}
			return out
		}(region))
	}

}

func (ptr *QGraphicsScene) ConnectChanged(f func(region []*core.QRectF)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "changed") {
			C.QGraphicsScene_ConnectChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "changed")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "changed"); signal != nil {
			f := func(region []*core.QRectF) {
				(*(*func([]*core.QRectF))(signal))(region)
				f(region)
			}
			qt.ConnectSignal(ptr.Pointer(), "changed", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "changed", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "changed")
	}
}

func (ptr *QGraphicsScene) Changed(region []*core.QRectF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Changed(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQGraphicsSceneFromPointer(NewQGraphicsSceneFromPointer(nil).__changed_region_newList())
			for _, v := range region {
				tmpList.__changed_region_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

//export callbackQGraphicsScene_Clear
func callbackQGraphicsScene_Clear(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "clear"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneFromPointer(ptr).ClearDefault()
	}
}

func (ptr *QGraphicsScene) ConnectClear(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "clear"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "clear", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "clear", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectClear() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "clear")
	}
}

func (ptr *QGraphicsScene) Clear() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Clear(ptr.Pointer())
	}
}

func (ptr *QGraphicsScene) ClearDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ClearDefault(ptr.Pointer())
	}
}

func (ptr *QGraphicsScene) ClearFocus() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ClearFocus(ptr.Pointer())
	}
}

//export callbackQGraphicsScene_ClearSelection
func callbackQGraphicsScene_ClearSelection(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "clearSelection"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneFromPointer(ptr).ClearSelectionDefault()
	}
}

func (ptr *QGraphicsScene) ConnectClearSelection(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "clearSelection"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "clearSelection", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "clearSelection", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectClearSelection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "clearSelection")
	}
}

func (ptr *QGraphicsScene) ClearSelection() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ClearSelection(ptr.Pointer())
	}
}

func (ptr *QGraphicsScene) ClearSelectionDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ClearSelectionDefault(ptr.Pointer())
	}
}

//export callbackQGraphicsScene_ContextMenuEvent
func callbackQGraphicsScene_ContextMenuEvent(ptr unsafe.Pointer, contextMenuEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "contextMenuEvent"); signal != nil {
		(*(*func(*QGraphicsSceneContextMenuEvent))(signal))(NewQGraphicsSceneContextMenuEventFromPointer(contextMenuEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).ContextMenuEventDefault(NewQGraphicsSceneContextMenuEventFromPointer(contextMenuEvent))
	}
}

func (ptr *QGraphicsScene) ConnectContextMenuEvent(f func(contextMenuEvent *QGraphicsSceneContextMenuEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "contextMenuEvent"); signal != nil {
			f := func(contextMenuEvent *QGraphicsSceneContextMenuEvent) {
				(*(*func(*QGraphicsSceneContextMenuEvent))(signal))(contextMenuEvent)
				f(contextMenuEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "contextMenuEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "contextMenuEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectContextMenuEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "contextMenuEvent")
	}
}

func (ptr *QGraphicsScene) ContextMenuEvent(contextMenuEvent QGraphicsSceneContextMenuEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ContextMenuEvent(ptr.Pointer(), PointerFromQGraphicsSceneContextMenuEvent(contextMenuEvent))
	}
}

func (ptr *QGraphicsScene) ContextMenuEventDefault(contextMenuEvent QGraphicsSceneContextMenuEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ContextMenuEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneContextMenuEvent(contextMenuEvent))
	}
}

func (ptr *QGraphicsScene) DestroyItemGroup(group QGraphicsItemGroup_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DestroyItemGroup(ptr.Pointer(), PointerFromQGraphicsItemGroup(group))
	}
}

//export callbackQGraphicsScene_DragEnterEvent
func callbackQGraphicsScene_DragEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragEnterEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).DragEnterEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) ConnectDragEnterEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragEnterEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragEnterEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragEnterEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectDragEnterEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragEnterEvent")
	}
}

func (ptr *QGraphicsScene) DragEnterEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DragEnterEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsScene) DragEnterEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DragEnterEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsScene_DragLeaveEvent
func callbackQGraphicsScene_DragLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragLeaveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).DragLeaveEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) ConnectDragLeaveEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragLeaveEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragLeaveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragLeaveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectDragLeaveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragLeaveEvent")
	}
}

func (ptr *QGraphicsScene) DragLeaveEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DragLeaveEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsScene) DragLeaveEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DragLeaveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsScene_DragMoveEvent
func callbackQGraphicsScene_DragMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragMoveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).DragMoveEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) ConnectDragMoveEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragMoveEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectDragMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragMoveEvent")
	}
}

func (ptr *QGraphicsScene) DragMoveEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DragMoveEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsScene) DragMoveEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DragMoveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsScene_DrawBackground
func callbackQGraphicsScene_DrawBackground(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawBackground"); signal != nil {
		(*(*func(*gui.QPainter, *core.QRectF))(signal))(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	} else {
		NewQGraphicsSceneFromPointer(ptr).DrawBackgroundDefault(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QGraphicsScene) ConnectDrawBackground(f func(painter *gui.QPainter, rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawBackground"); signal != nil {
			f := func(painter *gui.QPainter, rect *core.QRectF) {
				(*(*func(*gui.QPainter, *core.QRectF))(signal))(painter, rect)
				f(painter, rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawBackground", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawBackground", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectDrawBackground() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawBackground")
	}
}

func (ptr *QGraphicsScene) DrawBackground(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DrawBackground(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsScene) DrawBackgroundDefault(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DrawBackgroundDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

//export callbackQGraphicsScene_DrawForeground
func callbackQGraphicsScene_DrawForeground(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawForeground"); signal != nil {
		(*(*func(*gui.QPainter, *core.QRectF))(signal))(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	} else {
		NewQGraphicsSceneFromPointer(ptr).DrawForegroundDefault(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QGraphicsScene) ConnectDrawForeground(f func(painter *gui.QPainter, rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawForeground"); signal != nil {
			f := func(painter *gui.QPainter, rect *core.QRectF) {
				(*(*func(*gui.QPainter, *core.QRectF))(signal))(painter, rect)
				f(painter, rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawForeground", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawForeground", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectDrawForeground() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawForeground")
	}
}

func (ptr *QGraphicsScene) DrawForeground(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DrawForeground(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsScene) DrawForegroundDefault(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DrawForegroundDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

//export callbackQGraphicsScene_DropEvent
func callbackQGraphicsScene_DropEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dropEvent"); signal != nil {
		(*(*func(*QGraphicsSceneDragDropEvent))(signal))(NewQGraphicsSceneDragDropEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).DropEventDefault(NewQGraphicsSceneDragDropEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) ConnectDropEvent(f func(event *QGraphicsSceneDragDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dropEvent"); signal != nil {
			f := func(event *QGraphicsSceneDragDropEvent) {
				(*(*func(*QGraphicsSceneDragDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dropEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dropEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectDropEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dropEvent")
	}
}

func (ptr *QGraphicsScene) DropEvent(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DropEvent(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

func (ptr *QGraphicsScene) DropEventDefault(event QGraphicsSceneDragDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DropEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneDragDropEvent(event))
	}
}

//export callbackQGraphicsScene_FocusInEvent
func callbackQGraphicsScene_FocusInEvent(ptr unsafe.Pointer, focusEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusInEvent"); signal != nil {
		(*(*func(*gui.QFocusEvent))(signal))(gui.NewQFocusEventFromPointer(focusEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).FocusInEventDefault(gui.NewQFocusEventFromPointer(focusEvent))
	}
}

func (ptr *QGraphicsScene) ConnectFocusInEvent(f func(focusEvent *gui.QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusInEvent"); signal != nil {
			f := func(focusEvent *gui.QFocusEvent) {
				(*(*func(*gui.QFocusEvent))(signal))(focusEvent)
				f(focusEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusInEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusInEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectFocusInEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusInEvent")
	}
}

func (ptr *QGraphicsScene) FocusInEvent(focusEvent gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_FocusInEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(focusEvent))
	}
}

func (ptr *QGraphicsScene) FocusInEventDefault(focusEvent gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_FocusInEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(focusEvent))
	}
}

//export callbackQGraphicsScene_FocusItemChanged
func callbackQGraphicsScene_FocusItemChanged(ptr unsafe.Pointer, newFocusItem unsafe.Pointer, oldFocusItem unsafe.Pointer, reason C.longlong) {
	if signal := qt.GetSignal(ptr, "focusItemChanged"); signal != nil {
		(*(*func(*QGraphicsItem, *QGraphicsItem, core.Qt__FocusReason))(signal))(NewQGraphicsItemFromPointer(newFocusItem), NewQGraphicsItemFromPointer(oldFocusItem), core.Qt__FocusReason(reason))
	}

}

func (ptr *QGraphicsScene) ConnectFocusItemChanged(f func(newFocusItem *QGraphicsItem, oldFocusItem *QGraphicsItem, reason core.Qt__FocusReason)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "focusItemChanged") {
			C.QGraphicsScene_ConnectFocusItemChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "focusItemChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "focusItemChanged"); signal != nil {
			f := func(newFocusItem *QGraphicsItem, oldFocusItem *QGraphicsItem, reason core.Qt__FocusReason) {
				(*(*func(*QGraphicsItem, *QGraphicsItem, core.Qt__FocusReason))(signal))(newFocusItem, oldFocusItem, reason)
				f(newFocusItem, oldFocusItem, reason)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusItemChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusItemChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectFocusItemChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DisconnectFocusItemChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "focusItemChanged")
	}
}

func (ptr *QGraphicsScene) FocusItemChanged(newFocusItem QGraphicsItem_ITF, oldFocusItem QGraphicsItem_ITF, reason core.Qt__FocusReason) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_FocusItemChanged(ptr.Pointer(), PointerFromQGraphicsItem(newFocusItem), PointerFromQGraphicsItem(oldFocusItem), C.longlong(reason))
	}
}

//export callbackQGraphicsScene_FocusOutEvent
func callbackQGraphicsScene_FocusOutEvent(ptr unsafe.Pointer, focusEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusOutEvent"); signal != nil {
		(*(*func(*gui.QFocusEvent))(signal))(gui.NewQFocusEventFromPointer(focusEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).FocusOutEventDefault(gui.NewQFocusEventFromPointer(focusEvent))
	}
}

func (ptr *QGraphicsScene) ConnectFocusOutEvent(f func(focusEvent *gui.QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusOutEvent"); signal != nil {
			f := func(focusEvent *gui.QFocusEvent) {
				(*(*func(*gui.QFocusEvent))(signal))(focusEvent)
				f(focusEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusOutEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusOutEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectFocusOutEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusOutEvent")
	}
}

func (ptr *QGraphicsScene) FocusOutEvent(focusEvent gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_FocusOutEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(focusEvent))
	}
}

func (ptr *QGraphicsScene) FocusOutEventDefault(focusEvent gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_FocusOutEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(focusEvent))
	}
}

//export callbackQGraphicsScene_HelpEvent
func callbackQGraphicsScene_HelpEvent(ptr unsafe.Pointer, helpEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "helpEvent"); signal != nil {
		(*(*func(*QGraphicsSceneHelpEvent))(signal))(NewQGraphicsSceneHelpEventFromPointer(helpEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).HelpEventDefault(NewQGraphicsSceneHelpEventFromPointer(helpEvent))
	}
}

func (ptr *QGraphicsScene) ConnectHelpEvent(f func(helpEvent *QGraphicsSceneHelpEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "helpEvent"); signal != nil {
			f := func(helpEvent *QGraphicsSceneHelpEvent) {
				(*(*func(*QGraphicsSceneHelpEvent))(signal))(helpEvent)
				f(helpEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "helpEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "helpEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectHelpEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "helpEvent")
	}
}

func (ptr *QGraphicsScene) HelpEvent(helpEvent QGraphicsSceneHelpEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_HelpEvent(ptr.Pointer(), PointerFromQGraphicsSceneHelpEvent(helpEvent))
	}
}

func (ptr *QGraphicsScene) HelpEventDefault(helpEvent QGraphicsSceneHelpEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_HelpEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneHelpEvent(helpEvent))
	}
}

//export callbackQGraphicsScene_InputMethodEvent
func callbackQGraphicsScene_InputMethodEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "inputMethodEvent"); signal != nil {
		(*(*func(*gui.QInputMethodEvent))(signal))(gui.NewQInputMethodEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).InputMethodEventDefault(gui.NewQInputMethodEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) ConnectInputMethodEvent(f func(event *gui.QInputMethodEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "inputMethodEvent"); signal != nil {
			f := func(event *gui.QInputMethodEvent) {
				(*(*func(*gui.QInputMethodEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "inputMethodEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "inputMethodEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectInputMethodEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "inputMethodEvent")
	}
}

func (ptr *QGraphicsScene) InputMethodEvent(event gui.QInputMethodEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_InputMethodEvent(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QGraphicsScene) InputMethodEventDefault(event gui.QInputMethodEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_InputMethodEventDefault(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

//export callbackQGraphicsScene_Invalidate
func callbackQGraphicsScene_Invalidate(ptr unsafe.Pointer, rect unsafe.Pointer, layers C.longlong) {
	if signal := qt.GetSignal(ptr, "invalidate"); signal != nil {
		(*(*func(*core.QRectF, QGraphicsScene__SceneLayer))(signal))(core.NewQRectFFromPointer(rect), QGraphicsScene__SceneLayer(layers))
	} else {
		NewQGraphicsSceneFromPointer(ptr).InvalidateDefault(core.NewQRectFFromPointer(rect), QGraphicsScene__SceneLayer(layers))
	}
}

func (ptr *QGraphicsScene) ConnectInvalidate(f func(rect *core.QRectF, layers QGraphicsScene__SceneLayer)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "invalidate"); signal != nil {
			f := func(rect *core.QRectF, layers QGraphicsScene__SceneLayer) {
				(*(*func(*core.QRectF, QGraphicsScene__SceneLayer))(signal))(rect, layers)
				f(rect, layers)
			}
			qt.ConnectSignal(ptr.Pointer(), "invalidate", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "invalidate", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectInvalidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "invalidate")
	}
}

func (ptr *QGraphicsScene) Invalidate(rect core.QRectF_ITF, layers QGraphicsScene__SceneLayer) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Invalidate(ptr.Pointer(), core.PointerFromQRectF(rect), C.longlong(layers))
	}
}

func (ptr *QGraphicsScene) InvalidateDefault(rect core.QRectF_ITF, layers QGraphicsScene__SceneLayer) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_InvalidateDefault(ptr.Pointer(), core.PointerFromQRectF(rect), C.longlong(layers))
	}
}

func (ptr *QGraphicsScene) Invalidate2(x float64, y float64, w float64, h float64, layers QGraphicsScene__SceneLayer) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Invalidate2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.longlong(layers))
	}
}

//export callbackQGraphicsScene_KeyPressEvent
func callbackQGraphicsScene_KeyPressEvent(ptr unsafe.Pointer, keyEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "keyPressEvent"); signal != nil {
		(*(*func(*gui.QKeyEvent))(signal))(gui.NewQKeyEventFromPointer(keyEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).KeyPressEventDefault(gui.NewQKeyEventFromPointer(keyEvent))
	}
}

func (ptr *QGraphicsScene) ConnectKeyPressEvent(f func(keyEvent *gui.QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "keyPressEvent"); signal != nil {
			f := func(keyEvent *gui.QKeyEvent) {
				(*(*func(*gui.QKeyEvent))(signal))(keyEvent)
				f(keyEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "keyPressEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "keyPressEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectKeyPressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "keyPressEvent")
	}
}

func (ptr *QGraphicsScene) KeyPressEvent(keyEvent gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_KeyPressEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(keyEvent))
	}
}

func (ptr *QGraphicsScene) KeyPressEventDefault(keyEvent gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_KeyPressEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(keyEvent))
	}
}

//export callbackQGraphicsScene_KeyReleaseEvent
func callbackQGraphicsScene_KeyReleaseEvent(ptr unsafe.Pointer, keyEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "keyReleaseEvent"); signal != nil {
		(*(*func(*gui.QKeyEvent))(signal))(gui.NewQKeyEventFromPointer(keyEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).KeyReleaseEventDefault(gui.NewQKeyEventFromPointer(keyEvent))
	}
}

func (ptr *QGraphicsScene) ConnectKeyReleaseEvent(f func(keyEvent *gui.QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "keyReleaseEvent"); signal != nil {
			f := func(keyEvent *gui.QKeyEvent) {
				(*(*func(*gui.QKeyEvent))(signal))(keyEvent)
				f(keyEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "keyReleaseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "keyReleaseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectKeyReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "keyReleaseEvent")
	}
}

func (ptr *QGraphicsScene) KeyReleaseEvent(keyEvent gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_KeyReleaseEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(keyEvent))
	}
}

func (ptr *QGraphicsScene) KeyReleaseEventDefault(keyEvent gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_KeyReleaseEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(keyEvent))
	}
}

//export callbackQGraphicsScene_MouseDoubleClickEvent
func callbackQGraphicsScene_MouseDoubleClickEvent(ptr unsafe.Pointer, mouseEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseDoubleClickEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).MouseDoubleClickEventDefault(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	}
}

func (ptr *QGraphicsScene) ConnectMouseDoubleClickEvent(f func(mouseEvent *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseDoubleClickEvent"); signal != nil {
			f := func(mouseEvent *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(mouseEvent)
				f(mouseEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseDoubleClickEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseDoubleClickEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectMouseDoubleClickEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseDoubleClickEvent")
	}
}

func (ptr *QGraphicsScene) MouseDoubleClickEvent(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

func (ptr *QGraphicsScene) MouseDoubleClickEventDefault(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

//export callbackQGraphicsScene_MouseMoveEvent
func callbackQGraphicsScene_MouseMoveEvent(ptr unsafe.Pointer, mouseEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseMoveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).MouseMoveEventDefault(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	}
}

func (ptr *QGraphicsScene) ConnectMouseMoveEvent(f func(mouseEvent *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseMoveEvent"); signal != nil {
			f := func(mouseEvent *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(mouseEvent)
				f(mouseEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectMouseMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseMoveEvent")
	}
}

func (ptr *QGraphicsScene) MouseMoveEvent(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MouseMoveEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

func (ptr *QGraphicsScene) MouseMoveEventDefault(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MouseMoveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

//export callbackQGraphicsScene_MousePressEvent
func callbackQGraphicsScene_MousePressEvent(ptr unsafe.Pointer, mouseEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mousePressEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).MousePressEventDefault(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	}
}

func (ptr *QGraphicsScene) ConnectMousePressEvent(f func(mouseEvent *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mousePressEvent"); signal != nil {
			f := func(mouseEvent *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(mouseEvent)
				f(mouseEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "mousePressEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mousePressEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectMousePressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mousePressEvent")
	}
}

func (ptr *QGraphicsScene) MousePressEvent(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MousePressEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

func (ptr *QGraphicsScene) MousePressEventDefault(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MousePressEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

//export callbackQGraphicsScene_MouseReleaseEvent
func callbackQGraphicsScene_MouseReleaseEvent(ptr unsafe.Pointer, mouseEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseReleaseEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMouseEvent))(signal))(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).MouseReleaseEventDefault(NewQGraphicsSceneMouseEventFromPointer(mouseEvent))
	}
}

func (ptr *QGraphicsScene) ConnectMouseReleaseEvent(f func(mouseEvent *QGraphicsSceneMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseReleaseEvent"); signal != nil {
			f := func(mouseEvent *QGraphicsSceneMouseEvent) {
				(*(*func(*QGraphicsSceneMouseEvent))(signal))(mouseEvent)
				f(mouseEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseReleaseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseReleaseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectMouseReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseReleaseEvent")
	}
}

func (ptr *QGraphicsScene) MouseReleaseEvent(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MouseReleaseEvent(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

func (ptr *QGraphicsScene) MouseReleaseEventDefault(mouseEvent QGraphicsSceneMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMouseEvent(mouseEvent))
	}
}

func (ptr *QGraphicsScene) RemoveItem(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_RemoveItem(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

func (ptr *QGraphicsScene) Render(painter gui.QPainter_ITF, target core.QRectF_ITF, source core.QRectF_ITF, aspectRatioMode core.Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Render(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(target), core.PointerFromQRectF(source), C.longlong(aspectRatioMode))
	}
}

//export callbackQGraphicsScene_SceneRectChanged
func callbackQGraphicsScene_SceneRectChanged(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "sceneRectChanged"); signal != nil {
		(*(*func(*core.QRectF))(signal))(core.NewQRectFFromPointer(rect))
	}

}

func (ptr *QGraphicsScene) ConnectSceneRectChanged(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "sceneRectChanged") {
			C.QGraphicsScene_ConnectSceneRectChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "sceneRectChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "sceneRectChanged"); signal != nil {
			f := func(rect *core.QRectF) {
				(*(*func(*core.QRectF))(signal))(rect)
				f(rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "sceneRectChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sceneRectChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectSceneRectChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DisconnectSceneRectChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "sceneRectChanged")
	}
}

func (ptr *QGraphicsScene) SceneRectChanged(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SceneRectChanged(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQGraphicsScene_SelectionChanged
func callbackQGraphicsScene_SelectionChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "selectionChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsScene) ConnectSelectionChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "selectionChanged") {
			C.QGraphicsScene_ConnectSelectionChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "selectionChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "selectionChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "selectionChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "selectionChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectSelectionChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DisconnectSelectionChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "selectionChanged")
	}
}

func (ptr *QGraphicsScene) SelectionChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SelectionChanged(ptr.Pointer())
	}
}

func (ptr *QGraphicsScene) SetActivePanel(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetActivePanel(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

func (ptr *QGraphicsScene) SetActiveWindow(widget QGraphicsWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetActiveWindow(ptr.Pointer(), PointerFromQGraphicsWidget(widget))
	}
}

func (ptr *QGraphicsScene) SetBackgroundBrush(brush gui.QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetBackgroundBrush(ptr.Pointer(), gui.PointerFromQBrush(brush))
	}
}

func (ptr *QGraphicsScene) SetBspTreeDepth(depth int) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetBspTreeDepth(ptr.Pointer(), C.int(int32(depth)))
	}
}

func (ptr *QGraphicsScene) SetFocus(focusReason core.Qt__FocusReason) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetFocus(ptr.Pointer(), C.longlong(focusReason))
	}
}

func (ptr *QGraphicsScene) SetFocusItem(item QGraphicsItem_ITF, focusReason core.Qt__FocusReason) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetFocusItem(ptr.Pointer(), PointerFromQGraphicsItem(item), C.longlong(focusReason))
	}
}

func (ptr *QGraphicsScene) SetFocusOnTouch(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetFocusOnTouch(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsScene) SetFont(font gui.QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetFont(ptr.Pointer(), gui.PointerFromQFont(font))
	}
}

func (ptr *QGraphicsScene) SetForegroundBrush(brush gui.QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetForegroundBrush(ptr.Pointer(), gui.PointerFromQBrush(brush))
	}
}

func (ptr *QGraphicsScene) SetItemIndexMethod(method QGraphicsScene__ItemIndexMethod) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetItemIndexMethod(ptr.Pointer(), C.longlong(method))
	}
}

func (ptr *QGraphicsScene) SetMinimumRenderSize(minSize float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetMinimumRenderSize(ptr.Pointer(), C.double(minSize))
	}
}

func (ptr *QGraphicsScene) SetPalette(palette gui.QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetPalette(ptr.Pointer(), gui.PointerFromQPalette(palette))
	}
}

func (ptr *QGraphicsScene) SetSceneRect(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetSceneRect(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsScene) SetSceneRect2(x float64, y float64, w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetSceneRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h))
	}
}

func (ptr *QGraphicsScene) SetSelectionArea2(path gui.QPainterPath_ITF, mode core.Qt__ItemSelectionMode, deviceTransform gui.QTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetSelectionArea2(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(mode), gui.PointerFromQTransform(deviceTransform))
	}
}

func (ptr *QGraphicsScene) SetSelectionArea3(path gui.QPainterPath_ITF, selectionOperation core.Qt__ItemSelectionOperation, mode core.Qt__ItemSelectionMode, deviceTransform gui.QTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetSelectionArea3(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(selectionOperation), C.longlong(mode), gui.PointerFromQTransform(deviceTransform))
	}
}

func (ptr *QGraphicsScene) SetSelectionArea(path gui.QPainterPath_ITF, deviceTransform gui.QTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetSelectionArea(ptr.Pointer(), gui.PointerFromQPainterPath(path), gui.PointerFromQTransform(deviceTransform))
	}
}

func (ptr *QGraphicsScene) SetSortCacheEnabled(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetSortCacheEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsScene) SetStickyFocus(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetStickyFocus(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsScene) SetStyle(style QStyle_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_SetStyle(ptr.Pointer(), PointerFromQStyle(style))
	}
}

//export callbackQGraphicsScene_Update
func callbackQGraphicsScene_Update(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "update"); signal != nil {
		(*(*func(*core.QRectF))(signal))(core.NewQRectFFromPointer(rect))
	} else {
		NewQGraphicsSceneFromPointer(ptr).UpdateDefault(core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QGraphicsScene) ConnectUpdate(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "update"); signal != nil {
			f := func(rect *core.QRectF) {
				(*(*func(*core.QRectF))(signal))(rect)
				f(rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "update")
	}
}

func (ptr *QGraphicsScene) Update(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Update(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsScene) UpdateDefault(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_UpdateDefault(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsScene) Update2(x float64, y float64, w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_Update2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h))
	}
}

//export callbackQGraphicsScene_WheelEvent
func callbackQGraphicsScene_WheelEvent(ptr unsafe.Pointer, wheelEvent unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "wheelEvent"); signal != nil {
		(*(*func(*QGraphicsSceneWheelEvent))(signal))(NewQGraphicsSceneWheelEventFromPointer(wheelEvent))
	} else {
		NewQGraphicsSceneFromPointer(ptr).WheelEventDefault(NewQGraphicsSceneWheelEventFromPointer(wheelEvent))
	}
}

func (ptr *QGraphicsScene) ConnectWheelEvent(f func(wheelEvent *QGraphicsSceneWheelEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "wheelEvent"); signal != nil {
			f := func(wheelEvent *QGraphicsSceneWheelEvent) {
				(*(*func(*QGraphicsSceneWheelEvent))(signal))(wheelEvent)
				f(wheelEvent)
			}
			qt.ConnectSignal(ptr.Pointer(), "wheelEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "wheelEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "wheelEvent")
	}
}

func (ptr *QGraphicsScene) WheelEvent(wheelEvent QGraphicsSceneWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_WheelEvent(ptr.Pointer(), PointerFromQGraphicsSceneWheelEvent(wheelEvent))
	}
}

func (ptr *QGraphicsScene) WheelEventDefault(wheelEvent QGraphicsSceneWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_WheelEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneWheelEvent(wheelEvent))
	}
}

//export callbackQGraphicsScene_DestroyQGraphicsScene
func callbackQGraphicsScene_DestroyQGraphicsScene(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsScene"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneFromPointer(ptr).DestroyQGraphicsSceneDefault()
	}
}

func (ptr *QGraphicsScene) ConnectDestroyQGraphicsScene(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsScene"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsScene", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsScene", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectDestroyQGraphicsScene() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsScene")
	}
}

func (ptr *QGraphicsScene) DestroyQGraphicsScene() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DestroyQGraphicsScene(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsScene) DestroyQGraphicsSceneDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DestroyQGraphicsSceneDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsScene) BackgroundBrush() *gui.QBrush {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQBrushFromPointer(C.QGraphicsScene_BackgroundBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) ForegroundBrush() *gui.QBrush {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQBrushFromPointer(C.QGraphicsScene_ForegroundBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) Font() *gui.QFont {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontFromPointer(C.QGraphicsScene_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) ActivePanel() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene_ActivePanel(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsScene) FocusItem() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene_FocusItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsScene) ItemAt(position core.QPointF_ITF, deviceTransform gui.QTransform_ITF) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene_ItemAt(ptr.Pointer(), core.PointerFromQPointF(position), gui.PointerFromQTransform(deviceTransform)))
	}
	return nil
}

func (ptr *QGraphicsScene) ItemAt4(x float64, y float64, deviceTransform gui.QTransform_ITF) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene_ItemAt4(ptr.Pointer(), C.double(x), C.double(y), gui.PointerFromQTransform(deviceTransform)))
	}
	return nil
}

func (ptr *QGraphicsScene) MouseGrabberItem() *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene_MouseGrabberItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsScene) ItemIndexMethod() QGraphicsScene__ItemIndexMethod {
	if ptr.Pointer() != nil {
		return QGraphicsScene__ItemIndexMethod(C.QGraphicsScene_ItemIndexMethod(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsScene) ActiveWindow() *QGraphicsWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsWidgetFromPointer(C.QGraphicsScene_ActiveWindow(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) CollidingItems(item QGraphicsItem_ITF, mode core.Qt__ItemSelectionMode) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__collidingItems_atList(i)
			}
			return out
		}(C.QGraphicsScene_CollidingItems(ptr.Pointer(), PointerFromQGraphicsItem(item), C.longlong(mode)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) Items(order core.Qt__SortOrder) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList(i)
			}
			return out
		}(C.QGraphicsScene_Items(ptr.Pointer(), C.longlong(order)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) Items5(path gui.QPainterPath_ITF, mode core.Qt__ItemSelectionMode, order core.Qt__SortOrder, deviceTransform gui.QTransform_ITF) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList5(i)
			}
			return out
		}(C.QGraphicsScene_Items5(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(mode), C.longlong(order), gui.PointerFromQTransform(deviceTransform)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) Items2(pos core.QPointF_ITF, mode core.Qt__ItemSelectionMode, order core.Qt__SortOrder, deviceTransform gui.QTransform_ITF) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList2(i)
			}
			return out
		}(C.QGraphicsScene_Items2(ptr.Pointer(), core.PointerFromQPointF(pos), C.longlong(mode), C.longlong(order), gui.PointerFromQTransform(deviceTransform)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) Items4(polygon gui.QPolygonF_ITF, mode core.Qt__ItemSelectionMode, order core.Qt__SortOrder, deviceTransform gui.QTransform_ITF) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList4(i)
			}
			return out
		}(C.QGraphicsScene_Items4(ptr.Pointer(), gui.PointerFromQPolygonF(polygon), C.longlong(mode), C.longlong(order), gui.PointerFromQTransform(deviceTransform)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) Items3(rect core.QRectF_ITF, mode core.Qt__ItemSelectionMode, order core.Qt__SortOrder, deviceTransform gui.QTransform_ITF) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList3(i)
			}
			return out
		}(C.QGraphicsScene_Items3(ptr.Pointer(), core.PointerFromQRectF(rect), C.longlong(mode), C.longlong(order), gui.PointerFromQTransform(deviceTransform)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) Items7(x float64, y float64, w float64, h float64, mode core.Qt__ItemSelectionMode, order core.Qt__SortOrder, deviceTransform gui.QTransform_ITF) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList7(i)
			}
			return out
		}(C.QGraphicsScene_Items7(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.longlong(mode), C.longlong(order), gui.PointerFromQTransform(deviceTransform)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) SelectedItems() []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__selectedItems_atList(i)
			}
			return out
		}(C.QGraphicsScene_SelectedItems(ptr.Pointer()))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsScene) Views() []*QGraphicsView {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsView {
			out := make([]*QGraphicsView, int(l.len))
			tmpList := NewQGraphicsSceneFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__views_atList(i)
			}
			return out
		}(C.QGraphicsScene_Views(ptr.Pointer()))
	}
	return make([]*QGraphicsView, 0)
}

func (ptr *QGraphicsScene) SelectionArea() *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsScene_SelectionArea(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) Palette() *gui.QPalette {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPaletteFromPointer(C.QGraphicsScene_Palette(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) ItemsBoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsScene_ItemsBoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) SceneRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsScene_SceneRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) Style() *QStyle {
	if ptr.Pointer() != nil {
		tmpValue := NewQStyleFromPointer(C.QGraphicsScene_Style(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsScene_InputMethodQuery
func callbackQGraphicsScene_InputMethodQuery(ptr unsafe.Pointer, query C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "inputMethodQuery"); signal != nil {
		return core.PointerFromQVariant((*(*func(core.Qt__InputMethodQuery) *core.QVariant)(signal))(core.Qt__InputMethodQuery(query)))
	}

	return core.PointerFromQVariant(NewQGraphicsSceneFromPointer(ptr).InputMethodQueryDefault(core.Qt__InputMethodQuery(query)))
}

func (ptr *QGraphicsScene) ConnectInputMethodQuery(f func(query core.Qt__InputMethodQuery) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "inputMethodQuery"); signal != nil {
			f := func(query core.Qt__InputMethodQuery) *core.QVariant {
				(*(*func(core.Qt__InputMethodQuery) *core.QVariant)(signal))(query)
				return f(query)
			}
			qt.ConnectSignal(ptr.Pointer(), "inputMethodQuery", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "inputMethodQuery", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsScene) DisconnectInputMethodQuery() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "inputMethodQuery")
	}
}

func (ptr *QGraphicsScene) InputMethodQuery(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QGraphicsScene_InputMethodQuery(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) InputMethodQueryDefault(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QGraphicsScene_InputMethodQueryDefault(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) FocusOnTouch() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_FocusOnTouch(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsScene) HasFocus() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_HasFocus(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsScene) IsActive() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_IsActive(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsScene) IsSortCacheEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_IsSortCacheEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsScene) StickyFocus() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsScene_StickyFocus(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQGraphicsScene_MetaObject
func callbackQGraphicsScene_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQGraphicsSceneFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGraphicsScene) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGraphicsScene_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsScene) BspTreeDepth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsScene_BspTreeDepth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QGraphicsScene) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsScene_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsScene) MinimumRenderSize() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsScene_MinimumRenderSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsScene) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsScene_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsScene) __createItemGroup_items_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___createItemGroup_items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __createItemGroup_items_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___createItemGroup_items_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __createItemGroup_items_newList() unsafe.Pointer {
	return C.QGraphicsScene___createItemGroup_items_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __changed_region_atList(i int) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsScene___changed_region_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) __changed_region_setList(i core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___changed_region_setList(ptr.Pointer(), core.PointerFromQRectF(i))
	}
}

func (ptr *QGraphicsScene) __changed_region_newList() unsafe.Pointer {
	return C.QGraphicsScene___changed_region_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __collidingItems_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___collidingItems_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __collidingItems_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___collidingItems_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __collidingItems_newList() unsafe.Pointer {
	return C.QGraphicsScene___collidingItems_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __items_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __items_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___items_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __items_newList() unsafe.Pointer {
	return C.QGraphicsScene___items_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __items_atList5(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___items_atList5(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __items_setList5(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___items_setList5(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __items_newList5() unsafe.Pointer {
	return C.QGraphicsScene___items_newList5(ptr.Pointer())
}

func (ptr *QGraphicsScene) __items_atList2(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___items_atList2(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __items_setList2(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___items_setList2(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __items_newList2() unsafe.Pointer {
	return C.QGraphicsScene___items_newList2(ptr.Pointer())
}

func (ptr *QGraphicsScene) __items_atList4(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___items_atList4(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __items_setList4(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___items_setList4(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __items_newList4() unsafe.Pointer {
	return C.QGraphicsScene___items_newList4(ptr.Pointer())
}

func (ptr *QGraphicsScene) __items_atList3(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___items_atList3(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __items_setList3(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___items_setList3(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __items_newList3() unsafe.Pointer {
	return C.QGraphicsScene___items_newList3(ptr.Pointer())
}

func (ptr *QGraphicsScene) __items_atList7(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___items_atList7(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __items_setList7(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___items_setList7(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __items_newList7() unsafe.Pointer {
	return C.QGraphicsScene___items_newList7(ptr.Pointer())
}

func (ptr *QGraphicsScene) __selectedItems_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsScene___selectedItems_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsScene) __selectedItems_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___selectedItems_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsScene) __selectedItems_newList() unsafe.Pointer {
	return C.QGraphicsScene___selectedItems_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __views_atList(i int) *QGraphicsView {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsViewFromPointer(C.QGraphicsScene___views_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) __views_setList(i QGraphicsView_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___views_setList(ptr.Pointer(), PointerFromQGraphicsView(i))
	}
}

func (ptr *QGraphicsScene) __views_newList() unsafe.Pointer {
	return C.QGraphicsScene___views_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QGraphicsScene___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QGraphicsScene) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QGraphicsScene___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsScene___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsScene) __findChildren_newList2() unsafe.Pointer {
	return C.QGraphicsScene___findChildren_newList2(ptr.Pointer())
}

func (ptr *QGraphicsScene) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsScene___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsScene) __findChildren_newList3() unsafe.Pointer {
	return C.QGraphicsScene___findChildren_newList3(ptr.Pointer())
}

func (ptr *QGraphicsScene) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsScene___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsScene) __findChildren_newList() unsafe.Pointer {
	return C.QGraphicsScene___findChildren_newList(ptr.Pointer())
}

func (ptr *QGraphicsScene) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsScene___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsScene) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsScene) __children_newList() unsafe.Pointer {
	return C.QGraphicsScene___children_newList(ptr.Pointer())
}

//export callbackQGraphicsScene_ChildEvent
func callbackQGraphicsScene_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGraphicsScene_ConnectNotify
func callbackQGraphicsScene_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsSceneFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsScene) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsScene_CustomEvent
func callbackQGraphicsScene_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsScene_DeleteLater
func callbackQGraphicsScene_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGraphicsScene) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsScene_Destroyed
func callbackQGraphicsScene_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQGraphicsScene_DisconnectNotify
func callbackQGraphicsScene_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsSceneFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsScene) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsScene_ObjectNameChanged
func callbackQGraphicsScene_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQGraphicsScene_TimerEvent
func callbackQGraphicsScene_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGraphicsSceneFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGraphicsScene) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsScene_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

type QGraphicsSceneContextMenuEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneContextMenuEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneContextMenuEvent_PTR() *QGraphicsSceneContextMenuEvent
}

func (ptr *QGraphicsSceneContextMenuEvent) QGraphicsSceneContextMenuEvent_PTR() *QGraphicsSceneContextMenuEvent {
	return ptr
}

func (ptr *QGraphicsSceneContextMenuEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneContextMenuEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneContextMenuEvent(ptr QGraphicsSceneContextMenuEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneContextMenuEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneContextMenuEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneContextMenuEvent) {
	n = new(QGraphicsSceneContextMenuEvent)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsSceneContextMenuEvent__Reason
//QGraphicsSceneContextMenuEvent::Reason
type QGraphicsSceneContextMenuEvent__Reason int64

const (
	QGraphicsSceneContextMenuEvent__Mouse    QGraphicsSceneContextMenuEvent__Reason = QGraphicsSceneContextMenuEvent__Reason(0)
	QGraphicsSceneContextMenuEvent__Keyboard QGraphicsSceneContextMenuEvent__Reason = QGraphicsSceneContextMenuEvent__Reason(1)
	QGraphicsSceneContextMenuEvent__Other    QGraphicsSceneContextMenuEvent__Reason = QGraphicsSceneContextMenuEvent__Reason(2)
)

//export callbackQGraphicsSceneContextMenuEvent_DestroyQGraphicsSceneContextMenuEvent
func callbackQGraphicsSceneContextMenuEvent_DestroyQGraphicsSceneContextMenuEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneContextMenuEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneContextMenuEventFromPointer(ptr).DestroyQGraphicsSceneContextMenuEventDefault()
	}
}

func (ptr *QGraphicsSceneContextMenuEvent) ConnectDestroyQGraphicsSceneContextMenuEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneContextMenuEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneContextMenuEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneContextMenuEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneContextMenuEvent) DisconnectDestroyQGraphicsSceneContextMenuEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneContextMenuEvent")
	}
}

func (ptr *QGraphicsSceneContextMenuEvent) DestroyQGraphicsSceneContextMenuEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneContextMenuEvent_DestroyQGraphicsSceneContextMenuEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneContextMenuEvent) DestroyQGraphicsSceneContextMenuEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneContextMenuEvent_DestroyQGraphicsSceneContextMenuEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneContextMenuEvent) Reason() QGraphicsSceneContextMenuEvent__Reason {
	if ptr.Pointer() != nil {
		return QGraphicsSceneContextMenuEvent__Reason(C.QGraphicsSceneContextMenuEvent_Reason(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneContextMenuEvent) ScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneContextMenuEvent_ScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneContextMenuEvent) Pos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneContextMenuEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneContextMenuEvent) ScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneContextMenuEvent_ScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneContextMenuEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QGraphicsSceneContextMenuEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

type QGraphicsSceneDragDropEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneDragDropEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneDragDropEvent_PTR() *QGraphicsSceneDragDropEvent
}

func (ptr *QGraphicsSceneDragDropEvent) QGraphicsSceneDragDropEvent_PTR() *QGraphicsSceneDragDropEvent {
	return ptr
}

func (ptr *QGraphicsSceneDragDropEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneDragDropEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneDragDropEvent(ptr QGraphicsSceneDragDropEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneDragDropEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneDragDropEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneDragDropEvent) {
	n = new(QGraphicsSceneDragDropEvent)
	n.SetPointer(ptr)
	return
}
func (ptr *QGraphicsSceneDragDropEvent) AcceptProposedAction() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneDragDropEvent_AcceptProposedAction(ptr.Pointer())
	}
}

func (ptr *QGraphicsSceneDragDropEvent) SetDropAction(action core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneDragDropEvent_SetDropAction(ptr.Pointer(), C.longlong(action))
	}
}

//export callbackQGraphicsSceneDragDropEvent_DestroyQGraphicsSceneDragDropEvent
func callbackQGraphicsSceneDragDropEvent_DestroyQGraphicsSceneDragDropEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneDragDropEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneDragDropEventFromPointer(ptr).DestroyQGraphicsSceneDragDropEventDefault()
	}
}

func (ptr *QGraphicsSceneDragDropEvent) ConnectDestroyQGraphicsSceneDragDropEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneDragDropEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneDragDropEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneDragDropEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneDragDropEvent) DisconnectDestroyQGraphicsSceneDragDropEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneDragDropEvent")
	}
}

func (ptr *QGraphicsSceneDragDropEvent) DestroyQGraphicsSceneDragDropEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneDragDropEvent_DestroyQGraphicsSceneDragDropEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneDragDropEvent) DestroyQGraphicsSceneDragDropEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneDragDropEvent_DestroyQGraphicsSceneDragDropEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneDragDropEvent) ScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneDragDropEvent_ScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneDragDropEvent) Pos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneDragDropEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneDragDropEvent) ScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneDragDropEvent_ScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneDragDropEvent) Source() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QGraphicsSceneDragDropEvent_Source(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneDragDropEvent) DropAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QGraphicsSceneDragDropEvent_DropAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneDragDropEvent) ProposedAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QGraphicsSceneDragDropEvent_ProposedAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneDragDropEvent) PossibleActions() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QGraphicsSceneDragDropEvent_PossibleActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneDragDropEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QGraphicsSceneDragDropEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneDragDropEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QGraphicsSceneDragDropEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneDragDropEvent) MimeData() *core.QMimeData {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQMimeDataFromPointer(C.QGraphicsSceneDragDropEvent_MimeData(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

type QGraphicsSceneEvent struct {
	core.QEvent
}

type QGraphicsSceneEvent_ITF interface {
	core.QEvent_ITF
	QGraphicsSceneEvent_PTR() *QGraphicsSceneEvent
}

func (ptr *QGraphicsSceneEvent) QGraphicsSceneEvent_PTR() *QGraphicsSceneEvent {
	return ptr
}

func (ptr *QGraphicsSceneEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneEvent(ptr QGraphicsSceneEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneEvent) {
	n = new(QGraphicsSceneEvent)
	n.SetPointer(ptr)
	return
}

//export callbackQGraphicsSceneEvent_DestroyQGraphicsSceneEvent
func callbackQGraphicsSceneEvent_DestroyQGraphicsSceneEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneEventFromPointer(ptr).DestroyQGraphicsSceneEventDefault()
	}
}

func (ptr *QGraphicsSceneEvent) ConnectDestroyQGraphicsSceneEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneEvent) DisconnectDestroyQGraphicsSceneEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneEvent")
	}
}

func (ptr *QGraphicsSceneEvent) DestroyQGraphicsSceneEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneEvent_DestroyQGraphicsSceneEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QGraphicsSceneEvent) DestroyQGraphicsSceneEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneEvent_DestroyQGraphicsSceneEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QGraphicsSceneEvent) Widget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QGraphicsSceneEvent_Widget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

type QGraphicsSceneHelpEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneHelpEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneHelpEvent_PTR() *QGraphicsSceneHelpEvent
}

func (ptr *QGraphicsSceneHelpEvent) QGraphicsSceneHelpEvent_PTR() *QGraphicsSceneHelpEvent {
	return ptr
}

func (ptr *QGraphicsSceneHelpEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneHelpEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneHelpEvent(ptr QGraphicsSceneHelpEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneHelpEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneHelpEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneHelpEvent) {
	n = new(QGraphicsSceneHelpEvent)
	n.SetPointer(ptr)
	return
}

//export callbackQGraphicsSceneHelpEvent_DestroyQGraphicsSceneHelpEvent
func callbackQGraphicsSceneHelpEvent_DestroyQGraphicsSceneHelpEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneHelpEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneHelpEventFromPointer(ptr).DestroyQGraphicsSceneHelpEventDefault()
	}
}

func (ptr *QGraphicsSceneHelpEvent) ConnectDestroyQGraphicsSceneHelpEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneHelpEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneHelpEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneHelpEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneHelpEvent) DisconnectDestroyQGraphicsSceneHelpEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneHelpEvent")
	}
}

func (ptr *QGraphicsSceneHelpEvent) DestroyQGraphicsSceneHelpEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneHelpEvent_DestroyQGraphicsSceneHelpEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneHelpEvent) DestroyQGraphicsSceneHelpEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneHelpEvent_DestroyQGraphicsSceneHelpEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneHelpEvent) ScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneHelpEvent_ScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneHelpEvent) ScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneHelpEvent_ScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

type QGraphicsSceneHoverEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneHoverEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneHoverEvent_PTR() *QGraphicsSceneHoverEvent
}

func (ptr *QGraphicsSceneHoverEvent) QGraphicsSceneHoverEvent_PTR() *QGraphicsSceneHoverEvent {
	return ptr
}

func (ptr *QGraphicsSceneHoverEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneHoverEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneHoverEvent(ptr QGraphicsSceneHoverEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneHoverEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneHoverEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneHoverEvent) {
	n = new(QGraphicsSceneHoverEvent)
	n.SetPointer(ptr)
	return
}

//export callbackQGraphicsSceneHoverEvent_DestroyQGraphicsSceneHoverEvent
func callbackQGraphicsSceneHoverEvent_DestroyQGraphicsSceneHoverEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneHoverEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneHoverEventFromPointer(ptr).DestroyQGraphicsSceneHoverEventDefault()
	}
}

func (ptr *QGraphicsSceneHoverEvent) ConnectDestroyQGraphicsSceneHoverEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneHoverEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneHoverEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneHoverEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneHoverEvent) DisconnectDestroyQGraphicsSceneHoverEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneHoverEvent")
	}
}

func (ptr *QGraphicsSceneHoverEvent) DestroyQGraphicsSceneHoverEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneHoverEvent_DestroyQGraphicsSceneHoverEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneHoverEvent) DestroyQGraphicsSceneHoverEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneHoverEvent_DestroyQGraphicsSceneHoverEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneHoverEvent) LastScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneHoverEvent_LastScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneHoverEvent) ScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneHoverEvent_ScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneHoverEvent) LastPos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneHoverEvent_LastPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneHoverEvent) LastScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneHoverEvent_LastScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneHoverEvent) Pos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneHoverEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneHoverEvent) ScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneHoverEvent_ScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneHoverEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QGraphicsSceneHoverEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

type QGraphicsSceneMouseEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneMouseEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneMouseEvent_PTR() *QGraphicsSceneMouseEvent
}

func (ptr *QGraphicsSceneMouseEvent) QGraphicsSceneMouseEvent_PTR() *QGraphicsSceneMouseEvent {
	return ptr
}

func (ptr *QGraphicsSceneMouseEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneMouseEvent(ptr QGraphicsSceneMouseEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneMouseEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneMouseEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneMouseEvent) {
	n = new(QGraphicsSceneMouseEvent)
	n.SetPointer(ptr)
	return
}

//export callbackQGraphicsSceneMouseEvent_DestroyQGraphicsSceneMouseEvent
func callbackQGraphicsSceneMouseEvent_DestroyQGraphicsSceneMouseEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneMouseEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneMouseEventFromPointer(ptr).DestroyQGraphicsSceneMouseEventDefault()
	}
}

func (ptr *QGraphicsSceneMouseEvent) ConnectDestroyQGraphicsSceneMouseEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneMouseEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneMouseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneMouseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneMouseEvent) DisconnectDestroyQGraphicsSceneMouseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneMouseEvent")
	}
}

func (ptr *QGraphicsSceneMouseEvent) DestroyQGraphicsSceneMouseEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneMouseEvent_DestroyQGraphicsSceneMouseEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneMouseEvent) DestroyQGraphicsSceneMouseEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneMouseEvent_DestroyQGraphicsSceneMouseEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneMouseEvent) ButtonDownScreenPos(button core.Qt__MouseButton) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneMouseEvent_ButtonDownScreenPos(ptr.Pointer(), C.longlong(button)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) LastScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneMouseEvent_LastScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) ScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneMouseEvent_ScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) ButtonDownPos(button core.Qt__MouseButton) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMouseEvent_ButtonDownPos(ptr.Pointer(), C.longlong(button)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) ButtonDownScenePos(button core.Qt__MouseButton) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMouseEvent_ButtonDownScenePos(ptr.Pointer(), C.longlong(button)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) LastPos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMouseEvent_LastPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) LastScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMouseEvent_LastScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) Pos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMouseEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) ScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMouseEvent_ScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMouseEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QGraphicsSceneMouseEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneMouseEvent) Button() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QGraphicsSceneMouseEvent_Button(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneMouseEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QGraphicsSceneMouseEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneMouseEvent) Flags() core.Qt__MouseEventFlag {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventFlag(C.QGraphicsSceneMouseEvent_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneMouseEvent) Source() core.Qt__MouseEventSource {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventSource(C.QGraphicsSceneMouseEvent_Source(ptr.Pointer()))
	}
	return 0
}

type QGraphicsSceneMoveEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneMoveEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneMoveEvent_PTR() *QGraphicsSceneMoveEvent
}

func (ptr *QGraphicsSceneMoveEvent) QGraphicsSceneMoveEvent_PTR() *QGraphicsSceneMoveEvent {
	return ptr
}

func (ptr *QGraphicsSceneMoveEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneMoveEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneMoveEvent(ptr QGraphicsSceneMoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneMoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneMoveEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneMoveEvent) {
	n = new(QGraphicsSceneMoveEvent)
	n.SetPointer(ptr)
	return
}
func NewQGraphicsSceneMoveEvent() *QGraphicsSceneMoveEvent {
	tmpValue := NewQGraphicsSceneMoveEventFromPointer(C.QGraphicsSceneMoveEvent_NewQGraphicsSceneMoveEvent())
	runtime.SetFinalizer(tmpValue, (*QGraphicsSceneMoveEvent).DestroyQGraphicsSceneMoveEvent)
	return tmpValue
}

//export callbackQGraphicsSceneMoveEvent_DestroyQGraphicsSceneMoveEvent
func callbackQGraphicsSceneMoveEvent_DestroyQGraphicsSceneMoveEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneMoveEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneMoveEventFromPointer(ptr).DestroyQGraphicsSceneMoveEventDefault()
	}
}

func (ptr *QGraphicsSceneMoveEvent) ConnectDestroyQGraphicsSceneMoveEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneMoveEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneMoveEvent) DisconnectDestroyQGraphicsSceneMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneMoveEvent")
	}
}

func (ptr *QGraphicsSceneMoveEvent) DestroyQGraphicsSceneMoveEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneMoveEvent_DestroyQGraphicsSceneMoveEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneMoveEvent) DestroyQGraphicsSceneMoveEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneMoveEvent_DestroyQGraphicsSceneMoveEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneMoveEvent) NewPos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMoveEvent_NewPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneMoveEvent) OldPos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneMoveEvent_OldPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

type QGraphicsSceneResizeEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneResizeEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneResizeEvent_PTR() *QGraphicsSceneResizeEvent
}

func (ptr *QGraphicsSceneResizeEvent) QGraphicsSceneResizeEvent_PTR() *QGraphicsSceneResizeEvent {
	return ptr
}

func (ptr *QGraphicsSceneResizeEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneResizeEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneResizeEvent(ptr QGraphicsSceneResizeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneResizeEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneResizeEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneResizeEvent) {
	n = new(QGraphicsSceneResizeEvent)
	n.SetPointer(ptr)
	return
}
func NewQGraphicsSceneResizeEvent() *QGraphicsSceneResizeEvent {
	tmpValue := NewQGraphicsSceneResizeEventFromPointer(C.QGraphicsSceneResizeEvent_NewQGraphicsSceneResizeEvent())
	runtime.SetFinalizer(tmpValue, (*QGraphicsSceneResizeEvent).DestroyQGraphicsSceneResizeEvent)
	return tmpValue
}

//export callbackQGraphicsSceneResizeEvent_DestroyQGraphicsSceneResizeEvent
func callbackQGraphicsSceneResizeEvent_DestroyQGraphicsSceneResizeEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneResizeEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneResizeEventFromPointer(ptr).DestroyQGraphicsSceneResizeEventDefault()
	}
}

func (ptr *QGraphicsSceneResizeEvent) ConnectDestroyQGraphicsSceneResizeEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneResizeEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneResizeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneResizeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneResizeEvent) DisconnectDestroyQGraphicsSceneResizeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneResizeEvent")
	}
}

func (ptr *QGraphicsSceneResizeEvent) DestroyQGraphicsSceneResizeEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneResizeEvent_DestroyQGraphicsSceneResizeEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneResizeEvent) DestroyQGraphicsSceneResizeEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneResizeEvent_DestroyQGraphicsSceneResizeEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneResizeEvent) NewSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsSceneResizeEvent_NewSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneResizeEvent) OldSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsSceneResizeEvent_OldSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

type QGraphicsSceneWheelEvent struct {
	QGraphicsSceneEvent
}

type QGraphicsSceneWheelEvent_ITF interface {
	QGraphicsSceneEvent_ITF
	QGraphicsSceneWheelEvent_PTR() *QGraphicsSceneWheelEvent
}

func (ptr *QGraphicsSceneWheelEvent) QGraphicsSceneWheelEvent_PTR() *QGraphicsSceneWheelEvent {
	return ptr
}

func (ptr *QGraphicsSceneWheelEvent) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneEvent_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSceneWheelEvent) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsSceneEvent_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSceneWheelEvent(ptr QGraphicsSceneWheelEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSceneWheelEvent_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSceneWheelEventFromPointer(ptr unsafe.Pointer) (n *QGraphicsSceneWheelEvent) {
	n = new(QGraphicsSceneWheelEvent)
	n.SetPointer(ptr)
	return
}

//export callbackQGraphicsSceneWheelEvent_DestroyQGraphicsSceneWheelEvent
func callbackQGraphicsSceneWheelEvent_DestroyQGraphicsSceneWheelEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSceneWheelEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSceneWheelEventFromPointer(ptr).DestroyQGraphicsSceneWheelEventDefault()
	}
}

func (ptr *QGraphicsSceneWheelEvent) ConnectDestroyQGraphicsSceneWheelEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSceneWheelEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneWheelEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSceneWheelEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSceneWheelEvent) DisconnectDestroyQGraphicsSceneWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSceneWheelEvent")
	}
}

func (ptr *QGraphicsSceneWheelEvent) DestroyQGraphicsSceneWheelEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneWheelEvent_DestroyQGraphicsSceneWheelEvent(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneWheelEvent) DestroyQGraphicsSceneWheelEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSceneWheelEvent_DestroyQGraphicsSceneWheelEventDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSceneWheelEvent) ScreenPos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsSceneWheelEvent_ScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneWheelEvent) Pos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneWheelEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneWheelEvent) ScenePos() *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsSceneWheelEvent_ScenePos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSceneWheelEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QGraphicsSceneWheelEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneWheelEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QGraphicsSceneWheelEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneWheelEvent) Orientation() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QGraphicsSceneWheelEvent_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsSceneWheelEvent) Delta() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsSceneWheelEvent_Delta(ptr.Pointer())))
	}
	return 0
}

type QGraphicsSimpleTextItem struct {
	QAbstractGraphicsShapeItem
}

type QGraphicsSimpleTextItem_ITF interface {
	QAbstractGraphicsShapeItem_ITF
	QGraphicsSimpleTextItem_PTR() *QGraphicsSimpleTextItem
}

func (ptr *QGraphicsSimpleTextItem) QGraphicsSimpleTextItem_PTR() *QGraphicsSimpleTextItem {
	return ptr
}

func (ptr *QGraphicsSimpleTextItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractGraphicsShapeItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsSimpleTextItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractGraphicsShapeItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsSimpleTextItem(ptr QGraphicsSimpleTextItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsSimpleTextItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsSimpleTextItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsSimpleTextItem) {
	n = new(QGraphicsSimpleTextItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsSimpleTextItem__anonymous
//QGraphicsSimpleTextItem::anonymous
type QGraphicsSimpleTextItem__anonymous int64

const (
	QGraphicsSimpleTextItem__Type QGraphicsSimpleTextItem__anonymous = QGraphicsSimpleTextItem__anonymous(9)
)

func NewQGraphicsSimpleTextItem(parent QGraphicsItem_ITF) *QGraphicsSimpleTextItem {
	return NewQGraphicsSimpleTextItemFromPointer(C.QGraphicsSimpleTextItem_NewQGraphicsSimpleTextItem(PointerFromQGraphicsItem(parent)))
}

func NewQGraphicsSimpleTextItem2(text string, parent QGraphicsItem_ITF) *QGraphicsSimpleTextItem {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	return NewQGraphicsSimpleTextItemFromPointer(C.QGraphicsSimpleTextItem_NewQGraphicsSimpleTextItem2(C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, PointerFromQGraphicsItem(parent)))
}

//export callbackQGraphicsSimpleTextItem_Paint
func callbackQGraphicsSimpleTextItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsSimpleTextItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsSimpleTextItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSimpleTextItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsSimpleTextItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsSimpleTextItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsSimpleTextItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsSimpleTextItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsSimpleTextItem) SetFont(font gui.QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsSimpleTextItem_SetFont(ptr.Pointer(), gui.PointerFromQFont(font))
	}
}

func (ptr *QGraphicsSimpleTextItem) SetText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QGraphicsSimpleTextItem_SetText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))})
	}
}

//export callbackQGraphicsSimpleTextItem_DestroyQGraphicsSimpleTextItem
func callbackQGraphicsSimpleTextItem_DestroyQGraphicsSimpleTextItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsSimpleTextItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsSimpleTextItemFromPointer(ptr).DestroyQGraphicsSimpleTextItemDefault()
	}
}

func (ptr *QGraphicsSimpleTextItem) ConnectDestroyQGraphicsSimpleTextItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsSimpleTextItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSimpleTextItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsSimpleTextItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSimpleTextItem) DisconnectDestroyQGraphicsSimpleTextItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsSimpleTextItem")
	}
}

func (ptr *QGraphicsSimpleTextItem) DestroyQGraphicsSimpleTextItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsSimpleTextItem_DestroyQGraphicsSimpleTextItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSimpleTextItem) DestroyQGraphicsSimpleTextItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsSimpleTextItem_DestroyQGraphicsSimpleTextItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsSimpleTextItem) Font() *gui.QFont {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontFromPointer(C.QGraphicsSimpleTextItem_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsSimpleTextItem_BoundingRect
func callbackQGraphicsSimpleTextItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsSimpleTextItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsSimpleTextItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsSimpleTextItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsSimpleTextItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsSimpleTextItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSimpleTextItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsSimpleTextItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsSimpleTextItem) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGraphicsSimpleTextItem_Text(ptr.Pointer()))
	}
	return ""
}

type QGraphicsTextItem struct {
	QGraphicsObject
}

type QGraphicsTextItem_ITF interface {
	QGraphicsObject_ITF
	QGraphicsTextItem_PTR() *QGraphicsTextItem
}

func (ptr *QGraphicsTextItem) QGraphicsTextItem_PTR() *QGraphicsTextItem {
	return ptr
}

func (ptr *QGraphicsTextItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsTextItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsObject_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsTextItem(ptr QGraphicsTextItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsTextItem_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsTextItemFromPointer(ptr unsafe.Pointer) (n *QGraphicsTextItem) {
	n = new(QGraphicsTextItem)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsTextItem__anonymous
//QGraphicsTextItem::anonymous
type QGraphicsTextItem__anonymous int64

const (
	QGraphicsTextItem__Type QGraphicsTextItem__anonymous = QGraphicsTextItem__anonymous(8)
)

func NewQGraphicsTextItem(parent QGraphicsItem_ITF) *QGraphicsTextItem {
	tmpValue := NewQGraphicsTextItemFromPointer(C.QGraphicsTextItem_NewQGraphicsTextItem(PointerFromQGraphicsItem(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQGraphicsTextItem2(text string, parent QGraphicsItem_ITF) *QGraphicsTextItem {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	tmpValue := NewQGraphicsTextItemFromPointer(C.QGraphicsTextItem_NewQGraphicsTextItem2(C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, PointerFromQGraphicsItem(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGraphicsTextItem) AdjustSize() {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_AdjustSize(ptr.Pointer())
	}
}

//export callbackQGraphicsTextItem_LinkActivated
func callbackQGraphicsTextItem_LinkActivated(ptr unsafe.Pointer, link C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "linkActivated"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(link))
	}

}

func (ptr *QGraphicsTextItem) ConnectLinkActivated(f func(link string)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "linkActivated") {
			C.QGraphicsTextItem_ConnectLinkActivated(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "linkActivated")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "linkActivated"); signal != nil {
			f := func(link string) {
				(*(*func(string))(signal))(link)
				f(link)
			}
			qt.ConnectSignal(ptr.Pointer(), "linkActivated", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "linkActivated", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTextItem) DisconnectLinkActivated() {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_DisconnectLinkActivated(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "linkActivated")
	}
}

func (ptr *QGraphicsTextItem) LinkActivated(link string) {
	if ptr.Pointer() != nil {
		var linkC *C.char
		if link != "" {
			linkC = C.CString(link)
			defer C.free(unsafe.Pointer(linkC))
		}
		C.QGraphicsTextItem_LinkActivated(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: linkC, len: C.longlong(len(link))})
	}
}

//export callbackQGraphicsTextItem_LinkHovered
func callbackQGraphicsTextItem_LinkHovered(ptr unsafe.Pointer, link C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "linkHovered"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(link))
	}

}

func (ptr *QGraphicsTextItem) ConnectLinkHovered(f func(link string)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "linkHovered") {
			C.QGraphicsTextItem_ConnectLinkHovered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "linkHovered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "linkHovered"); signal != nil {
			f := func(link string) {
				(*(*func(string))(signal))(link)
				f(link)
			}
			qt.ConnectSignal(ptr.Pointer(), "linkHovered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "linkHovered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTextItem) DisconnectLinkHovered() {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_DisconnectLinkHovered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "linkHovered")
	}
}

func (ptr *QGraphicsTextItem) LinkHovered(link string) {
	if ptr.Pointer() != nil {
		var linkC *C.char
		if link != "" {
			linkC = C.CString(link)
			defer C.free(unsafe.Pointer(linkC))
		}
		C.QGraphicsTextItem_LinkHovered(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: linkC, len: C.longlong(len(link))})
	}
}

//export callbackQGraphicsTextItem_Paint
func callbackQGraphicsTextItem_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsTextItemFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsTextItem) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTextItem) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsTextItem) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsTextItem) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsTextItem) SetDefaultTextColor(col gui.QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetDefaultTextColor(ptr.Pointer(), gui.PointerFromQColor(col))
	}
}

func (ptr *QGraphicsTextItem) SetDocument(document gui.QTextDocument_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetDocument(ptr.Pointer(), gui.PointerFromQTextDocument(document))
	}
}

func (ptr *QGraphicsTextItem) SetFont(font gui.QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetFont(ptr.Pointer(), gui.PointerFromQFont(font))
	}
}

func (ptr *QGraphicsTextItem) SetHtml(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QGraphicsTextItem_SetHtml(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))})
	}
}

func (ptr *QGraphicsTextItem) SetOpenExternalLinks(open bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetOpenExternalLinks(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(open))))
	}
}

func (ptr *QGraphicsTextItem) SetPlainText(text string) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QGraphicsTextItem_SetPlainText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))})
	}
}

func (ptr *QGraphicsTextItem) SetTabChangesFocus(b bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetTabChangesFocus(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QGraphicsTextItem) SetTextCursor(cursor gui.QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetTextCursor(ptr.Pointer(), gui.PointerFromQTextCursor(cursor))
	}
}

func (ptr *QGraphicsTextItem) SetTextInteractionFlags(flags core.Qt__TextInteractionFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetTextInteractionFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QGraphicsTextItem) SetTextWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_SetTextWidth(ptr.Pointer(), C.double(width))
	}
}

//export callbackQGraphicsTextItem_DestroyQGraphicsTextItem
func callbackQGraphicsTextItem_DestroyQGraphicsTextItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsTextItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsTextItemFromPointer(ptr).DestroyQGraphicsTextItemDefault()
	}
}

func (ptr *QGraphicsTextItem) ConnectDestroyQGraphicsTextItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsTextItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsTextItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsTextItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTextItem) DisconnectDestroyQGraphicsTextItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsTextItem")
	}
}

func (ptr *QGraphicsTextItem) DestroyQGraphicsTextItem() {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_DestroyQGraphicsTextItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsTextItem) DestroyQGraphicsTextItemDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsTextItem_DestroyQGraphicsTextItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsTextItem) DefaultTextColor() *gui.QColor {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQColorFromPointer(C.QGraphicsTextItem_DefaultTextColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTextItem) Font() *gui.QFont {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontFromPointer(C.QGraphicsTextItem_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsTextItem_BoundingRect
func callbackQGraphicsTextItem_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsTextItemFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsTextItem) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTextItem) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsTextItem) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsTextItem_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTextItem) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsTextItem_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTextItem) ToHtml() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGraphicsTextItem_ToHtml(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGraphicsTextItem) ToPlainText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGraphicsTextItem_ToPlainText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGraphicsTextItem) TextCursor() *gui.QTextCursor {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQTextCursorFromPointer(C.QGraphicsTextItem_TextCursor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTextItem) Document() *gui.QTextDocument {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQTextDocumentFromPointer(C.QGraphicsTextItem_Document(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTextItem) TextInteractionFlags() core.Qt__TextInteractionFlag {
	if ptr.Pointer() != nil {
		return core.Qt__TextInteractionFlag(C.QGraphicsTextItem_TextInteractionFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsTextItem) OpenExternalLinks() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsTextItem_OpenExternalLinks(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsTextItem) TabChangesFocus() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsTextItem_TabChangesFocus(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsTextItem) TextWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGraphicsTextItem_TextWidth(ptr.Pointer()))
	}
	return 0
}

type QGraphicsTransform struct {
	core.QObject
}

type QGraphicsTransform_ITF interface {
	core.QObject_ITF
	QGraphicsTransform_PTR() *QGraphicsTransform
}

func (ptr *QGraphicsTransform) QGraphicsTransform_PTR() *QGraphicsTransform {
	return ptr
}

func (ptr *QGraphicsTransform) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsTransform) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsTransform(ptr QGraphicsTransform_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsTransform_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsTransformFromPointer(ptr unsafe.Pointer) (n *QGraphicsTransform) {
	n = new(QGraphicsTransform)
	n.SetPointer(ptr)
	return
}
func NewQGraphicsTransform(parent core.QObject_ITF) *QGraphicsTransform {
	tmpValue := NewQGraphicsTransformFromPointer(C.QGraphicsTransform_NewQGraphicsTransform(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGraphicsTransform_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsTransform_QGraphicsTransform_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QGraphicsTransform) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QGraphicsTransform_QGraphicsTransform_Tr(sC, cC, C.int(int32(n))))
}

//export callbackQGraphicsTransform_Update
func callbackQGraphicsTransform_Update(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "update"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsTransformFromPointer(ptr).UpdateDefault()
	}
}

func (ptr *QGraphicsTransform) ConnectUpdate(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "update"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTransform) DisconnectUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "update")
	}
}

func (ptr *QGraphicsTransform) Update() {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_Update(ptr.Pointer())
	}
}

func (ptr *QGraphicsTransform) UpdateDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_UpdateDefault(ptr.Pointer())
	}
}

//export callbackQGraphicsTransform_DestroyQGraphicsTransform
func callbackQGraphicsTransform_DestroyQGraphicsTransform(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsTransform"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsTransformFromPointer(ptr).DestroyQGraphicsTransformDefault()
	}
}

func (ptr *QGraphicsTransform) ConnectDestroyQGraphicsTransform(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsTransform"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsTransform", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsTransform", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTransform) DisconnectDestroyQGraphicsTransform() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsTransform")
	}
}

func (ptr *QGraphicsTransform) DestroyQGraphicsTransform() {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_DestroyQGraphicsTransform(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsTransform) DestroyQGraphicsTransformDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_DestroyQGraphicsTransformDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsTransform_MetaObject
func callbackQGraphicsTransform_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQGraphicsTransformFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGraphicsTransform) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGraphicsTransform_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQGraphicsTransform_ApplyTo
func callbackQGraphicsTransform_ApplyTo(ptr unsafe.Pointer, matrix unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "applyTo"); signal != nil {
		(*(*func(*gui.QMatrix4x4))(signal))(gui.NewQMatrix4x4FromPointer(matrix))
	}

}

func (ptr *QGraphicsTransform) ConnectApplyTo(f func(matrix *gui.QMatrix4x4)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "applyTo"); signal != nil {
			f := func(matrix *gui.QMatrix4x4) {
				(*(*func(*gui.QMatrix4x4))(signal))(matrix)
				f(matrix)
			}
			qt.ConnectSignal(ptr.Pointer(), "applyTo", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "applyTo", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsTransform) DisconnectApplyTo() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "applyTo")
	}
}

func (ptr *QGraphicsTransform) ApplyTo(matrix gui.QMatrix4x4_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_ApplyTo(ptr.Pointer(), gui.PointerFromQMatrix4x4(matrix))
	}
}

func (ptr *QGraphicsTransform) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QGraphicsTransform___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTransform) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QGraphicsTransform) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QGraphicsTransform___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QGraphicsTransform) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsTransform___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTransform) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsTransform) __findChildren_newList2() unsafe.Pointer {
	return C.QGraphicsTransform___findChildren_newList2(ptr.Pointer())
}

func (ptr *QGraphicsTransform) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsTransform___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTransform) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsTransform) __findChildren_newList3() unsafe.Pointer {
	return C.QGraphicsTransform___findChildren_newList3(ptr.Pointer())
}

func (ptr *QGraphicsTransform) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsTransform___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTransform) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsTransform) __findChildren_newList() unsafe.Pointer {
	return C.QGraphicsTransform___findChildren_newList(ptr.Pointer())
}

func (ptr *QGraphicsTransform) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QGraphicsTransform___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsTransform) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QGraphicsTransform) __children_newList() unsafe.Pointer {
	return C.QGraphicsTransform___children_newList(ptr.Pointer())
}

//export callbackQGraphicsTransform_Event
func callbackQGraphicsTransform_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsTransformFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QGraphicsTransform) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsTransform_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

//export callbackQGraphicsTransform_EventFilter
func callbackQGraphicsTransform_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsTransformFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsTransform) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsTransform_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQGraphicsTransform_ChildEvent
func callbackQGraphicsTransform_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGraphicsTransformFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGraphicsTransform) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGraphicsTransform_ConnectNotify
func callbackQGraphicsTransform_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsTransformFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsTransform) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsTransform_CustomEvent
func callbackQGraphicsTransform_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsTransformFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsTransform) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsTransform_DeleteLater
func callbackQGraphicsTransform_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsTransformFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGraphicsTransform) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQGraphicsTransform_Destroyed
func callbackQGraphicsTransform_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQGraphicsTransform_DisconnectNotify
func callbackQGraphicsTransform_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGraphicsTransformFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGraphicsTransform) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGraphicsTransform_ObjectNameChanged
func callbackQGraphicsTransform_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQGraphicsTransform_TimerEvent
func callbackQGraphicsTransform_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGraphicsTransformFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGraphicsTransform) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsTransform_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

type QGraphicsView struct {
	QAbstractScrollArea
}

type QGraphicsView_ITF interface {
	QAbstractScrollArea_ITF
	QGraphicsView_PTR() *QGraphicsView
}

func (ptr *QGraphicsView) QGraphicsView_PTR() *QGraphicsView {
	return ptr
}

func (ptr *QGraphicsView) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractScrollArea_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsView) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractScrollArea_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsView(ptr QGraphicsView_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsView_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsViewFromPointer(ptr unsafe.Pointer) (n *QGraphicsView) {
	n = new(QGraphicsView)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsView__CacheModeFlag
//QGraphicsView::CacheModeFlag
type QGraphicsView__CacheModeFlag int64

const (
	QGraphicsView__CacheNone       QGraphicsView__CacheModeFlag = QGraphicsView__CacheModeFlag(0x0)
	QGraphicsView__CacheBackground QGraphicsView__CacheModeFlag = QGraphicsView__CacheModeFlag(0x1)
)

//go:generate stringer -type=QGraphicsView__DragMode
//QGraphicsView::DragMode
type QGraphicsView__DragMode int64

const (
	QGraphicsView__NoDrag         QGraphicsView__DragMode = QGraphicsView__DragMode(0)
	QGraphicsView__ScrollHandDrag QGraphicsView__DragMode = QGraphicsView__DragMode(1)
	QGraphicsView__RubberBandDrag QGraphicsView__DragMode = QGraphicsView__DragMode(2)
)

//go:generate stringer -type=QGraphicsView__OptimizationFlag
//QGraphicsView::OptimizationFlag
type QGraphicsView__OptimizationFlag int64

const (
	QGraphicsView__DontClipPainter           QGraphicsView__OptimizationFlag = QGraphicsView__OptimizationFlag(0x1)
	QGraphicsView__DontSavePainterState      QGraphicsView__OptimizationFlag = QGraphicsView__OptimizationFlag(0x2)
	QGraphicsView__DontAdjustForAntialiasing QGraphicsView__OptimizationFlag = QGraphicsView__OptimizationFlag(0x4)
	QGraphicsView__IndirectPainting          QGraphicsView__OptimizationFlag = QGraphicsView__OptimizationFlag(0x8)
)

//go:generate stringer -type=QGraphicsView__ViewportAnchor
//QGraphicsView::ViewportAnchor
type QGraphicsView__ViewportAnchor int64

const (
	QGraphicsView__NoAnchor         QGraphicsView__ViewportAnchor = QGraphicsView__ViewportAnchor(0)
	QGraphicsView__AnchorViewCenter QGraphicsView__ViewportAnchor = QGraphicsView__ViewportAnchor(1)
	QGraphicsView__AnchorUnderMouse QGraphicsView__ViewportAnchor = QGraphicsView__ViewportAnchor(2)
)

//go:generate stringer -type=QGraphicsView__ViewportUpdateMode
//QGraphicsView::ViewportUpdateMode
type QGraphicsView__ViewportUpdateMode int64

const (
	QGraphicsView__FullViewportUpdate         QGraphicsView__ViewportUpdateMode = QGraphicsView__ViewportUpdateMode(0)
	QGraphicsView__MinimalViewportUpdate      QGraphicsView__ViewportUpdateMode = QGraphicsView__ViewportUpdateMode(1)
	QGraphicsView__SmartViewportUpdate        QGraphicsView__ViewportUpdateMode = QGraphicsView__ViewportUpdateMode(2)
	QGraphicsView__NoViewportUpdate           QGraphicsView__ViewportUpdateMode = QGraphicsView__ViewportUpdateMode(3)
	QGraphicsView__BoundingRectViewportUpdate QGraphicsView__ViewportUpdateMode = QGraphicsView__ViewportUpdateMode(4)
)

func NewQGraphicsView2(scene QGraphicsScene_ITF, parent QWidget_ITF) *QGraphicsView {
	tmpValue := NewQGraphicsViewFromPointer(C.QGraphicsView_NewQGraphicsView2(PointerFromQGraphicsScene(scene), PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQGraphicsView(parent QWidget_ITF) *QGraphicsView {
	tmpValue := NewQGraphicsViewFromPointer(C.QGraphicsView_NewQGraphicsView(PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGraphicsView) CenterOn3(item QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_CenterOn3(ptr.Pointer(), PointerFromQGraphicsItem(item))
	}
}

func (ptr *QGraphicsView) CenterOn(pos core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_CenterOn(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QGraphicsView) CenterOn2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_CenterOn2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

//export callbackQGraphicsView_DrawBackground
func callbackQGraphicsView_DrawBackground(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawBackground"); signal != nil {
		(*(*func(*gui.QPainter, *core.QRectF))(signal))(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	} else {
		NewQGraphicsViewFromPointer(ptr).DrawBackgroundDefault(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QGraphicsView) ConnectDrawBackground(f func(painter *gui.QPainter, rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawBackground"); signal != nil {
			f := func(painter *gui.QPainter, rect *core.QRectF) {
				(*(*func(*gui.QPainter, *core.QRectF))(signal))(painter, rect)
				f(painter, rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawBackground", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawBackground", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectDrawBackground() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawBackground")
	}
}

func (ptr *QGraphicsView) DrawBackground(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_DrawBackground(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsView) DrawBackgroundDefault(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_DrawBackgroundDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

//export callbackQGraphicsView_DrawForeground
func callbackQGraphicsView_DrawForeground(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawForeground"); signal != nil {
		(*(*func(*gui.QPainter, *core.QRectF))(signal))(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	} else {
		NewQGraphicsViewFromPointer(ptr).DrawForegroundDefault(gui.NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QGraphicsView) ConnectDrawForeground(f func(painter *gui.QPainter, rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawForeground"); signal != nil {
			f := func(painter *gui.QPainter, rect *core.QRectF) {
				(*(*func(*gui.QPainter, *core.QRectF))(signal))(painter, rect)
				f(painter, rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawForeground", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawForeground", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectDrawForeground() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawForeground")
	}
}

func (ptr *QGraphicsView) DrawForeground(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_DrawForeground(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsView) DrawForegroundDefault(painter gui.QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_DrawForegroundDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsView) EnsureVisible3(item QGraphicsItem_ITF, xmargin int, ymargin int) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_EnsureVisible3(ptr.Pointer(), PointerFromQGraphicsItem(item), C.int(int32(xmargin)), C.int(int32(ymargin)))
	}
}

func (ptr *QGraphicsView) EnsureVisible(rect core.QRectF_ITF, xmargin int, ymargin int) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_EnsureVisible(ptr.Pointer(), core.PointerFromQRectF(rect), C.int(int32(xmargin)), C.int(int32(ymargin)))
	}
}

func (ptr *QGraphicsView) EnsureVisible2(x float64, y float64, w float64, h float64, xmargin int, ymargin int) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_EnsureVisible2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.int(int32(xmargin)), C.int(int32(ymargin)))
	}
}

func (ptr *QGraphicsView) FitInView3(item QGraphicsItem_ITF, aspectRatioMode core.Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_FitInView3(ptr.Pointer(), PointerFromQGraphicsItem(item), C.longlong(aspectRatioMode))
	}
}

func (ptr *QGraphicsView) FitInView(rect core.QRectF_ITF, aspectRatioMode core.Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_FitInView(ptr.Pointer(), core.PointerFromQRectF(rect), C.longlong(aspectRatioMode))
	}
}

func (ptr *QGraphicsView) FitInView2(x float64, y float64, w float64, h float64, aspectRatioMode core.Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_FitInView2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.longlong(aspectRatioMode))
	}
}

//export callbackQGraphicsView_InvalidateScene
func callbackQGraphicsView_InvalidateScene(ptr unsafe.Pointer, rect unsafe.Pointer, layers C.longlong) {
	if signal := qt.GetSignal(ptr, "invalidateScene"); signal != nil {
		(*(*func(*core.QRectF, QGraphicsScene__SceneLayer))(signal))(core.NewQRectFFromPointer(rect), QGraphicsScene__SceneLayer(layers))
	} else {
		NewQGraphicsViewFromPointer(ptr).InvalidateSceneDefault(core.NewQRectFFromPointer(rect), QGraphicsScene__SceneLayer(layers))
	}
}

func (ptr *QGraphicsView) ConnectInvalidateScene(f func(rect *core.QRectF, layers QGraphicsScene__SceneLayer)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "invalidateScene"); signal != nil {
			f := func(rect *core.QRectF, layers QGraphicsScene__SceneLayer) {
				(*(*func(*core.QRectF, QGraphicsScene__SceneLayer))(signal))(rect, layers)
				f(rect, layers)
			}
			qt.ConnectSignal(ptr.Pointer(), "invalidateScene", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "invalidateScene", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectInvalidateScene() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "invalidateScene")
	}
}

func (ptr *QGraphicsView) InvalidateScene(rect core.QRectF_ITF, layers QGraphicsScene__SceneLayer) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_InvalidateScene(ptr.Pointer(), core.PointerFromQRectF(rect), C.longlong(layers))
	}
}

func (ptr *QGraphicsView) InvalidateSceneDefault(rect core.QRectF_ITF, layers QGraphicsScene__SceneLayer) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_InvalidateSceneDefault(ptr.Pointer(), core.PointerFromQRectF(rect), C.longlong(layers))
	}
}

func (ptr *QGraphicsView) Render(painter gui.QPainter_ITF, target core.QRectF_ITF, source core.QRect_ITF, aspectRatioMode core.Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_Render(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRectF(target), core.PointerFromQRect(source), C.longlong(aspectRatioMode))
	}
}

func (ptr *QGraphicsView) ResetCachedContent() {
	if ptr.Pointer() != nil {
		C.QGraphicsView_ResetCachedContent(ptr.Pointer())
	}
}

func (ptr *QGraphicsView) ResetMatrix() {
	if ptr.Pointer() != nil {
		C.QGraphicsView_ResetMatrix(ptr.Pointer())
	}
}

func (ptr *QGraphicsView) ResetTransform() {
	if ptr.Pointer() != nil {
		C.QGraphicsView_ResetTransform(ptr.Pointer())
	}
}

func (ptr *QGraphicsView) Rotate(angle float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_Rotate(ptr.Pointer(), C.double(angle))
	}
}

//export callbackQGraphicsView_RubberBandChanged
func callbackQGraphicsView_RubberBandChanged(ptr unsafe.Pointer, rubberBandRect unsafe.Pointer, fromScenePoint unsafe.Pointer, toScenePoint unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "rubberBandChanged"); signal != nil {
		(*(*func(*core.QRect, *core.QPointF, *core.QPointF))(signal))(core.NewQRectFromPointer(rubberBandRect), core.NewQPointFFromPointer(fromScenePoint), core.NewQPointFFromPointer(toScenePoint))
	}

}

func (ptr *QGraphicsView) ConnectRubberBandChanged(f func(rubberBandRect *core.QRect, fromScenePoint *core.QPointF, toScenePoint *core.QPointF)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "rubberBandChanged") {
			C.QGraphicsView_ConnectRubberBandChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "rubberBandChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "rubberBandChanged"); signal != nil {
			f := func(rubberBandRect *core.QRect, fromScenePoint *core.QPointF, toScenePoint *core.QPointF) {
				(*(*func(*core.QRect, *core.QPointF, *core.QPointF))(signal))(rubberBandRect, fromScenePoint, toScenePoint)
				f(rubberBandRect, fromScenePoint, toScenePoint)
			}
			qt.ConnectSignal(ptr.Pointer(), "rubberBandChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "rubberBandChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectRubberBandChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsView_DisconnectRubberBandChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "rubberBandChanged")
	}
}

func (ptr *QGraphicsView) RubberBandChanged(rubberBandRect core.QRect_ITF, fromScenePoint core.QPointF_ITF, toScenePoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_RubberBandChanged(ptr.Pointer(), core.PointerFromQRect(rubberBandRect), core.PointerFromQPointF(fromScenePoint), core.PointerFromQPointF(toScenePoint))
	}
}

func (ptr *QGraphicsView) Scale(sx float64, sy float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_Scale(ptr.Pointer(), C.double(sx), C.double(sy))
	}
}

func (ptr *QGraphicsView) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QGraphicsView) SetBackgroundBrush(brush gui.QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetBackgroundBrush(ptr.Pointer(), gui.PointerFromQBrush(brush))
	}
}

func (ptr *QGraphicsView) SetCacheMode(mode QGraphicsView__CacheModeFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetCacheMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QGraphicsView) SetDragMode(mode QGraphicsView__DragMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetDragMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QGraphicsView) SetForegroundBrush(brush gui.QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetForegroundBrush(ptr.Pointer(), gui.PointerFromQBrush(brush))
	}
}

func (ptr *QGraphicsView) SetInteractive(allowed bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetInteractive(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(allowed))))
	}
}

func (ptr *QGraphicsView) SetMatrix(matrix gui.QMatrix_ITF, combine bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetMatrix(ptr.Pointer(), gui.PointerFromQMatrix(matrix), C.char(int8(qt.GoBoolToInt(combine))))
	}
}

func (ptr *QGraphicsView) SetOptimizationFlag(flag QGraphicsView__OptimizationFlag, enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetOptimizationFlag(ptr.Pointer(), C.longlong(flag), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsView) SetOptimizationFlags(flags QGraphicsView__OptimizationFlag) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetOptimizationFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QGraphicsView) SetRenderHint(hint gui.QPainter__RenderHint, enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetRenderHint(ptr.Pointer(), C.longlong(hint), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsView) SetRenderHints(hints gui.QPainter__RenderHint) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetRenderHints(ptr.Pointer(), C.longlong(hints))
	}
}

func (ptr *QGraphicsView) SetResizeAnchor(anchor QGraphicsView__ViewportAnchor) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetResizeAnchor(ptr.Pointer(), C.longlong(anchor))
	}
}

func (ptr *QGraphicsView) SetRubberBandSelectionMode(mode core.Qt__ItemSelectionMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetRubberBandSelectionMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QGraphicsView) SetScene(scene QGraphicsScene_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetScene(ptr.Pointer(), PointerFromQGraphicsScene(scene))
	}
}

func (ptr *QGraphicsView) SetSceneRect(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetSceneRect(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsView) SetSceneRect2(x float64, y float64, w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetSceneRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h))
	}
}

func (ptr *QGraphicsView) SetTransform(matrix gui.QTransform_ITF, combine bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetTransform(ptr.Pointer(), gui.PointerFromQTransform(matrix), C.char(int8(qt.GoBoolToInt(combine))))
	}
}

func (ptr *QGraphicsView) SetTransformationAnchor(anchor QGraphicsView__ViewportAnchor) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetTransformationAnchor(ptr.Pointer(), C.longlong(anchor))
	}
}

func (ptr *QGraphicsView) SetViewportUpdateMode(mode QGraphicsView__ViewportUpdateMode) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetViewportUpdateMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQGraphicsView_SetupViewport
func callbackQGraphicsView_SetupViewport(ptr unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setupViewport"); signal != nil {
		(*(*func(*QWidget))(signal))(NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsViewFromPointer(ptr).SetupViewportDefault(NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsView) ConnectSetupViewport(f func(widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setupViewport"); signal != nil {
			f := func(widget *QWidget) {
				(*(*func(*QWidget))(signal))(widget)
				f(widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "setupViewport", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setupViewport", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectSetupViewport() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setupViewport")
	}
}

func (ptr *QGraphicsView) SetupViewport(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetupViewport(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsView) SetupViewportDefault(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_SetupViewportDefault(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsView) Shear(sh float64, sv float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_Shear(ptr.Pointer(), C.double(sh), C.double(sv))
	}
}

func (ptr *QGraphicsView) Translate(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_Translate(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

//export callbackQGraphicsView_UpdateScene
func callbackQGraphicsView_UpdateScene(ptr unsafe.Pointer, rects C.struct_QtWidgets_PackedList) {
	if signal := qt.GetSignal(ptr, "updateScene"); signal != nil {
		(*(*func([]*core.QRectF))(signal))(func(l C.struct_QtWidgets_PackedList) []*core.QRectF {
			out := make([]*core.QRectF, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__updateScene_rects_atList(i)
			}
			return out
		}(rects))
	} else {
		NewQGraphicsViewFromPointer(ptr).UpdateSceneDefault(func(l C.struct_QtWidgets_PackedList) []*core.QRectF {
			out := make([]*core.QRectF, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__updateScene_rects_atList(i)
			}
			return out
		}(rects))
	}
}

func (ptr *QGraphicsView) ConnectUpdateScene(f func(rects []*core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "updateScene"); signal != nil {
			f := func(rects []*core.QRectF) {
				(*(*func([]*core.QRectF))(signal))(rects)
				f(rects)
			}
			qt.ConnectSignal(ptr.Pointer(), "updateScene", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "updateScene", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectUpdateScene() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "updateScene")
	}
}

func (ptr *QGraphicsView) UpdateScene(rects []*core.QRectF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_UpdateScene(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQGraphicsViewFromPointer(NewQGraphicsViewFromPointer(nil).__updateScene_rects_newList())
			for _, v := range rects {
				tmpList.__updateScene_rects_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QGraphicsView) UpdateSceneDefault(rects []*core.QRectF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_UpdateSceneDefault(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQGraphicsViewFromPointer(NewQGraphicsViewFromPointer(nil).__updateScene_rects_newList())
			for _, v := range rects {
				tmpList.__updateScene_rects_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

//export callbackQGraphicsView_UpdateSceneRect
func callbackQGraphicsView_UpdateSceneRect(ptr unsafe.Pointer, rect unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "updateSceneRect"); signal != nil {
		(*(*func(*core.QRectF))(signal))(core.NewQRectFFromPointer(rect))
	} else {
		NewQGraphicsViewFromPointer(ptr).UpdateSceneRectDefault(core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QGraphicsView) ConnectUpdateSceneRect(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "updateSceneRect"); signal != nil {
			f := func(rect *core.QRectF) {
				(*(*func(*core.QRectF))(signal))(rect)
				f(rect)
			}
			qt.ConnectSignal(ptr.Pointer(), "updateSceneRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "updateSceneRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectUpdateSceneRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "updateSceneRect")
	}
}

func (ptr *QGraphicsView) UpdateSceneRect(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_UpdateSceneRect(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QGraphicsView) UpdateSceneRectDefault(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView_UpdateSceneRectDefault(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQGraphicsView_DestroyQGraphicsView
func callbackQGraphicsView_DestroyQGraphicsView(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsView"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsViewFromPointer(ptr).DestroyQGraphicsViewDefault()
	}
}

func (ptr *QGraphicsView) ConnectDestroyQGraphicsView(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsView"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsView", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsView", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsView) DisconnectDestroyQGraphicsView() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsView")
	}
}

func (ptr *QGraphicsView) DestroyQGraphicsView() {
	if ptr.Pointer() != nil {
		C.QGraphicsView_DestroyQGraphicsView(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsView) DestroyQGraphicsViewDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsView_DestroyQGraphicsViewDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsView) BackgroundBrush() *gui.QBrush {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQBrushFromPointer(C.QGraphicsView_BackgroundBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) ForegroundBrush() *gui.QBrush {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQBrushFromPointer(C.QGraphicsView_ForegroundBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) ItemAt(pos core.QPoint_ITF) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView_ItemAt(ptr.Pointer(), core.PointerFromQPoint(pos)))
	}
	return nil
}

func (ptr *QGraphicsView) ItemAt2(x int, y int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView_ItemAt2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return nil
}

func (ptr *QGraphicsView) Scene() *QGraphicsScene {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsSceneFromPointer(C.QGraphicsView_Scene(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) CacheMode() QGraphicsView__CacheModeFlag {
	if ptr.Pointer() != nil {
		return QGraphicsView__CacheModeFlag(C.QGraphicsView_CacheMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) DragMode() QGraphicsView__DragMode {
	if ptr.Pointer() != nil {
		return QGraphicsView__DragMode(C.QGraphicsView_DragMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) OptimizationFlags() QGraphicsView__OptimizationFlag {
	if ptr.Pointer() != nil {
		return QGraphicsView__OptimizationFlag(C.QGraphicsView_OptimizationFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) ResizeAnchor() QGraphicsView__ViewportAnchor {
	if ptr.Pointer() != nil {
		return QGraphicsView__ViewportAnchor(C.QGraphicsView_ResizeAnchor(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) TransformationAnchor() QGraphicsView__ViewportAnchor {
	if ptr.Pointer() != nil {
		return QGraphicsView__ViewportAnchor(C.QGraphicsView_TransformationAnchor(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) ViewportUpdateMode() QGraphicsView__ViewportUpdateMode {
	if ptr.Pointer() != nil {
		return QGraphicsView__ViewportUpdateMode(C.QGraphicsView_ViewportUpdateMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) Items() []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList(i)
			}
			return out
		}(C.QGraphicsView_Items(ptr.Pointer()))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsView) Items7(path gui.QPainterPath_ITF, mode core.Qt__ItemSelectionMode) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList7(i)
			}
			return out
		}(C.QGraphicsView_Items7(ptr.Pointer(), gui.PointerFromQPainterPath(path), C.longlong(mode)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsView) Items2(pos core.QPoint_ITF) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList2(i)
			}
			return out
		}(C.QGraphicsView_Items2(ptr.Pointer(), core.PointerFromQPoint(pos)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsView) Items6(polygon gui.QPolygon_ITF, mode core.Qt__ItemSelectionMode) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList6(i)
			}
			return out
		}(C.QGraphicsView_Items6(ptr.Pointer(), gui.PointerFromQPolygon(polygon), C.longlong(mode)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsView) Items4(rect core.QRect_ITF, mode core.Qt__ItemSelectionMode) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList4(i)
			}
			return out
		}(C.QGraphicsView_Items4(ptr.Pointer(), core.PointerFromQRect(rect), C.longlong(mode)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsView) Items3(x int, y int) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList3(i)
			}
			return out
		}(C.QGraphicsView_Items3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsView) Items5(x int, y int, w int, h int, mode core.Qt__ItemSelectionMode) []*QGraphicsItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QGraphicsItem {
			out := make([]*QGraphicsItem, int(l.len))
			tmpList := NewQGraphicsViewFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__items_atList5(i)
			}
			return out
		}(C.QGraphicsView_Items5(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.longlong(mode)))
	}
	return make([]*QGraphicsItem, 0)
}

func (ptr *QGraphicsView) Matrix() *gui.QMatrix {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQMatrixFromPointer(C.QGraphicsView_Matrix(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QMatrix).DestroyQMatrix)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) RenderHints() gui.QPainter__RenderHint {
	if ptr.Pointer() != nil {
		return gui.QPainter__RenderHint(C.QGraphicsView_RenderHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) MapFromScene4(path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsView_MapFromScene4(ptr.Pointer(), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapToScene4(path gui.QPainterPath_ITF) *gui.QPainterPath {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPainterPathFromPointer(C.QGraphicsView_MapToScene4(ptr.Pointer(), gui.PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*gui.QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapFromScene(point core.QPointF_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsView_MapFromScene(ptr.Pointer(), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapFromScene5(x float64, y float64) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QGraphicsView_MapFromScene5(ptr.Pointer(), C.double(x), C.double(y)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapToScene(point core.QPoint_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsView_MapToScene(ptr.Pointer(), core.PointerFromQPoint(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapToScene5(x int, y int) *core.QPointF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFFromPointer(C.QGraphicsView_MapToScene5(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapFromScene3(polygon gui.QPolygonF_ITF) *gui.QPolygon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFromPointer(C.QGraphicsView_MapFromScene3(ptr.Pointer(), gui.PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapFromScene2(rect core.QRectF_ITF) *gui.QPolygon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFromPointer(C.QGraphicsView_MapFromScene2(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapFromScene6(x float64, y float64, w float64, h float64) *gui.QPolygon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFromPointer(C.QGraphicsView_MapFromScene6(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapToScene3(polygon gui.QPolygon_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsView_MapToScene3(ptr.Pointer(), gui.PointerFromQPolygon(polygon)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapToScene2(rect core.QRect_ITF) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsView_MapToScene2(ptr.Pointer(), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) MapToScene6(x int, y int, w int, h int) *gui.QPolygonF {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPolygonFFromPointer(C.QGraphicsView_MapToScene6(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h))))
		runtime.SetFinalizer(tmpValue, (*gui.QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) RubberBandRect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QGraphicsView_RubberBandRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) SceneRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsView_SceneRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) Transform() *gui.QTransform {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQTransformFromPointer(C.QGraphicsView_Transform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) ViewportTransform() *gui.QTransform {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQTransformFromPointer(C.QGraphicsView_ViewportTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QGraphicsView_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) RubberBandSelectionMode() core.Qt__ItemSelectionMode {
	if ptr.Pointer() != nil {
		return core.Qt__ItemSelectionMode(C.QGraphicsView_RubberBandSelectionMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsView) IsInteractive() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsView_IsInteractive(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsView) IsTransformed() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsView_IsTransformed(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsView) __updateScene_rects_atList(i int) *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsView___updateScene_rects_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsView) __updateScene_rects_setList(i core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___updateScene_rects_setList(ptr.Pointer(), core.PointerFromQRectF(i))
	}
}

func (ptr *QGraphicsView) __updateScene_rects_newList() unsafe.Pointer {
	return C.QGraphicsView___updateScene_rects_newList(ptr.Pointer())
}

func (ptr *QGraphicsView) __items_atList(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView___items_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsView) __items_setList(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___items_setList(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsView) __items_newList() unsafe.Pointer {
	return C.QGraphicsView___items_newList(ptr.Pointer())
}

func (ptr *QGraphicsView) __items_atList7(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView___items_atList7(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsView) __items_setList7(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___items_setList7(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsView) __items_newList7() unsafe.Pointer {
	return C.QGraphicsView___items_newList7(ptr.Pointer())
}

func (ptr *QGraphicsView) __items_atList2(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView___items_atList2(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsView) __items_setList2(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___items_setList2(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsView) __items_newList2() unsafe.Pointer {
	return C.QGraphicsView___items_newList2(ptr.Pointer())
}

func (ptr *QGraphicsView) __items_atList6(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView___items_atList6(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsView) __items_setList6(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___items_setList6(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsView) __items_newList6() unsafe.Pointer {
	return C.QGraphicsView___items_newList6(ptr.Pointer())
}

func (ptr *QGraphicsView) __items_atList4(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView___items_atList4(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsView) __items_setList4(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___items_setList4(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsView) __items_newList4() unsafe.Pointer {
	return C.QGraphicsView___items_newList4(ptr.Pointer())
}

func (ptr *QGraphicsView) __items_atList3(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView___items_atList3(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsView) __items_setList3(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___items_setList3(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsView) __items_newList3() unsafe.Pointer {
	return C.QGraphicsView___items_newList3(ptr.Pointer())
}

func (ptr *QGraphicsView) __items_atList5(i int) *QGraphicsItem {
	if ptr.Pointer() != nil {
		return NewQGraphicsItemFromPointer(C.QGraphicsView___items_atList5(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QGraphicsView) __items_setList5(i QGraphicsItem_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsView___items_setList5(ptr.Pointer(), PointerFromQGraphicsItem(i))
	}
}

func (ptr *QGraphicsView) __items_newList5() unsafe.Pointer {
	return C.QGraphicsView___items_newList5(ptr.Pointer())
}

type QGraphicsWidget struct {
	QGraphicsObject
	QGraphicsLayoutItem
}

type QGraphicsWidget_ITF interface {
	QGraphicsObject_ITF
	QGraphicsLayoutItem_ITF
	QGraphicsWidget_PTR() *QGraphicsWidget
}

func (ptr *QGraphicsWidget) QGraphicsWidget_PTR() *QGraphicsWidget {
	return ptr
}

func (ptr *QGraphicsWidget) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QGraphicsWidget) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QGraphicsObject_PTR().SetPointer(p)
		ptr.QGraphicsLayoutItem_PTR().SetPointer(p)
	}
}

func PointerFromQGraphicsWidget(ptr QGraphicsWidget_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGraphicsWidget_PTR().Pointer()
	}
	return nil
}

func NewQGraphicsWidgetFromPointer(ptr unsafe.Pointer) (n *QGraphicsWidget) {
	n = new(QGraphicsWidget)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QGraphicsWidget__anonymous
//QGraphicsWidget::anonymous
type QGraphicsWidget__anonymous int64

const (
	QGraphicsWidget__Type QGraphicsWidget__anonymous = QGraphicsWidget__anonymous(11)
)

func NewQGraphicsWidget(parent QGraphicsItem_ITF, wFlags core.Qt__WindowType) *QGraphicsWidget {
	tmpValue := NewQGraphicsWidgetFromPointer(C.QGraphicsWidget_NewQGraphicsWidget(PointerFromQGraphicsItem(parent), C.longlong(wFlags)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQGraphicsWidget_Close
func callbackQGraphicsWidget_Close(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsWidgetFromPointer(ptr).CloseDefault())))
}

func (ptr *QGraphicsWidget) ConnectClose(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "close"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "close", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "close", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "close")
	}
}

func (ptr *QGraphicsWidget) Close() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_Close(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsWidget) CloseDefault() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_CloseDefault(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQGraphicsWidget_FocusNextPrevChild
func callbackQGraphicsWidget_FocusNextPrevChild(ptr unsafe.Pointer, next C.char) C.char {
	if signal := qt.GetSignal(ptr, "focusNextPrevChild"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(bool) bool)(signal))(int8(next) != 0))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsWidgetFromPointer(ptr).FocusNextPrevChildDefault(int8(next) != 0))))
}

func (ptr *QGraphicsWidget) ConnectFocusNextPrevChild(f func(next bool) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusNextPrevChild"); signal != nil {
			f := func(next bool) bool {
				(*(*func(bool) bool)(signal))(next)
				return f(next)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusNextPrevChild", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusNextPrevChild", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectFocusNextPrevChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusNextPrevChild")
	}
}

func (ptr *QGraphicsWidget) FocusNextPrevChild(next bool) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_FocusNextPrevChild(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next))))) != 0
	}
	return false
}

func (ptr *QGraphicsWidget) FocusNextPrevChildDefault(next bool) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_FocusNextPrevChildDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next))))) != 0
	}
	return false
}

//export callbackQGraphicsWidget_WindowFrameEvent
func callbackQGraphicsWidget_WindowFrameEvent(ptr unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "windowFrameEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGraphicsWidgetFromPointer(ptr).WindowFrameEventDefault(core.NewQEventFromPointer(event)))))
}

func (ptr *QGraphicsWidget) ConnectWindowFrameEvent(f func(event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "windowFrameEvent"); signal != nil {
			f := func(event *core.QEvent) bool {
				(*(*func(*core.QEvent) bool)(signal))(event)
				return f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "windowFrameEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "windowFrameEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectWindowFrameEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "windowFrameEvent")
	}
}

func (ptr *QGraphicsWidget) WindowFrameEvent(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_WindowFrameEvent(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QGraphicsWidget) WindowFrameEventDefault(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_WindowFrameEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QGraphicsWidget) GrabShortcut(sequence gui.QKeySequence_ITF, context core.Qt__ShortcutContext) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QGraphicsWidget_GrabShortcut(ptr.Pointer(), gui.PointerFromQKeySequence(sequence), C.longlong(context))))
	}
	return 0
}

func (ptr *QGraphicsWidget) AddAction(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_AddAction(ptr.Pointer(), PointerFromQAction(action))
	}
}

func (ptr *QGraphicsWidget) AddActions(actions []*QAction) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_AddActions(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQGraphicsWidgetFromPointer(NewQGraphicsWidgetFromPointer(nil).__addActions_actions_newList())
			for _, v := range actions {
				tmpList.__addActions_actions_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QGraphicsWidget) AdjustSize() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_AdjustSize(ptr.Pointer())
	}
}

//export callbackQGraphicsWidget_ChangeEvent
func callbackQGraphicsWidget_ChangeEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "changeEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).ChangeEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectChangeEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "changeEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "changeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "changeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectChangeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "changeEvent")
	}
}

func (ptr *QGraphicsWidget) ChangeEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_ChangeEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsWidget) ChangeEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_ChangeEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsWidget_CloseEvent
func callbackQGraphicsWidget_CloseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "closeEvent"); signal != nil {
		(*(*func(*gui.QCloseEvent))(signal))(gui.NewQCloseEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).CloseEventDefault(gui.NewQCloseEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectCloseEvent(f func(event *gui.QCloseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "closeEvent"); signal != nil {
			f := func(event *gui.QCloseEvent) {
				(*(*func(*gui.QCloseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "closeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "closeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectCloseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "closeEvent")
	}
}

func (ptr *QGraphicsWidget) CloseEvent(event gui.QCloseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_CloseEvent(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

func (ptr *QGraphicsWidget) CloseEventDefault(event gui.QCloseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_CloseEventDefault(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

//export callbackQGraphicsWidget_GeometryChanged
func callbackQGraphicsWidget_GeometryChanged(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "geometryChanged"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QGraphicsWidget) ConnectGeometryChanged(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "geometryChanged") {
			C.QGraphicsWidget_ConnectGeometryChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "geometryChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "geometryChanged"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "geometryChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "geometryChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectGeometryChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_DisconnectGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "geometryChanged")
	}
}

func (ptr *QGraphicsWidget) GeometryChanged() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_GeometryChanged(ptr.Pointer())
	}
}

//export callbackQGraphicsWidget_GrabKeyboardEvent
func callbackQGraphicsWidget_GrabKeyboardEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "grabKeyboardEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).GrabKeyboardEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectGrabKeyboardEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "grabKeyboardEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "grabKeyboardEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "grabKeyboardEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectGrabKeyboardEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "grabKeyboardEvent")
	}
}

func (ptr *QGraphicsWidget) GrabKeyboardEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_GrabKeyboardEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsWidget) GrabKeyboardEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_GrabKeyboardEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsWidget_GrabMouseEvent
func callbackQGraphicsWidget_GrabMouseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "grabMouseEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).GrabMouseEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectGrabMouseEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "grabMouseEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "grabMouseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "grabMouseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectGrabMouseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "grabMouseEvent")
	}
}

func (ptr *QGraphicsWidget) GrabMouseEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_GrabMouseEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsWidget) GrabMouseEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_GrabMouseEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsWidget_HideEvent
func callbackQGraphicsWidget_HideEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hideEvent"); signal != nil {
		(*(*func(*gui.QHideEvent))(signal))(gui.NewQHideEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).HideEventDefault(gui.NewQHideEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectHideEvent(f func(event *gui.QHideEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hideEvent"); signal != nil {
			f := func(event *gui.QHideEvent) {
				(*(*func(*gui.QHideEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "hideEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hideEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectHideEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hideEvent")
	}
}

func (ptr *QGraphicsWidget) HideEvent(event gui.QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_HideEvent(ptr.Pointer(), gui.PointerFromQHideEvent(event))
	}
}

func (ptr *QGraphicsWidget) HideEventDefault(event gui.QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_HideEventDefault(ptr.Pointer(), gui.PointerFromQHideEvent(event))
	}
}

func (ptr *QGraphicsWidget) InsertAction(before QAction_ITF, action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_InsertAction(ptr.Pointer(), PointerFromQAction(before), PointerFromQAction(action))
	}
}

func (ptr *QGraphicsWidget) InsertActions(before QAction_ITF, actions []*QAction) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_InsertActions(ptr.Pointer(), PointerFromQAction(before), func() unsafe.Pointer {
			tmpList := NewQGraphicsWidgetFromPointer(NewQGraphicsWidgetFromPointer(nil).__insertActions_actions_newList())
			for _, v := range actions {
				tmpList.__insertActions_actions_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

//export callbackQGraphicsWidget_MoveEvent
func callbackQGraphicsWidget_MoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "moveEvent"); signal != nil {
		(*(*func(*QGraphicsSceneMoveEvent))(signal))(NewQGraphicsSceneMoveEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).MoveEventDefault(NewQGraphicsSceneMoveEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectMoveEvent(f func(event *QGraphicsSceneMoveEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "moveEvent"); signal != nil {
			f := func(event *QGraphicsSceneMoveEvent) {
				(*(*func(*QGraphicsSceneMoveEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "moveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "moveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "moveEvent")
	}
}

func (ptr *QGraphicsWidget) MoveEvent(event QGraphicsSceneMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_MoveEvent(ptr.Pointer(), PointerFromQGraphicsSceneMoveEvent(event))
	}
}

func (ptr *QGraphicsWidget) MoveEventDefault(event QGraphicsSceneMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_MoveEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneMoveEvent(event))
	}
}

//export callbackQGraphicsWidget_Paint
func callbackQGraphicsWidget_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paint"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).PaintDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsWidget) ConnectPaint(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paint"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectPaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paint")
	}
}

func (ptr *QGraphicsWidget) Paint(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_Paint(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsWidget) PaintDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_PaintDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

//export callbackQGraphicsWidget_PaintWindowFrame
func callbackQGraphicsWidget_PaintWindowFrame(ptr unsafe.Pointer, painter unsafe.Pointer, option unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paintWindowFrame"); signal != nil {
		(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).PaintWindowFrameDefault(gui.NewQPainterFromPointer(painter), NewQStyleOptionGraphicsItemFromPointer(option), NewQWidgetFromPointer(widget))
	}
}

func (ptr *QGraphicsWidget) ConnectPaintWindowFrame(f func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paintWindowFrame"); signal != nil {
			f := func(painter *gui.QPainter, option *QStyleOptionGraphicsItem, widget *QWidget) {
				(*(*func(*gui.QPainter, *QStyleOptionGraphicsItem, *QWidget))(signal))(painter, option, widget)
				f(painter, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "paintWindowFrame", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paintWindowFrame", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectPaintWindowFrame() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paintWindowFrame")
	}
}

func (ptr *QGraphicsWidget) PaintWindowFrame(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_PaintWindowFrame(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

func (ptr *QGraphicsWidget) PaintWindowFrameDefault(painter gui.QPainter_ITF, option QStyleOptionGraphicsItem_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_PaintWindowFrameDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), PointerFromQStyleOptionGraphicsItem(option), PointerFromQWidget(widget))
	}
}

//export callbackQGraphicsWidget_PolishEvent
func callbackQGraphicsWidget_PolishEvent(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "polishEvent"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsWidgetFromPointer(ptr).PolishEventDefault()
	}
}

func (ptr *QGraphicsWidget) ConnectPolishEvent(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "polishEvent"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "polishEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "polishEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectPolishEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "polishEvent")
	}
}

func (ptr *QGraphicsWidget) PolishEvent() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_PolishEvent(ptr.Pointer())
	}
}

func (ptr *QGraphicsWidget) PolishEventDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_PolishEventDefault(ptr.Pointer())
	}
}

func (ptr *QGraphicsWidget) ReleaseShortcut(id int) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_ReleaseShortcut(ptr.Pointer(), C.int(int32(id)))
	}
}

func (ptr *QGraphicsWidget) RemoveAction(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_RemoveAction(ptr.Pointer(), PointerFromQAction(action))
	}
}

func (ptr *QGraphicsWidget) Resize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_Resize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QGraphicsWidget) Resize2(w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_Resize2(ptr.Pointer(), C.double(w), C.double(h))
	}
}

//export callbackQGraphicsWidget_ResizeEvent
func callbackQGraphicsWidget_ResizeEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "resizeEvent"); signal != nil {
		(*(*func(*QGraphicsSceneResizeEvent))(signal))(NewQGraphicsSceneResizeEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).ResizeEventDefault(NewQGraphicsSceneResizeEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectResizeEvent(f func(event *QGraphicsSceneResizeEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "resizeEvent"); signal != nil {
			f := func(event *QGraphicsSceneResizeEvent) {
				(*(*func(*QGraphicsSceneResizeEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "resizeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "resizeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectResizeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "resizeEvent")
	}
}

func (ptr *QGraphicsWidget) ResizeEvent(event QGraphicsSceneResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_ResizeEvent(ptr.Pointer(), PointerFromQGraphicsSceneResizeEvent(event))
	}
}

func (ptr *QGraphicsWidget) ResizeEventDefault(event QGraphicsSceneResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_ResizeEventDefault(ptr.Pointer(), PointerFromQGraphicsSceneResizeEvent(event))
	}
}

func (ptr *QGraphicsWidget) SetAttribute(attribute core.Qt__WidgetAttribute, on bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetAttribute(ptr.Pointer(), C.longlong(attribute), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QGraphicsWidget) SetAutoFillBackground(enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetAutoFillBackground(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsWidget) SetContentsMargins(left float64, top float64, right float64, bottom float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetContentsMargins(ptr.Pointer(), C.double(left), C.double(top), C.double(right), C.double(bottom))
	}
}

func (ptr *QGraphicsWidget) SetFocusPolicy(policy core.Qt__FocusPolicy) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetFocusPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QGraphicsWidget) SetFont(font gui.QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetFont(ptr.Pointer(), gui.PointerFromQFont(font))
	}
}

func (ptr *QGraphicsWidget) SetGeometry2(x float64, y float64, w float64, h float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetGeometry2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h))
	}
}

func (ptr *QGraphicsWidget) SetLayout(layout QGraphicsLayout_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetLayout(ptr.Pointer(), PointerFromQGraphicsLayout(layout))
	}
}

func (ptr *QGraphicsWidget) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetLayoutDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QGraphicsWidget) SetPalette(palette gui.QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetPalette(ptr.Pointer(), gui.PointerFromQPalette(palette))
	}
}

func (ptr *QGraphicsWidget) SetShortcutAutoRepeat(id int, enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetShortcutAutoRepeat(ptr.Pointer(), C.int(int32(id)), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsWidget) SetShortcutEnabled(id int, enabled bool) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetShortcutEnabled(ptr.Pointer(), C.int(int32(id)), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGraphicsWidget) SetStyle(style QStyle_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetStyle(ptr.Pointer(), PointerFromQStyle(style))
	}
}

func QGraphicsWidget_SetTabOrder(first QGraphicsWidget_ITF, second QGraphicsWidget_ITF) {
	C.QGraphicsWidget_QGraphicsWidget_SetTabOrder(PointerFromQGraphicsWidget(first), PointerFromQGraphicsWidget(second))
}

func (ptr *QGraphicsWidget) SetTabOrder(first QGraphicsWidget_ITF, second QGraphicsWidget_ITF) {
	C.QGraphicsWidget_QGraphicsWidget_SetTabOrder(PointerFromQGraphicsWidget(first), PointerFromQGraphicsWidget(second))
}

func (ptr *QGraphicsWidget) SetWindowFlags(wFlags core.Qt__WindowType) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetWindowFlags(ptr.Pointer(), C.longlong(wFlags))
	}
}

func (ptr *QGraphicsWidget) SetWindowFrameMargins(left float64, top float64, right float64, bottom float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetWindowFrameMargins(ptr.Pointer(), C.double(left), C.double(top), C.double(right), C.double(bottom))
	}
}

func (ptr *QGraphicsWidget) SetWindowTitle(title string) {
	if ptr.Pointer() != nil {
		var titleC *C.char
		if title != "" {
			titleC = C.CString(title)
			defer C.free(unsafe.Pointer(titleC))
		}
		C.QGraphicsWidget_SetWindowTitle(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: titleC, len: C.longlong(len(title))})
	}
}

//export callbackQGraphicsWidget_ShowEvent
func callbackQGraphicsWidget_ShowEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "showEvent"); signal != nil {
		(*(*func(*gui.QShowEvent))(signal))(gui.NewQShowEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).ShowEventDefault(gui.NewQShowEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectShowEvent(f func(event *gui.QShowEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "showEvent"); signal != nil {
			f := func(event *gui.QShowEvent) {
				(*(*func(*gui.QShowEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "showEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "showEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectShowEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "showEvent")
	}
}

func (ptr *QGraphicsWidget) ShowEvent(event gui.QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_ShowEvent(ptr.Pointer(), gui.PointerFromQShowEvent(event))
	}
}

func (ptr *QGraphicsWidget) ShowEventDefault(event gui.QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_ShowEventDefault(ptr.Pointer(), gui.PointerFromQShowEvent(event))
	}
}

//export callbackQGraphicsWidget_UngrabKeyboardEvent
func callbackQGraphicsWidget_UngrabKeyboardEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "ungrabKeyboardEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).UngrabKeyboardEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectUngrabKeyboardEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "ungrabKeyboardEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "ungrabKeyboardEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "ungrabKeyboardEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectUngrabKeyboardEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "ungrabKeyboardEvent")
	}
}

func (ptr *QGraphicsWidget) UngrabKeyboardEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_UngrabKeyboardEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsWidget) UngrabKeyboardEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_UngrabKeyboardEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGraphicsWidget_UngrabMouseEvent
func callbackQGraphicsWidget_UngrabMouseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "ungrabMouseEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).UngrabMouseEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGraphicsWidget) ConnectUngrabMouseEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "ungrabMouseEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "ungrabMouseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "ungrabMouseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectUngrabMouseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "ungrabMouseEvent")
	}
}

func (ptr *QGraphicsWidget) UngrabMouseEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_UngrabMouseEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsWidget) UngrabMouseEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_UngrabMouseEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGraphicsWidget) UnsetLayoutDirection() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_UnsetLayoutDirection(ptr.Pointer())
	}
}

func (ptr *QGraphicsWidget) UnsetWindowFrameMargins() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_UnsetWindowFrameMargins(ptr.Pointer())
	}
}

//export callbackQGraphicsWidget_DestroyQGraphicsWidget
func callbackQGraphicsWidget_DestroyQGraphicsWidget(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QGraphicsWidget"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQGraphicsWidgetFromPointer(ptr).DestroyQGraphicsWidgetDefault()
	}
}

func (ptr *QGraphicsWidget) ConnectDestroyQGraphicsWidget(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QGraphicsWidget"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsWidget", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QGraphicsWidget", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectDestroyQGraphicsWidget() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QGraphicsWidget")
	}
}

func (ptr *QGraphicsWidget) DestroyQGraphicsWidget() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_DestroyQGraphicsWidget(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsWidget) DestroyQGraphicsWidgetDefault() {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_DestroyQGraphicsWidgetDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QGraphicsWidget) Font() *gui.QFont {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontFromPointer(C.QGraphicsWidget_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) Layout() *QGraphicsLayout {
	if ptr.Pointer() != nil {
		return NewQGraphicsLayoutFromPointer(C.QGraphicsWidget_Layout(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGraphicsWidget) FocusWidget() *QGraphicsWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsWidgetFromPointer(C.QGraphicsWidget_FocusWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) Actions() []*QAction {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QAction {
			out := make([]*QAction, int(l.len))
			tmpList := NewQGraphicsWidgetFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__actions_atList(i)
			}
			return out
		}(C.QGraphicsWidget_Actions(ptr.Pointer()))
	}
	return make([]*QAction, 0)
}

func (ptr *QGraphicsWidget) Palette() *gui.QPalette {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPaletteFromPointer(C.QGraphicsWidget_Palette(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsWidget_BoundingRect
func callbackQGraphicsWidget_BoundingRect(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "boundingRect"); signal != nil {
		return core.PointerFromQRectF((*(*func() *core.QRectF)(signal))())
	}

	return core.PointerFromQRectF(NewQGraphicsWidgetFromPointer(ptr).BoundingRectDefault())
}

func (ptr *QGraphicsWidget) ConnectBoundingRect(f func() *core.QRectF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "boundingRect"); signal != nil {
			f := func() *core.QRectF {
				(*(*func() *core.QRectF)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "boundingRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectBoundingRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "boundingRect")
	}
}

func (ptr *QGraphicsWidget) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsWidget_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) BoundingRectDefault() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsWidget_BoundingRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) Rect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsWidget_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) WindowFrameGeometry() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsWidget_WindowFrameGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) WindowFrameRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsWidget_WindowFrameRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) Size() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsWidget_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

//export callbackQGraphicsWidget_SizeHint
func callbackQGraphicsWidget_SizeHint(ptr unsafe.Pointer, which C.longlong, constraint unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeHint"); signal != nil {
		return core.PointerFromQSizeF((*(*func(core.Qt__SizeHint, *core.QSizeF) *core.QSizeF)(signal))(core.Qt__SizeHint(which), core.NewQSizeFFromPointer(constraint)))
	}

	return core.PointerFromQSizeF(NewQGraphicsWidgetFromPointer(ptr).SizeHintDefault(core.Qt__SizeHint(which), core.NewQSizeFFromPointer(constraint)))
}

func (ptr *QGraphicsWidget) ConnectSizeHint(f func(which core.Qt__SizeHint, constraint *core.QSizeF) *core.QSizeF) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sizeHint"); signal != nil {
			f := func(which core.Qt__SizeHint, constraint *core.QSizeF) *core.QSizeF {
				(*(*func(core.Qt__SizeHint, *core.QSizeF) *core.QSizeF)(signal))(which, constraint)
				return f(which, constraint)
			}
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectSizeHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sizeHint")
	}
}

func (ptr *QGraphicsWidget) SizeHint(which core.Qt__SizeHint, constraint core.QSizeF_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsWidget_SizeHint(ptr.Pointer(), C.longlong(which), core.PointerFromQSizeF(constraint)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) SizeHintDefault(which core.Qt__SizeHint, constraint core.QSizeF_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsWidget_SizeHintDefault(ptr.Pointer(), C.longlong(which), core.PointerFromQSizeF(constraint)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) WindowTitle() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGraphicsWidget_WindowTitle(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGraphicsWidget) Style() *QStyle {
	if ptr.Pointer() != nil {
		tmpValue := NewQStyleFromPointer(C.QGraphicsWidget_Style(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) FocusPolicy() core.Qt__FocusPolicy {
	if ptr.Pointer() != nil {
		return core.Qt__FocusPolicy(C.QGraphicsWidget_FocusPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsWidget) LayoutDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QGraphicsWidget_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsWidget) WindowFlags() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QGraphicsWidget_WindowFlags(ptr.Pointer()))
	}
	return 0
}

//export callbackQGraphicsWidget_WindowFrameSectionAt
func callbackQGraphicsWidget_WindowFrameSectionAt(ptr unsafe.Pointer, pos unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(ptr, "windowFrameSectionAt"); signal != nil {
		return C.longlong((*(*func(*core.QPointF) core.Qt__WindowFrameSection)(signal))(core.NewQPointFFromPointer(pos)))
	}

	return C.longlong(NewQGraphicsWidgetFromPointer(ptr).WindowFrameSectionAtDefault(core.NewQPointFFromPointer(pos)))
}

func (ptr *QGraphicsWidget) ConnectWindowFrameSectionAt(f func(pos *core.QPointF) core.Qt__WindowFrameSection) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "windowFrameSectionAt"); signal != nil {
			f := func(pos *core.QPointF) core.Qt__WindowFrameSection {
				(*(*func(*core.QPointF) core.Qt__WindowFrameSection)(signal))(pos)
				return f(pos)
			}
			qt.ConnectSignal(ptr.Pointer(), "windowFrameSectionAt", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "windowFrameSectionAt", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectWindowFrameSectionAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "windowFrameSectionAt")
	}
}

func (ptr *QGraphicsWidget) WindowFrameSectionAt(pos core.QPointF_ITF) core.Qt__WindowFrameSection {
	if ptr.Pointer() != nil {
		return core.Qt__WindowFrameSection(C.QGraphicsWidget_WindowFrameSectionAt(ptr.Pointer(), core.PointerFromQPointF(pos)))
	}
	return 0
}

func (ptr *QGraphicsWidget) WindowFrameSectionAtDefault(pos core.QPointF_ITF) core.Qt__WindowFrameSection {
	if ptr.Pointer() != nil {
		return core.Qt__WindowFrameSection(C.QGraphicsWidget_WindowFrameSectionAtDefault(ptr.Pointer(), core.PointerFromQPointF(pos)))
	}
	return 0
}

func (ptr *QGraphicsWidget) WindowType() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QGraphicsWidget_WindowType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGraphicsWidget) AutoFillBackground() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_AutoFillBackground(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsWidget) IsActiveWindow() bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_IsActiveWindow(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QGraphicsWidget) TestAttribute(attribute core.Qt__WidgetAttribute) bool {
	if ptr.Pointer() != nil {
		return int8(C.QGraphicsWidget_TestAttribute(ptr.Pointer(), C.longlong(attribute))) != 0
	}
	return false
}

func (ptr *QGraphicsWidget) GetWindowFrameMargins(left float64, top float64, right float64, bottom float64) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_GetWindowFrameMargins(ptr.Pointer(), C.double(left), C.double(top), C.double(right), C.double(bottom))
	}
}

//export callbackQGraphicsWidget_InitStyleOption
func callbackQGraphicsWidget_InitStyleOption(ptr unsafe.Pointer, option unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "initStyleOption"); signal != nil {
		(*(*func(*QStyleOption))(signal))(NewQStyleOptionFromPointer(option))
	} else {
		NewQGraphicsWidgetFromPointer(ptr).InitStyleOptionDefault(NewQStyleOptionFromPointer(option))
	}
}

func (ptr *QGraphicsWidget) ConnectInitStyleOption(f func(option *QStyleOption)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "initStyleOption"); signal != nil {
			f := func(option *QStyleOption) {
				(*(*func(*QStyleOption))(signal))(option)
				f(option)
			}
			qt.ConnectSignal(ptr.Pointer(), "initStyleOption", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "initStyleOption", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QGraphicsWidget) DisconnectInitStyleOption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "initStyleOption")
	}
}

func (ptr *QGraphicsWidget) InitStyleOption(option QStyleOption_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_InitStyleOption(ptr.Pointer(), PointerFromQStyleOption(option))
	}
}

func (ptr *QGraphicsWidget) InitStyleOptionDefault(option QStyleOption_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_InitStyleOptionDefault(ptr.Pointer(), PointerFromQStyleOption(option))
	}
}

func (ptr *QGraphicsWidget) Geometry() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QGraphicsWidget_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) MaximumSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsWidget_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) SetMaximumSize(maximumSize core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetMaximumSize(ptr.Pointer(), core.PointerFromQSizeF(maximumSize))
	}
}

func (ptr *QGraphicsWidget) MinimumSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsWidget_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) SetMinimumSize(minimumSize core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetMinimumSize(ptr.Pointer(), core.PointerFromQSizeF(minimumSize))
	}
}

func (ptr *QGraphicsWidget) PreferredSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFFromPointer(C.QGraphicsWidget_PreferredSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) SetPreferredSize(preferredSize core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetPreferredSize(ptr.Pointer(), core.PointerFromQSizeF(preferredSize))
	}
}

func (ptr *QGraphicsWidget) SizePolicy() *QSizePolicy {
	if ptr.Pointer() != nil {
		tmpValue := NewQSizePolicyFromPointer(C.QGraphicsWidget_SizePolicy(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizePolicy).DestroyQSizePolicy)
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) SetSizePolicy(sizePolicy QSizePolicy_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget_SetSizePolicy(ptr.Pointer(), PointerFromQSizePolicy(sizePolicy))
	}
}

func (ptr *QGraphicsWidget) __addActions_actions_atList(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QGraphicsWidget___addActions_actions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) __addActions_actions_setList(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget___addActions_actions_setList(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QGraphicsWidget) __addActions_actions_newList() unsafe.Pointer {
	return C.QGraphicsWidget___addActions_actions_newList(ptr.Pointer())
}

func (ptr *QGraphicsWidget) __insertActions_actions_atList(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QGraphicsWidget___insertActions_actions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) __insertActions_actions_setList(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget___insertActions_actions_setList(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QGraphicsWidget) __insertActions_actions_newList() unsafe.Pointer {
	return C.QGraphicsWidget___insertActions_actions_newList(ptr.Pointer())
}

func (ptr *QGraphicsWidget) __actions_atList(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QGraphicsWidget___actions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGraphicsWidget) __actions_setList(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QGraphicsWidget___actions_setList(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QGraphicsWidget) __actions_newList() unsafe.Pointer {
	return C.QGraphicsWidget___actions_newList(ptr.Pointer())
}

//go:generate stringer -type=QHeaderView__ResizeMode
//QHeaderView::ResizeMode
type QHeaderView__ResizeMode int64

const (
	QHeaderView__Interactive      QHeaderView__ResizeMode = QHeaderView__ResizeMode(0)
	QHeaderView__Stretch          QHeaderView__ResizeMode = QHeaderView__ResizeMode(1)
	QHeaderView__Fixed            QHeaderView__ResizeMode = QHeaderView__ResizeMode(2)
	QHeaderView__ResizeToContents QHeaderView__ResizeMode = QHeaderView__ResizeMode(3)
	QHeaderView__Custom           QHeaderView__ResizeMode = QHeaderView__ResizeMode(QHeaderView__Fixed)
)

//go:generate stringer -type=QInputDialog__InputDialogOption
//QInputDialog::InputDialogOption
type QInputDialog__InputDialogOption int64

const (
	QInputDialog__NoButtons                    QInputDialog__InputDialogOption = QInputDialog__InputDialogOption(0x00000001)
	QInputDialog__UseListViewForComboBoxItems  QInputDialog__InputDialogOption = QInputDialog__InputDialogOption(0x00000002)
	QInputDialog__UsePlainTextEditForTextInput QInputDialog__InputDialogOption = QInputDialog__InputDialogOption(0x00000004)
)

//go:generate stringer -type=QInputDialog__InputMode
//QInputDialog::InputMode
type QInputDialog__InputMode int64

const (
	QInputDialog__TextInput   QInputDialog__InputMode = QInputDialog__InputMode(0)
	QInputDialog__IntInput    QInputDialog__InputMode = QInputDialog__InputMode(1)
	QInputDialog__DoubleInput QInputDialog__InputMode = QInputDialog__InputMode(2)
)

//go:generate stringer -type=QLCDNumber__Mode
//QLCDNumber::Mode
type QLCDNumber__Mode int64

const (
	QLCDNumber__Hex QLCDNumber__Mode = QLCDNumber__Mode(0)
	QLCDNumber__Dec QLCDNumber__Mode = QLCDNumber__Mode(1)
	QLCDNumber__Oct QLCDNumber__Mode = QLCDNumber__Mode(2)
	QLCDNumber__Bin QLCDNumber__Mode = QLCDNumber__Mode(3)
)

//go:generate stringer -type=QLCDNumber__SegmentStyle
//QLCDNumber::SegmentStyle
type QLCDNumber__SegmentStyle int64

var (
	QLCDNumber__Outline QLCDNumber__SegmentStyle = QLCDNumber__SegmentStyle(0)
	QLCDNumber__Filled  QLCDNumber__SegmentStyle = QLCDNumber__SegmentStyle(1)
	QLCDNumber__Flat    QLCDNumber__SegmentStyle = QLCDNumber__SegmentStyle(2)
)

type QLabel struct {
	QFrame
}

type QLabel_ITF interface {
	QFrame_ITF
	QLabel_PTR() *QLabel
}

func (ptr *QLabel) QLabel_PTR() *QLabel {
	return ptr
}

func (ptr *QLabel) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QFrame_PTR().Pointer()
	}
	return nil
}

func (ptr *QLabel) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QFrame_PTR().SetPointer(p)
	}
}

func PointerFromQLabel(ptr QLabel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLabel_PTR().Pointer()
	}
	return nil
}

func NewQLabelFromPointer(ptr unsafe.Pointer) (n *QLabel) {
	n = new(QLabel)
	n.SetPointer(ptr)
	return
}
func NewQLabel(parent QWidget_ITF, ff core.Qt__WindowType) *QLabel {
	tmpValue := NewQLabelFromPointer(C.QLabel_NewQLabel(PointerFromQWidget(parent), C.longlong(ff)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQLabel2(text string, parent QWidget_ITF, ff core.Qt__WindowType) *QLabel {
	var textC *C.char
	if text != "" {
		textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
	}
	tmpValue := NewQLabelFromPointer(C.QLabel_NewQLabel2(C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, PointerFromQWidget(parent), C.longlong(ff)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQLabel_Clear
func callbackQLabel_Clear(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "clear"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQLabelFromPointer(ptr).ClearDefault()
	}
}

func (ptr *QLabel) ConnectClear(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "clear"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "clear", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "clear", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectClear() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "clear")
	}
}

func (ptr *QLabel) Clear() {
	if ptr.Pointer() != nil {
		C.QLabel_Clear(ptr.Pointer())
	}
}

func (ptr *QLabel) ClearDefault() {
	if ptr.Pointer() != nil {
		C.QLabel_ClearDefault(ptr.Pointer())
	}
}

//export callbackQLabel_LinkActivated
func callbackQLabel_LinkActivated(ptr unsafe.Pointer, link C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "linkActivated"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(link))
	}

}

func (ptr *QLabel) ConnectLinkActivated(f func(link string)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "linkActivated") {
			C.QLabel_ConnectLinkActivated(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "linkActivated")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "linkActivated"); signal != nil {
			f := func(link string) {
				(*(*func(string))(signal))(link)
				f(link)
			}
			qt.ConnectSignal(ptr.Pointer(), "linkActivated", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "linkActivated", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectLinkActivated() {
	if ptr.Pointer() != nil {
		C.QLabel_DisconnectLinkActivated(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "linkActivated")
	}
}

func (ptr *QLabel) LinkActivated(link string) {
	if ptr.Pointer() != nil {
		var linkC *C.char
		if link != "" {
			linkC = C.CString(link)
			defer C.free(unsafe.Pointer(linkC))
		}
		C.QLabel_LinkActivated(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: linkC, len: C.longlong(len(link))})
	}
}

//export callbackQLabel_LinkHovered
func callbackQLabel_LinkHovered(ptr unsafe.Pointer, link C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "linkHovered"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(link))
	}

}

func (ptr *QLabel) ConnectLinkHovered(f func(link string)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "linkHovered") {
			C.QLabel_ConnectLinkHovered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "linkHovered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "linkHovered"); signal != nil {
			f := func(link string) {
				(*(*func(string))(signal))(link)
				f(link)
			}
			qt.ConnectSignal(ptr.Pointer(), "linkHovered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "linkHovered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectLinkHovered() {
	if ptr.Pointer() != nil {
		C.QLabel_DisconnectLinkHovered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "linkHovered")
	}
}

func (ptr *QLabel) LinkHovered(link string) {
	if ptr.Pointer() != nil {
		var linkC *C.char
		if link != "" {
			linkC = C.CString(link)
			defer C.free(unsafe.Pointer(linkC))
		}
		C.QLabel_LinkHovered(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: linkC, len: C.longlong(len(link))})
	}
}

func (ptr *QLabel) SetAlignment(vqt core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QLabel_SetAlignment(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QLabel) SetBuddy(buddy QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QLabel_SetBuddy(ptr.Pointer(), PointerFromQWidget(buddy))
	}
}

func (ptr *QLabel) SetIndent(vin int) {
	if ptr.Pointer() != nil {
		C.QLabel_SetIndent(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QLabel) SetMargin(vin int) {
	if ptr.Pointer() != nil {
		C.QLabel_SetMargin(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQLabel_SetMovie
func callbackQLabel_SetMovie(ptr unsafe.Pointer, movie unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setMovie"); signal != nil {
		(*(*func(*gui.QMovie))(signal))(gui.NewQMovieFromPointer(movie))
	} else {
		NewQLabelFromPointer(ptr).SetMovieDefault(gui.NewQMovieFromPointer(movie))
	}
}

func (ptr *QLabel) ConnectSetMovie(f func(movie *gui.QMovie)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setMovie"); signal != nil {
			f := func(movie *gui.QMovie) {
				(*(*func(*gui.QMovie))(signal))(movie)
				f(movie)
			}
			qt.ConnectSignal(ptr.Pointer(), "setMovie", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setMovie", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectSetMovie() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setMovie")
	}
}

func (ptr *QLabel) SetMovie(movie gui.QMovie_ITF) {
	if ptr.Pointer() != nil {
		C.QLabel_SetMovie(ptr.Pointer(), gui.PointerFromQMovie(movie))
	}
}

func (ptr *QLabel) SetMovieDefault(movie gui.QMovie_ITF) {
	if ptr.Pointer() != nil {
		C.QLabel_SetMovieDefault(ptr.Pointer(), gui.PointerFromQMovie(movie))
	}
}

//export callbackQLabel_SetNum2
func callbackQLabel_SetNum2(ptr unsafe.Pointer, num C.double) {
	if signal := qt.GetSignal(ptr, "setNum2"); signal != nil {
		(*(*func(float64))(signal))(float64(num))
	} else {
		NewQLabelFromPointer(ptr).SetNum2Default(float64(num))
	}
}

func (ptr *QLabel) ConnectSetNum2(f func(num float64)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setNum2"); signal != nil {
			f := func(num float64) {
				(*(*func(float64))(signal))(num)
				f(num)
			}
			qt.ConnectSignal(ptr.Pointer(), "setNum2", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setNum2", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectSetNum2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setNum2")
	}
}

func (ptr *QLabel) SetNum2(num float64) {
	if ptr.Pointer() != nil {
		C.QLabel_SetNum2(ptr.Pointer(), C.double(num))
	}
}

func (ptr *QLabel) SetNum2Default(num float64) {
	if ptr.Pointer() != nil {
		C.QLabel_SetNum2Default(ptr.Pointer(), C.double(num))
	}
}

//export callbackQLabel_SetNum
func callbackQLabel_SetNum(ptr unsafe.Pointer, num C.int) {
	if signal := qt.GetSignal(ptr, "setNum"); signal != nil {
		(*(*func(int))(signal))(int(int32(num)))
	} else {
		NewQLabelFromPointer(ptr).SetNumDefault(int(int32(num)))
	}
}

func (ptr *QLabel) ConnectSetNum(f func(num int)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setNum"); signal != nil {
			f := func(num int) {
				(*(*func(int))(signal))(num)
				f(num)
			}
			qt.ConnectSignal(ptr.Pointer(), "setNum", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setNum", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectSetNum() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setNum")
	}
}

func (ptr *QLabel) SetNum(num int) {
	if ptr.Pointer() != nil {
		C.QLabel_SetNum(ptr.Pointer(), C.int(int32(num)))
	}
}

func (ptr *QLabel) SetNumDefault(num int) {
	if ptr.Pointer() != nil {
		C.QLabel_SetNumDefault(ptr.Pointer(), C.int(int32(num)))
	}
}

func (ptr *QLabel) SetOpenExternalLinks(open bool) {
	if ptr.Pointer() != nil {
		C.QLabel_SetOpenExternalLinks(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(open))))
	}
}

//export callbackQLabel_SetPicture
func callbackQLabel_SetPicture(ptr unsafe.Pointer, picture unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setPicture"); signal != nil {
		(*(*func(*gui.QPicture))(signal))(gui.NewQPictureFromPointer(picture))
	} else {
		NewQLabelFromPointer(ptr).SetPictureDefault(gui.NewQPictureFromPointer(picture))
	}
}

func (ptr *QLabel) ConnectSetPicture(f func(picture *gui.QPicture)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setPicture"); signal != nil {
			f := func(picture *gui.QPicture) {
				(*(*func(*gui.QPicture))(signal))(picture)
				f(picture)
			}
			qt.ConnectSignal(ptr.Pointer(), "setPicture", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setPicture", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectSetPicture() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setPicture")
	}
}

func (ptr *QLabel) SetPicture(picture gui.QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QLabel_SetPicture(ptr.Pointer(), gui.PointerFromQPicture(picture))
	}
}

func (ptr *QLabel) SetPictureDefault(picture gui.QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QLabel_SetPictureDefault(ptr.Pointer(), gui.PointerFromQPicture(picture))
	}
}

//export callbackQLabel_SetPixmap
func callbackQLabel_SetPixmap(ptr unsafe.Pointer, vqp unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setPixmap"); signal != nil {
		(*(*func(*gui.QPixmap))(signal))(gui.NewQPixmapFromPointer(vqp))
	} else {
		NewQLabelFromPointer(ptr).SetPixmapDefault(gui.NewQPixmapFromPointer(vqp))
	}
}

func (ptr *QLabel) ConnectSetPixmap(f func(vqp *gui.QPixmap)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setPixmap"); signal != nil {
			f := func(vqp *gui.QPixmap) {
				(*(*func(*gui.QPixmap))(signal))(vqp)
				f(vqp)
			}
			qt.ConnectSignal(ptr.Pointer(), "setPixmap", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setPixmap", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectSetPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setPixmap")
	}
}

func (ptr *QLabel) SetPixmap(vqp gui.QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QLabel_SetPixmap(ptr.Pointer(), gui.PointerFromQPixmap(vqp))
	}
}

func (ptr *QLabel) SetPixmapDefault(vqp gui.QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QLabel_SetPixmapDefault(ptr.Pointer(), gui.PointerFromQPixmap(vqp))
	}
}

func (ptr *QLabel) SetScaledContents(vbo bool) {
	if ptr.Pointer() != nil {
		C.QLabel_SetScaledContents(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QLabel) SetSelection(start int, length int) {
	if ptr.Pointer() != nil {
		C.QLabel_SetSelection(ptr.Pointer(), C.int(int32(start)), C.int(int32(length)))
	}
}

//export callbackQLabel_SetText
func callbackQLabel_SetText(ptr unsafe.Pointer, vqs C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "setText"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(vqs))
	} else {
		NewQLabelFromPointer(ptr).SetTextDefault(cGoUnpackString(vqs))
	}
}

func (ptr *QLabel) ConnectSetText(f func(vqs string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setText"); signal != nil {
			f := func(vqs string) {
				(*(*func(string))(signal))(vqs)
				f(vqs)
			}
			qt.ConnectSignal(ptr.Pointer(), "setText", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setText", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectSetText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setText")
	}
}

func (ptr *QLabel) SetText(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QLabel_SetText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QLabel) SetTextDefault(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QLabel_SetTextDefault(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QLabel) SetTextFormat(vqt core.Qt__TextFormat) {
	if ptr.Pointer() != nil {
		C.QLabel_SetTextFormat(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QLabel) SetTextInteractionFlags(flags core.Qt__TextInteractionFlag) {
	if ptr.Pointer() != nil {
		C.QLabel_SetTextInteractionFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QLabel) SetWordWrap(on bool) {
	if ptr.Pointer() != nil {
		C.QLabel_SetWordWrap(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(on))))
	}
}

//export callbackQLabel_DestroyQLabel
func callbackQLabel_DestroyQLabel(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QLabel"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQLabelFromPointer(ptr).DestroyQLabelDefault()
	}
}

func (ptr *QLabel) ConnectDestroyQLabel(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QLabel"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QLabel", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QLabel", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLabel) DisconnectDestroyQLabel() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QLabel")
	}
}

func (ptr *QLabel) DestroyQLabel() {
	if ptr.Pointer() != nil {
		C.QLabel_DestroyQLabel(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QLabel) DestroyQLabelDefault() {
	if ptr.Pointer() != nil {
		C.QLabel_DestroyQLabelDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QLabel) Movie() *gui.QMovie {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQMovieFromPointer(C.QLabel_Movie(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLabel) SelectedText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLabel_SelectedText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLabel) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLabel_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLabel) Buddy() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QLabel_Buddy(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLabel) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QLabel_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLabel) TextFormat() core.Qt__TextFormat {
	if ptr.Pointer() != nil {
		return core.Qt__TextFormat(C.QLabel_TextFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLabel) TextInteractionFlags() core.Qt__TextInteractionFlag {
	if ptr.Pointer() != nil {
		return core.Qt__TextInteractionFlag(C.QLabel_TextInteractionFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLabel) HasScaledContents() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLabel_HasScaledContents(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLabel) HasSelectedText() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLabel_HasSelectedText(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLabel) OpenExternalLinks() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLabel_OpenExternalLinks(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLabel) WordWrap() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLabel_WordWrap(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLabel) Picture() *gui.QPicture {
	if ptr.Pointer() != nil {
		return gui.NewQPictureFromPointer(C.QLabel_Picture(ptr.Pointer()))
	}
	return nil
}

func (ptr *QLabel) Pixmap() *gui.QPixmap {
	if ptr.Pointer() != nil {
		return gui.NewQPixmapFromPointer(C.QLabel_Pixmap(ptr.Pointer()))
	}
	return nil
}

func (ptr *QLabel) Indent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLabel_Indent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLabel) Margin() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLabel_Margin(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLabel) SelectionStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLabel_SelectionStart(ptr.Pointer())))
	}
	return 0
}

type QLayout struct {
	core.QObject
	QLayoutItem
}

type QLayout_ITF interface {
	core.QObject_ITF
	QLayoutItem_ITF
	QLayout_PTR() *QLayout
}

func (ptr *QLayout) QLayout_PTR() *QLayout {
	return ptr
}

func (ptr *QLayout) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QLayout) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
		ptr.QLayoutItem_PTR().SetPointer(p)
	}
}

func PointerFromQLayout(ptr QLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLayout_PTR().Pointer()
	}
	return nil
}

func NewQLayoutFromPointer(ptr unsafe.Pointer) (n *QLayout) {
	n = new(QLayout)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QLayout__SizeConstraint
//QLayout::SizeConstraint
type QLayout__SizeConstraint int64

const (
	QLayout__SetDefaultConstraint QLayout__SizeConstraint = QLayout__SizeConstraint(0)
	QLayout__SetNoConstraint      QLayout__SizeConstraint = QLayout__SizeConstraint(1)
	QLayout__SetMinimumSize       QLayout__SizeConstraint = QLayout__SizeConstraint(2)
	QLayout__SetFixedSize         QLayout__SizeConstraint = QLayout__SizeConstraint(3)
	QLayout__SetMaximumSize       QLayout__SizeConstraint = QLayout__SizeConstraint(4)
	QLayout__SetMinAndMaxSize     QLayout__SizeConstraint = QLayout__SizeConstraint(5)
)

func NewQLayout2() *QLayout {
	tmpValue := NewQLayoutFromPointer(C.QLayout_NewQLayout2())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQLayout(parent QWidget_ITF) *QLayout {
	tmpValue := NewQLayoutFromPointer(C.QLayout_NewQLayout(PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QLayout) ReplaceWidget(from QWidget_ITF, to QWidget_ITF, options core.Qt__FindChildOption) *QLayoutItem {
	if ptr.Pointer() != nil {
		return NewQLayoutItemFromPointer(C.QLayout_ReplaceWidget(ptr.Pointer(), PointerFromQWidget(from), PointerFromQWidget(to), C.longlong(options)))
	}
	return nil
}

//export callbackQLayout_TakeAt
func callbackQLayout_TakeAt(ptr unsafe.Pointer, index C.int) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "takeAt"); signal != nil {
		return PointerFromQLayoutItem((*(*func(int) *QLayoutItem)(signal))(int(int32(index))))
	}

	return PointerFromQLayoutItem(NewQLayoutItem(0))
}

func (ptr *QLayout) ConnectTakeAt(f func(index int) *QLayoutItem) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "takeAt"); signal != nil {
			f := func(index int) *QLayoutItem {
				(*(*func(int) *QLayoutItem)(signal))(index)
				return f(index)
			}
			qt.ConnectSignal(ptr.Pointer(), "takeAt", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "takeAt", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectTakeAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "takeAt")
	}
}

func (ptr *QLayout) TakeAt(index int) *QLayoutItem {
	if ptr.Pointer() != nil {
		return NewQLayoutItemFromPointer(C.QLayout_TakeAt(ptr.Pointer(), C.int(int32(index))))
	}
	return nil
}

func QLayout_ClosestAcceptableSize(widget QWidget_ITF, size core.QSize_ITF) *core.QSize {
	tmpValue := core.NewQSizeFromPointer(C.QLayout_QLayout_ClosestAcceptableSize(PointerFromQWidget(widget), core.PointerFromQSize(size)))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QLayout) ClosestAcceptableSize(widget QWidget_ITF, size core.QSize_ITF) *core.QSize {
	tmpValue := core.NewQSizeFromPointer(C.QLayout_QLayout_ClosestAcceptableSize(PointerFromQWidget(widget), core.PointerFromQSize(size)))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func QLayout_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QLayout_QLayout_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QLayout) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QLayout_QLayout_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QLayout) Activate() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_Activate(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLayout) SetAlignment2(l QLayout_ITF, alignment core.Qt__AlignmentFlag) bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_SetAlignment2(ptr.Pointer(), PointerFromQLayout(l), C.longlong(alignment))) != 0
	}
	return false
}

func (ptr *QLayout) SetAlignment(w QWidget_ITF, alignment core.Qt__AlignmentFlag) bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_SetAlignment(ptr.Pointer(), PointerFromQWidget(w), C.longlong(alignment))) != 0
	}
	return false
}

func (ptr *QLayout) AddChildLayout(l QLayout_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_AddChildLayout(ptr.Pointer(), PointerFromQLayout(l))
	}
}

func (ptr *QLayout) AddChildWidget(w QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_AddChildWidget(ptr.Pointer(), PointerFromQWidget(w))
	}
}

//export callbackQLayout_AddItem
func callbackQLayout_AddItem(ptr unsafe.Pointer, item unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "addItem"); signal != nil {
		(*(*func(*QLayoutItem))(signal))(NewQLayoutItemFromPointer(item))
	}

}

func (ptr *QLayout) ConnectAddItem(f func(item *QLayoutItem)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "addItem"); signal != nil {
			f := func(item *QLayoutItem) {
				(*(*func(*QLayoutItem))(signal))(item)
				f(item)
			}
			qt.ConnectSignal(ptr.Pointer(), "addItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "addItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectAddItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "addItem")
	}
}

func (ptr *QLayout) AddItem(item QLayoutItem_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_AddItem(ptr.Pointer(), PointerFromQLayoutItem(item))
	}
}

func (ptr *QLayout) AddWidget(w QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_AddWidget(ptr.Pointer(), PointerFromQWidget(w))
	}
}

//export callbackQLayout_ChildEvent
func callbackQLayout_ChildEvent(ptr unsafe.Pointer, e unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(e))
	} else {
		NewQLayoutFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(e))
	}
}

func (ptr *QLayout) ConnectChildEvent(f func(e *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "childEvent"); signal != nil {
			f := func(e *core.QChildEvent) {
				(*(*func(*core.QChildEvent))(signal))(e)
				f(e)
			}
			qt.ConnectSignal(ptr.Pointer(), "childEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "childEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "childEvent")
	}
}

func (ptr *QLayout) ChildEvent(e core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(e))
	}
}

func (ptr *QLayout) ChildEventDefault(e core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(e))
	}
}

func (ptr *QLayout) RemoveItem(item QLayoutItem_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_RemoveItem(ptr.Pointer(), PointerFromQLayoutItem(item))
	}
}

func (ptr *QLayout) RemoveWidget(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_RemoveWidget(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QLayout) SetContentsMargins2(margins core.QMargins_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_SetContentsMargins2(ptr.Pointer(), core.PointerFromQMargins(margins))
	}
}

func (ptr *QLayout) SetContentsMargins(left int, top int, right int, bottom int) {
	if ptr.Pointer() != nil {
		C.QLayout_SetContentsMargins(ptr.Pointer(), C.int(int32(left)), C.int(int32(top)), C.int(int32(right)), C.int(int32(bottom)))
	}
}

func (ptr *QLayout) SetEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QLayout_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

//export callbackQLayout_SetGeometry
func callbackQLayout_SetGeometry(ptr unsafe.Pointer, r unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setGeometry"); signal != nil {
		(*(*func(*core.QRect))(signal))(core.NewQRectFromPointer(r))
	} else {
		NewQLayoutFromPointer(ptr).SetGeometryDefault(core.NewQRectFromPointer(r))
	}
}

func (ptr *QLayout) ConnectSetGeometry(f func(r *core.QRect)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setGeometry"); signal != nil {
			f := func(r *core.QRect) {
				(*(*func(*core.QRect))(signal))(r)
				f(r)
			}
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectSetGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setGeometry")
	}
}

func (ptr *QLayout) SetGeometry(r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_SetGeometry(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

func (ptr *QLayout) SetGeometryDefault(r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_SetGeometryDefault(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

func (ptr *QLayout) SetMenuBar(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_SetMenuBar(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QLayout) SetSizeConstraint(vql QLayout__SizeConstraint) {
	if ptr.Pointer() != nil {
		C.QLayout_SetSizeConstraint(ptr.Pointer(), C.longlong(vql))
	}
}

func (ptr *QLayout) SetSpacing(vin int) {
	if ptr.Pointer() != nil {
		C.QLayout_SetSpacing(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QLayout) Update() {
	if ptr.Pointer() != nil {
		C.QLayout_Update(ptr.Pointer())
	}
}

func (ptr *QLayout) SizeConstraint() QLayout__SizeConstraint {
	if ptr.Pointer() != nil {
		return QLayout__SizeConstraint(C.QLayout_SizeConstraint(ptr.Pointer()))
	}
	return 0
}

//export callbackQLayout_ItemAt
func callbackQLayout_ItemAt(ptr unsafe.Pointer, index C.int) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "itemAt"); signal != nil {
		return PointerFromQLayoutItem((*(*func(int) *QLayoutItem)(signal))(int(int32(index))))
	}

	return PointerFromQLayoutItem(NewQLayoutItem(0))
}

func (ptr *QLayout) ConnectItemAt(f func(index int) *QLayoutItem) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "itemAt"); signal != nil {
			f := func(index int) *QLayoutItem {
				(*(*func(int) *QLayoutItem)(signal))(index)
				return f(index)
			}
			qt.ConnectSignal(ptr.Pointer(), "itemAt", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "itemAt", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectItemAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "itemAt")
	}
}

func (ptr *QLayout) ItemAt(index int) *QLayoutItem {
	if ptr.Pointer() != nil {
		return NewQLayoutItemFromPointer(C.QLayout_ItemAt(ptr.Pointer(), C.int(int32(index))))
	}
	return nil
}

func (ptr *QLayout) ContentsMargins() *core.QMargins {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQMarginsFromPointer(C.QLayout_ContentsMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) AlignmentRect(r core.QRect_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QLayout_AlignmentRect(ptr.Pointer(), core.PointerFromQRect(r)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) ContentsRect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QLayout_ContentsRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQLayout_Geometry
func callbackQLayout_Geometry(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "geometry"); signal != nil {
		return core.PointerFromQRect((*(*func() *core.QRect)(signal))())
	}

	return core.PointerFromQRect(NewQLayoutFromPointer(ptr).GeometryDefault())
}

func (ptr *QLayout) ConnectGeometry(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "geometry"); signal != nil {
			f := func() *core.QRect {
				(*(*func() *core.QRect)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "geometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "geometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "geometry")
	}
}

func (ptr *QLayout) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QLayout_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) GeometryDefault() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QLayout_GeometryDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQLayout_MaximumSize
func callbackQLayout_MaximumSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "maximumSize"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQLayoutFromPointer(ptr).MaximumSizeDefault())
}

func (ptr *QLayout) ConnectMaximumSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "maximumSize"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "maximumSize", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "maximumSize", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectMaximumSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "maximumSize")
	}
}

func (ptr *QLayout) MaximumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayout_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) MaximumSizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayout_MaximumSizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQLayout_MinimumSize
func callbackQLayout_MinimumSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "minimumSize"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQLayoutFromPointer(ptr).MinimumSizeDefault())
}

func (ptr *QLayout) ConnectMinimumSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "minimumSize"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "minimumSize", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "minimumSize", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectMinimumSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "minimumSize")
	}
}

func (ptr *QLayout) MinimumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayout_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) MinimumSizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayout_MinimumSizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) MenuBar() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QLayout_MenuBar(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) ParentWidget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QLayout_ParentWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQLayout_ExpandingDirections
func callbackQLayout_ExpandingDirections(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(ptr, "expandingDirections"); signal != nil {
		return C.longlong((*(*func() core.Qt__Orientation)(signal))())
	}

	return C.longlong(NewQLayoutFromPointer(ptr).ExpandingDirectionsDefault())
}

func (ptr *QLayout) ConnectExpandingDirections(f func() core.Qt__Orientation) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "expandingDirections"); signal != nil {
			f := func() core.Qt__Orientation {
				(*(*func() core.Qt__Orientation)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "expandingDirections", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "expandingDirections", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectExpandingDirections() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "expandingDirections")
	}
}

func (ptr *QLayout) ExpandingDirections() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QLayout_ExpandingDirections(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLayout) ExpandingDirectionsDefault() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QLayout_ExpandingDirectionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQLayout_IsEmpty
func callbackQLayout_IsEmpty(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "isEmpty"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQLayoutFromPointer(ptr).IsEmptyDefault())))
}

func (ptr *QLayout) ConnectIsEmpty(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "isEmpty"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "isEmpty", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "isEmpty", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectIsEmpty() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "isEmpty")
	}
}

func (ptr *QLayout) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_IsEmpty(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLayout) IsEmptyDefault() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_IsEmptyDefault(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLayout) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_IsEnabled(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQLayout_MetaObject
func callbackQLayout_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQLayoutFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QLayout) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "metaObject"); signal != nil {
			f := func() *core.QMetaObject {
				(*(*func() *core.QMetaObject)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "metaObject", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "metaObject", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "metaObject")
	}
}

func (ptr *QLayout) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QLayout_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QLayout) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QLayout_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQLayout_Count
func callbackQLayout_Count(ptr unsafe.Pointer) C.int {
	if signal := qt.GetSignal(ptr, "count"); signal != nil {
		return C.int(int32((*(*func() int)(signal))()))
	}

	return C.int(int32(0))
}

func (ptr *QLayout) ConnectCount(f func() int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "count"); signal != nil {
			f := func() int {
				(*(*func() int)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "count", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "count", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "count")
	}
}

func (ptr *QLayout) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayout_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLayout) IndexOf2(layoutItem QLayoutItem_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayout_IndexOf2(ptr.Pointer(), PointerFromQLayoutItem(layoutItem))))
	}
	return 0
}

//export callbackQLayout_IndexOf
func callbackQLayout_IndexOf(ptr unsafe.Pointer, widget unsafe.Pointer) C.int {
	if signal := qt.GetSignal(ptr, "indexOf"); signal != nil {
		return C.int(int32((*(*func(*QWidget) int)(signal))(NewQWidgetFromPointer(widget))))
	}

	return C.int(int32(NewQLayoutFromPointer(ptr).IndexOfDefault(NewQWidgetFromPointer(widget))))
}

func (ptr *QLayout) ConnectIndexOf(f func(widget *QWidget) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "indexOf"); signal != nil {
			f := func(widget *QWidget) int {
				(*(*func(*QWidget) int)(signal))(widget)
				return f(widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "indexOf", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "indexOf", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayout) DisconnectIndexOf() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "indexOf")
	}
}

func (ptr *QLayout) IndexOf(widget QWidget_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayout_IndexOf(ptr.Pointer(), PointerFromQWidget(widget))))
	}
	return 0
}

func (ptr *QLayout) IndexOfDefault(widget QWidget_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayout_IndexOfDefault(ptr.Pointer(), PointerFromQWidget(widget))))
	}
	return 0
}

func (ptr *QLayout) Spacing() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayout_Spacing(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLayout) GetContentsMargins(left int, top int, right int, bottom int) {
	if ptr.Pointer() != nil {
		C.QLayout_GetContentsMargins(ptr.Pointer(), C.int(int32(left)), C.int(int32(top)), C.int(int32(right)), C.int(int32(bottom)))
	}
}

func (ptr *QLayout) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QLayout___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QLayout) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QLayout___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QLayout) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QLayout___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QLayout) __findChildren_newList2() unsafe.Pointer {
	return C.QLayout___findChildren_newList2(ptr.Pointer())
}

func (ptr *QLayout) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QLayout___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QLayout) __findChildren_newList3() unsafe.Pointer {
	return C.QLayout___findChildren_newList3(ptr.Pointer())
}

func (ptr *QLayout) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QLayout___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QLayout) __findChildren_newList() unsafe.Pointer {
	return C.QLayout___findChildren_newList(ptr.Pointer())
}

func (ptr *QLayout) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QLayout___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QLayout) __children_newList() unsafe.Pointer {
	return C.QLayout___children_newList(ptr.Pointer())
}

//export callbackQLayout_Event
func callbackQLayout_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQLayoutFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QLayout) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_Event(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

func (ptr *QLayout) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

//export callbackQLayout_EventFilter
func callbackQLayout_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQLayoutFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QLayout) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QLayout) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayout_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQLayout_ConnectNotify
func callbackQLayout_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQLayoutFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QLayout) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QLayout) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQLayout_CustomEvent
func callbackQLayout_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQLayoutFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QLayout) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QLayout) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQLayout_DeleteLater
func callbackQLayout_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQLayoutFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QLayout) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QLayout_DeleteLater(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QLayout) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QLayout_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQLayout_Destroyed
func callbackQLayout_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQLayout_DisconnectNotify
func callbackQLayout_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQLayoutFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QLayout) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QLayout) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQLayout_ObjectNameChanged
func callbackQLayout_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQLayout_TimerEvent
func callbackQLayout_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQLayoutFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QLayout) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QLayout) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLayout_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQLayout_SizeHint
func callbackQLayout_SizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeHint"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQLayoutFromPointer(ptr).SizeHintDefault())
}

func (ptr *QLayout) SizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayout_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QLayout) SizeHintDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayout_SizeHintDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

type QLayoutItem struct {
	ptr unsafe.Pointer
}

type QLayoutItem_ITF interface {
	QLayoutItem_PTR() *QLayoutItem
}

func (ptr *QLayoutItem) QLayoutItem_PTR() *QLayoutItem {
	return ptr
}

func (ptr *QLayoutItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QLayoutItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQLayoutItem(ptr QLayoutItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLayoutItem_PTR().Pointer()
	}
	return nil
}

func NewQLayoutItemFromPointer(ptr unsafe.Pointer) (n *QLayoutItem) {
	n = new(QLayoutItem)
	n.SetPointer(ptr)
	return
}

//export callbackQLayoutItem_Layout
func callbackQLayoutItem_Layout(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "layout"); signal != nil {
		return PointerFromQLayout((*(*func() *QLayout)(signal))())
	}

	return PointerFromQLayout(NewQLayoutItemFromPointer(ptr).LayoutDefault())
}

func (ptr *QLayoutItem) ConnectLayout(f func() *QLayout) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "layout"); signal != nil {
			f := func() *QLayout {
				(*(*func() *QLayout)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "layout", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "layout", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectLayout() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "layout")
	}
}

func (ptr *QLayoutItem) Layout() *QLayout {
	if ptr.Pointer() != nil {
		tmpValue := NewQLayoutFromPointer(C.QLayoutItem_Layout(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLayoutItem) LayoutDefault() *QLayout {
	if ptr.Pointer() != nil {
		tmpValue := NewQLayoutFromPointer(C.QLayoutItem_LayoutDefault(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func NewQLayoutItem(alignment core.Qt__AlignmentFlag) *QLayoutItem {
	return NewQLayoutItemFromPointer(C.QLayoutItem_NewQLayoutItem(C.longlong(alignment)))
}

//export callbackQLayoutItem_SpacerItem
func callbackQLayoutItem_SpacerItem(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "spacerItem"); signal != nil {
		return PointerFromQSpacerItem((*(*func() *QSpacerItem)(signal))())
	}

	return PointerFromQSpacerItem(NewQLayoutItemFromPointer(ptr).SpacerItemDefault())
}

func (ptr *QLayoutItem) ConnectSpacerItem(f func() *QSpacerItem) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "spacerItem"); signal != nil {
			f := func() *QSpacerItem {
				(*(*func() *QSpacerItem)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "spacerItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "spacerItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectSpacerItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "spacerItem")
	}
}

func (ptr *QLayoutItem) SpacerItem() *QSpacerItem {
	if ptr.Pointer() != nil {
		return NewQSpacerItemFromPointer(C.QLayoutItem_SpacerItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QLayoutItem) SpacerItemDefault() *QSpacerItem {
	if ptr.Pointer() != nil {
		return NewQSpacerItemFromPointer(C.QLayoutItem_SpacerItemDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQLayoutItem_Widget
func callbackQLayoutItem_Widget(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "widget"); signal != nil {
		return PointerFromQWidget((*(*func() *QWidget)(signal))())
	}

	return PointerFromQWidget(NewQLayoutItemFromPointer(ptr).WidgetDefault())
}

func (ptr *QLayoutItem) ConnectWidget(f func() *QWidget) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "widget"); signal != nil {
			f := func() *QWidget {
				(*(*func() *QWidget)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "widget", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "widget", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectWidget() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "widget")
	}
}

func (ptr *QLayoutItem) Widget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QLayoutItem_Widget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QLayoutItem) WidgetDefault() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QLayoutItem_WidgetDefault(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQLayoutItem_Invalidate
func callbackQLayoutItem_Invalidate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "invalidate"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQLayoutItemFromPointer(ptr).InvalidateDefault()
	}
}

func (ptr *QLayoutItem) ConnectInvalidate(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "invalidate"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "invalidate", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "invalidate", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectInvalidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "invalidate")
	}
}

func (ptr *QLayoutItem) Invalidate() {
	if ptr.Pointer() != nil {
		C.QLayoutItem_Invalidate(ptr.Pointer())
	}
}

func (ptr *QLayoutItem) InvalidateDefault() {
	if ptr.Pointer() != nil {
		C.QLayoutItem_InvalidateDefault(ptr.Pointer())
	}
}

func (ptr *QLayoutItem) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QLayoutItem_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

//export callbackQLayoutItem_SetGeometry
func callbackQLayoutItem_SetGeometry(ptr unsafe.Pointer, r unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setGeometry"); signal != nil {
		(*(*func(*core.QRect))(signal))(core.NewQRectFromPointer(r))
	}

}

func (ptr *QLayoutItem) ConnectSetGeometry(f func(r *core.QRect)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setGeometry"); signal != nil {
			f := func(r *core.QRect) {
				(*(*func(*core.QRect))(signal))(r)
				f(r)
			}
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectSetGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setGeometry")
	}
}

func (ptr *QLayoutItem) SetGeometry(r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QLayoutItem_SetGeometry(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

//export callbackQLayoutItem_DestroyQLayoutItem
func callbackQLayoutItem_DestroyQLayoutItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QLayoutItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQLayoutItemFromPointer(ptr).DestroyQLayoutItemDefault()
	}
}

func (ptr *QLayoutItem) ConnectDestroyQLayoutItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QLayoutItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QLayoutItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QLayoutItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectDestroyQLayoutItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QLayoutItem")
	}
}

func (ptr *QLayoutItem) DestroyQLayoutItem() {
	if ptr.Pointer() != nil {
		C.QLayoutItem_DestroyQLayoutItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QLayoutItem) DestroyQLayoutItemDefault() {
	if ptr.Pointer() != nil {
		C.QLayoutItem_DestroyQLayoutItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQLayoutItem_Geometry
func callbackQLayoutItem_Geometry(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "geometry"); signal != nil {
		return core.PointerFromQRect((*(*func() *core.QRect)(signal))())
	}

	return core.PointerFromQRect(core.NewQRect())
}

func (ptr *QLayoutItem) ConnectGeometry(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "geometry"); signal != nil {
			f := func() *core.QRect {
				(*(*func() *core.QRect)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "geometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "geometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "geometry")
	}
}

func (ptr *QLayoutItem) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QLayoutItem_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQLayoutItem_MaximumSize
func callbackQLayoutItem_MaximumSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "maximumSize"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(core.NewQSize())
}

func (ptr *QLayoutItem) ConnectMaximumSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "maximumSize"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "maximumSize", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "maximumSize", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectMaximumSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "maximumSize")
	}
}

func (ptr *QLayoutItem) MaximumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayoutItem_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQLayoutItem_MinimumSize
func callbackQLayoutItem_MinimumSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "minimumSize"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(core.NewQSize())
}

func (ptr *QLayoutItem) ConnectMinimumSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "minimumSize"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "minimumSize", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "minimumSize", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectMinimumSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "minimumSize")
	}
}

func (ptr *QLayoutItem) MinimumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayoutItem_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQLayoutItem_SizeHint
func callbackQLayoutItem_SizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeHint"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(core.NewQSize())
}

func (ptr *QLayoutItem) ConnectSizeHint(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sizeHint"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectSizeHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sizeHint")
	}
}

func (ptr *QLayoutItem) SizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QLayoutItem_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQLayoutItem_ControlTypes
func callbackQLayoutItem_ControlTypes(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(ptr, "controlTypes"); signal != nil {
		return C.longlong((*(*func() QSizePolicy__ControlType)(signal))())
	}

	return C.longlong(NewQLayoutItemFromPointer(ptr).ControlTypesDefault())
}

func (ptr *QLayoutItem) ConnectControlTypes(f func() QSizePolicy__ControlType) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "controlTypes"); signal != nil {
			f := func() QSizePolicy__ControlType {
				(*(*func() QSizePolicy__ControlType)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "controlTypes", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "controlTypes", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectControlTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "controlTypes")
	}
}

func (ptr *QLayoutItem) ControlTypes() QSizePolicy__ControlType {
	if ptr.Pointer() != nil {
		return QSizePolicy__ControlType(C.QLayoutItem_ControlTypes(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLayoutItem) ControlTypesDefault() QSizePolicy__ControlType {
	if ptr.Pointer() != nil {
		return QSizePolicy__ControlType(C.QLayoutItem_ControlTypesDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLayoutItem) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QLayoutItem_Alignment(ptr.Pointer()))
	}
	return 0
}

//export callbackQLayoutItem_ExpandingDirections
func callbackQLayoutItem_ExpandingDirections(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(ptr, "expandingDirections"); signal != nil {
		return C.longlong((*(*func() core.Qt__Orientation)(signal))())
	}

	return C.longlong(0)
}

func (ptr *QLayoutItem) ConnectExpandingDirections(f func() core.Qt__Orientation) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "expandingDirections"); signal != nil {
			f := func() core.Qt__Orientation {
				(*(*func() core.Qt__Orientation)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "expandingDirections", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "expandingDirections", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectExpandingDirections() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "expandingDirections")
	}
}

func (ptr *QLayoutItem) ExpandingDirections() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QLayoutItem_ExpandingDirections(ptr.Pointer()))
	}
	return 0
}

//export callbackQLayoutItem_HasHeightForWidth
func callbackQLayoutItem_HasHeightForWidth(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "hasHeightForWidth"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQLayoutItemFromPointer(ptr).HasHeightForWidthDefault())))
}

func (ptr *QLayoutItem) ConnectHasHeightForWidth(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hasHeightForWidth"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "hasHeightForWidth", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hasHeightForWidth", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectHasHeightForWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hasHeightForWidth")
	}
}

func (ptr *QLayoutItem) HasHeightForWidth() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayoutItem_HasHeightForWidth(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QLayoutItem) HasHeightForWidthDefault() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayoutItem_HasHeightForWidthDefault(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQLayoutItem_IsEmpty
func callbackQLayoutItem_IsEmpty(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "isEmpty"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QLayoutItem) ConnectIsEmpty(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "isEmpty"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "isEmpty", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "isEmpty", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectIsEmpty() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "isEmpty")
	}
}

func (ptr *QLayoutItem) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return int8(C.QLayoutItem_IsEmpty(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQLayoutItem_HeightForWidth
func callbackQLayoutItem_HeightForWidth(ptr unsafe.Pointer, vin C.int) C.int {
	if signal := qt.GetSignal(ptr, "heightForWidth"); signal != nil {
		return C.int(int32((*(*func(int) int)(signal))(int(int32(vin)))))
	}

	return C.int(int32(NewQLayoutItemFromPointer(ptr).HeightForWidthDefault(int(int32(vin)))))
}

func (ptr *QLayoutItem) ConnectHeightForWidth(f func(vin int) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "heightForWidth"); signal != nil {
			f := func(vin int) int {
				(*(*func(int) int)(signal))(vin)
				return f(vin)
			}
			qt.ConnectSignal(ptr.Pointer(), "heightForWidth", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "heightForWidth", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectHeightForWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "heightForWidth")
	}
}

func (ptr *QLayoutItem) HeightForWidth(vin int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayoutItem_HeightForWidth(ptr.Pointer(), C.int(int32(vin)))))
	}
	return 0
}

func (ptr *QLayoutItem) HeightForWidthDefault(vin int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayoutItem_HeightForWidthDefault(ptr.Pointer(), C.int(int32(vin)))))
	}
	return 0
}

//export callbackQLayoutItem_MinimumHeightForWidth
func callbackQLayoutItem_MinimumHeightForWidth(ptr unsafe.Pointer, w C.int) C.int {
	if signal := qt.GetSignal(ptr, "minimumHeightForWidth"); signal != nil {
		return C.int(int32((*(*func(int) int)(signal))(int(int32(w)))))
	}

	return C.int(int32(NewQLayoutItemFromPointer(ptr).MinimumHeightForWidthDefault(int(int32(w)))))
}

func (ptr *QLayoutItem) ConnectMinimumHeightForWidth(f func(w int) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "minimumHeightForWidth"); signal != nil {
			f := func(w int) int {
				(*(*func(int) int)(signal))(w)
				return f(w)
			}
			qt.ConnectSignal(ptr.Pointer(), "minimumHeightForWidth", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "minimumHeightForWidth", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QLayoutItem) DisconnectMinimumHeightForWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "minimumHeightForWidth")
	}
}

func (ptr *QLayoutItem) MinimumHeightForWidth(w int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayoutItem_MinimumHeightForWidth(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

func (ptr *QLayoutItem) MinimumHeightForWidthDefault(w int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLayoutItem_MinimumHeightForWidthDefault(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

func (ptr *QLayoutItem) Align() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QLayoutItem_Align(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLayoutItem) SetAlign(vqt core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QLayoutItem_SetAlign(ptr.Pointer(), C.longlong(vqt))
	}
}

//go:generate stringer -type=QLineEdit__ActionPosition
//QLineEdit::ActionPosition
type QLineEdit__ActionPosition int64

const (
	QLineEdit__LeadingPosition  QLineEdit__ActionPosition = QLineEdit__ActionPosition(0)
	QLineEdit__TrailingPosition QLineEdit__ActionPosition = QLineEdit__ActionPosition(1)
)

//go:generate stringer -type=QLineEdit__EchoMode
//QLineEdit::EchoMode
type QLineEdit__EchoMode int64

const (
	QLineEdit__Normal             QLineEdit__EchoMode = QLineEdit__EchoMode(0)
	QLineEdit__NoEcho             QLineEdit__EchoMode = QLineEdit__EchoMode(1)
	QLineEdit__Password           QLineEdit__EchoMode = QLineEdit__EchoMode(2)
	QLineEdit__PasswordEchoOnEdit QLineEdit__EchoMode = QLineEdit__EchoMode(3)
)

//go:generate stringer -type=QListView__Flow
//QListView::Flow
type QListView__Flow int64

const (
	QListView__LeftToRight QListView__Flow = QListView__Flow(0)
	QListView__TopToBottom QListView__Flow = QListView__Flow(1)
)

//go:generate stringer -type=QListView__LayoutMode
//QListView::LayoutMode
type QListView__LayoutMode int64

const (
	QListView__SinglePass QListView__LayoutMode = QListView__LayoutMode(0)
	QListView__Batched    QListView__LayoutMode = QListView__LayoutMode(1)
)

//go:generate stringer -type=QListView__Movement
//QListView::Movement
type QListView__Movement int64

const (
	QListView__Static QListView__Movement = QListView__Movement(0)
	QListView__Free   QListView__Movement = QListView__Movement(1)
	QListView__Snap   QListView__Movement = QListView__Movement(2)
)

//go:generate stringer -type=QListView__ResizeMode
//QListView::ResizeMode
type QListView__ResizeMode int64

const (
	QListView__Fixed  QListView__ResizeMode = QListView__ResizeMode(0)
	QListView__Adjust QListView__ResizeMode = QListView__ResizeMode(1)
)

//go:generate stringer -type=QListView__ViewMode
//QListView::ViewMode
type QListView__ViewMode int64

const (
	QListView__ListMode QListView__ViewMode = QListView__ViewMode(0)
	QListView__IconMode QListView__ViewMode = QListView__ViewMode(1)
)

//go:generate stringer -type=QListWidgetItem__ItemType
//QListWidgetItem::ItemType
type QListWidgetItem__ItemType int64

const (
	QListWidgetItem__Type     QListWidgetItem__ItemType = QListWidgetItem__ItemType(0)
	QListWidgetItem__UserType QListWidgetItem__ItemType = QListWidgetItem__ItemType(1000)
)

//go:generate stringer -type=QMainWindow__DockOption
//QMainWindow::DockOption
type QMainWindow__DockOption int64

const (
	QMainWindow__AnimatedDocks    QMainWindow__DockOption = QMainWindow__DockOption(0x01)
	QMainWindow__AllowNestedDocks QMainWindow__DockOption = QMainWindow__DockOption(0x02)
	QMainWindow__AllowTabbedDocks QMainWindow__DockOption = QMainWindow__DockOption(0x04)
	QMainWindow__ForceTabbedDocks QMainWindow__DockOption = QMainWindow__DockOption(0x08)
	QMainWindow__VerticalTabs     QMainWindow__DockOption = QMainWindow__DockOption(0x10)
	QMainWindow__GroupedDragging  QMainWindow__DockOption = QMainWindow__DockOption(0x20)
)

//go:generate stringer -type=QMdiArea__AreaOption
//QMdiArea::AreaOption
type QMdiArea__AreaOption int64

const (
	QMdiArea__DontMaximizeSubWindowOnActivation QMdiArea__AreaOption = QMdiArea__AreaOption(0x1)
)

//go:generate stringer -type=QMdiArea__ViewMode
//QMdiArea::ViewMode
type QMdiArea__ViewMode int64

const (
	QMdiArea__SubWindowView QMdiArea__ViewMode = QMdiArea__ViewMode(0)
	QMdiArea__TabbedView    QMdiArea__ViewMode = QMdiArea__ViewMode(1)
)

//go:generate stringer -type=QMdiArea__WindowOrder
//QMdiArea::WindowOrder
type QMdiArea__WindowOrder int64

const (
	QMdiArea__CreationOrder          QMdiArea__WindowOrder = QMdiArea__WindowOrder(0)
	QMdiArea__StackingOrder          QMdiArea__WindowOrder = QMdiArea__WindowOrder(1)
	QMdiArea__ActivationHistoryOrder QMdiArea__WindowOrder = QMdiArea__WindowOrder(2)
)

//go:generate stringer -type=QMdiSubWindow__SubWindowOption
//QMdiSubWindow::SubWindowOption
type QMdiSubWindow__SubWindowOption int64

const (
	QMdiSubWindow__AllowOutsideAreaHorizontally QMdiSubWindow__SubWindowOption = QMdiSubWindow__SubWindowOption(0x1)
	QMdiSubWindow__AllowOutsideAreaVertically   QMdiSubWindow__SubWindowOption = QMdiSubWindow__SubWindowOption(0x2)
	QMdiSubWindow__RubberBandResize             QMdiSubWindow__SubWindowOption = QMdiSubWindow__SubWindowOption(0x4)
	QMdiSubWindow__RubberBandMove               QMdiSubWindow__SubWindowOption = QMdiSubWindow__SubWindowOption(0x8)
)

type QMenu struct {
	QWidget
}

type QMenu_ITF interface {
	QWidget_ITF
	QMenu_PTR() *QMenu
}

func (ptr *QMenu) QMenu_PTR() *QMenu {
	return ptr
}

func (ptr *QMenu) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QWidget_PTR().Pointer()
	}
	return nil
}

func (ptr *QMenu) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QWidget_PTR().SetPointer(p)
	}
}

func PointerFromQMenu(ptr QMenu_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMenu_PTR().Pointer()
	}
	return nil
}

func NewQMenuFromPointer(ptr unsafe.Pointer) (n *QMenu) {
	n = new(QMenu)
	n.SetPointer(ptr)
	return
}
func (ptr *QMenu) AddAction2(icon gui.QIcon_ITF, text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_AddAction2(ptr.Pointer(), gui.PointerFromQIcon(icon), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddAction4(icon gui.QIcon_ITF, text string, receiver core.QObject_ITF, member string, shortcut gui.QKeySequence_ITF) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var memberC *C.char
		if member != "" {
			memberC = C.CString(member)
			defer C.free(unsafe.Pointer(memberC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_AddAction4(ptr.Pointer(), gui.PointerFromQIcon(icon), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, core.PointerFromQObject(receiver), memberC, gui.PointerFromQKeySequence(shortcut)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddAction(text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_AddAction(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddAction3(text string, receiver core.QObject_ITF, member string, shortcut gui.QKeySequence_ITF) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		var memberC *C.char
		if member != "" {
			memberC = C.CString(member)
			defer C.free(unsafe.Pointer(memberC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_AddAction3(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, core.PointerFromQObject(receiver), memberC, gui.PointerFromQKeySequence(shortcut)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddMenu(menu QMenu_ITF) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_AddMenu(ptr.Pointer(), PointerFromQMenu(menu)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddSection2(icon gui.QIcon_ITF, text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_AddSection2(ptr.Pointer(), gui.PointerFromQIcon(icon), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddSection(text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_AddSection(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddSeparator() *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_AddSeparator(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) Exec() *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_Exec(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func QMenu_Exec3(actions []*QAction, pos core.QPoint_ITF, at QAction_ITF, parent QWidget_ITF) *QAction {
	tmpValue := NewQActionFromPointer(C.QMenu_QMenu_Exec3(func() unsafe.Pointer {
		tmpList := NewQMenuFromPointer(NewQMenuFromPointer(nil).__exec_actions_newList3())
		for _, v := range actions {
			tmpList.__exec_actions_setList3(v)
		}
		return tmpList.Pointer()
	}(), core.PointerFromQPoint(pos), PointerFromQAction(at), PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMenu) Exec3(actions []*QAction, pos core.QPoint_ITF, at QAction_ITF, parent QWidget_ITF) *QAction {
	tmpValue := NewQActionFromPointer(C.QMenu_QMenu_Exec3(func() unsafe.Pointer {
		tmpList := NewQMenuFromPointer(NewQMenuFromPointer(nil).__exec_actions_newList3())
		for _, v := range actions {
			tmpList.__exec_actions_setList3(v)
		}
		return tmpList.Pointer()
	}(), core.PointerFromQPoint(pos), PointerFromQAction(at), PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMenu) Exec2(p core.QPoint_ITF, action QAction_ITF) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_Exec2(ptr.Pointer(), core.PointerFromQPoint(p), PointerFromQAction(action)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) InsertMenu(before QAction_ITF, menu QMenu_ITF) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_InsertMenu(ptr.Pointer(), PointerFromQAction(before), PointerFromQMenu(menu)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) InsertSection2(before QAction_ITF, icon gui.QIcon_ITF, text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_InsertSection2(ptr.Pointer(), PointerFromQAction(before), gui.PointerFromQIcon(icon), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) InsertSection(before QAction_ITF, text string) *QAction {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := NewQActionFromPointer(C.QMenu_InsertSection(ptr.Pointer(), PointerFromQAction(before), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) InsertSeparator(before QAction_ITF) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_InsertSeparator(ptr.Pointer(), PointerFromQAction(before)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddMenu3(icon gui.QIcon_ITF, title string) *QMenu {
	if ptr.Pointer() != nil {
		var titleC *C.char
		if title != "" {
			titleC = C.CString(title)
			defer C.free(unsafe.Pointer(titleC))
		}
		tmpValue := NewQMenuFromPointer(C.QMenu_AddMenu3(ptr.Pointer(), gui.PointerFromQIcon(icon), C.struct_QtWidgets_PackedString{data: titleC, len: C.longlong(len(title))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) AddMenu2(title string) *QMenu {
	if ptr.Pointer() != nil {
		var titleC *C.char
		if title != "" {
			titleC = C.CString(title)
			defer C.free(unsafe.Pointer(titleC))
		}
		tmpValue := NewQMenuFromPointer(C.QMenu_AddMenu2(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: titleC, len: C.longlong(len(title))}))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func NewQMenu(parent QWidget_ITF) *QMenu {
	tmpValue := NewQMenuFromPointer(C.QMenu_NewQMenu(PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQMenu2(title string, parent QWidget_ITF) *QMenu {
	var titleC *C.char
	if title != "" {
		titleC = C.CString(title)
		defer C.free(unsafe.Pointer(titleC))
	}
	tmpValue := NewQMenuFromPointer(C.QMenu_NewQMenu2(C.struct_QtWidgets_PackedString{data: titleC, len: C.longlong(len(title))}, PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQMenu_AboutToHide
func callbackQMenu_AboutToHide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "aboutToHide"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QMenu) ConnectAboutToHide(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "aboutToHide") {
			C.QMenu_ConnectAboutToHide(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "aboutToHide")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "aboutToHide"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "aboutToHide", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "aboutToHide", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QMenu) DisconnectAboutToHide() {
	if ptr.Pointer() != nil {
		C.QMenu_DisconnectAboutToHide(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "aboutToHide")
	}
}

func (ptr *QMenu) AboutToHide() {
	if ptr.Pointer() != nil {
		C.QMenu_AboutToHide(ptr.Pointer())
	}
}

//export callbackQMenu_AboutToShow
func callbackQMenu_AboutToShow(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "aboutToShow"); signal != nil {
		(*(*func())(signal))()
	}

}

func (ptr *QMenu) ConnectAboutToShow(f func()) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "aboutToShow") {
			C.QMenu_ConnectAboutToShow(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "aboutToShow")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "aboutToShow"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "aboutToShow", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "aboutToShow", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QMenu) DisconnectAboutToShow() {
	if ptr.Pointer() != nil {
		C.QMenu_DisconnectAboutToShow(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "aboutToShow")
	}
}

func (ptr *QMenu) AboutToShow() {
	if ptr.Pointer() != nil {
		C.QMenu_AboutToShow(ptr.Pointer())
	}
}

func (ptr *QMenu) Clear() {
	if ptr.Pointer() != nil {
		C.QMenu_Clear(ptr.Pointer())
	}
}

func (ptr *QMenu) HideTearOffMenu() {
	if ptr.Pointer() != nil {
		C.QMenu_HideTearOffMenu(ptr.Pointer())
	}
}

//export callbackQMenu_Hovered
func callbackQMenu_Hovered(ptr unsafe.Pointer, action unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hovered"); signal != nil {
		(*(*func(*QAction))(signal))(NewQActionFromPointer(action))
	}

}

func (ptr *QMenu) ConnectHovered(f func(action *QAction)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "hovered") {
			C.QMenu_ConnectHovered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "hovered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "hovered"); signal != nil {
			f := func(action *QAction) {
				(*(*func(*QAction))(signal))(action)
				f(action)
			}
			qt.ConnectSignal(ptr.Pointer(), "hovered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hovered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QMenu) DisconnectHovered() {
	if ptr.Pointer() != nil {
		C.QMenu_DisconnectHovered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "hovered")
	}
}

func (ptr *QMenu) Hovered(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_Hovered(ptr.Pointer(), PointerFromQAction(action))
	}
}

func (ptr *QMenu) Popup(p core.QPoint_ITF, atAction QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_Popup(ptr.Pointer(), core.PointerFromQPoint(p), PointerFromQAction(atAction))
	}
}

func (ptr *QMenu) SetActiveAction(act QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_SetActiveAction(ptr.Pointer(), PointerFromQAction(act))
	}
}

func (ptr *QMenu) SetAsDockMenu() {
	if ptr.Pointer() != nil {
		C.QMenu_SetAsDockMenu(ptr.Pointer())
	}
}

func (ptr *QMenu) SetDefaultAction(act QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_SetDefaultAction(ptr.Pointer(), PointerFromQAction(act))
	}
}

func (ptr *QMenu) SetIcon(icon gui.QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_SetIcon(ptr.Pointer(), gui.PointerFromQIcon(icon))
	}
}

func (ptr *QMenu) SetSeparatorsCollapsible(collapse bool) {
	if ptr.Pointer() != nil {
		C.QMenu_SetSeparatorsCollapsible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(collapse))))
	}
}

func (ptr *QMenu) SetTearOffEnabled(vbo bool) {
	if ptr.Pointer() != nil {
		C.QMenu_SetTearOffEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QMenu) SetTitle(title string) {
	if ptr.Pointer() != nil {
		var titleC *C.char
		if title != "" {
			titleC = C.CString(title)
			defer C.free(unsafe.Pointer(titleC))
		}
		C.QMenu_SetTitle(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: titleC, len: C.longlong(len(title))})
	}
}

func (ptr *QMenu) SetToolTipsVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QMenu_SetToolTipsVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QMenu) ShowTearOffMenu2() {
	if ptr.Pointer() != nil {
		C.QMenu_ShowTearOffMenu2(ptr.Pointer())
	}
}

func (ptr *QMenu) ShowTearOffMenu(pos core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_ShowTearOffMenu(ptr.Pointer(), core.PointerFromQPoint(pos))
	}
}

//export callbackQMenu_Triggered
func callbackQMenu_Triggered(ptr unsafe.Pointer, action unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "triggered"); signal != nil {
		(*(*func(*QAction))(signal))(NewQActionFromPointer(action))
	}

}

func (ptr *QMenu) ConnectTriggered(f func(action *QAction)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "triggered") {
			C.QMenu_ConnectTriggered(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "triggered")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "triggered"); signal != nil {
			f := func(action *QAction) {
				(*(*func(*QAction))(signal))(action)
				f(action)
			}
			qt.ConnectSignal(ptr.Pointer(), "triggered", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "triggered", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QMenu) DisconnectTriggered() {
	if ptr.Pointer() != nil {
		C.QMenu_DisconnectTriggered(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "triggered")
	}
}

func (ptr *QMenu) Triggered(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_Triggered(ptr.Pointer(), PointerFromQAction(action))
	}
}

//export callbackQMenu_DestroyQMenu
func callbackQMenu_DestroyQMenu(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QMenu"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQMenuFromPointer(ptr).DestroyQMenuDefault()
	}
}

func (ptr *QMenu) ConnectDestroyQMenu(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QMenu"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QMenu", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QMenu", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QMenu) DisconnectDestroyQMenu() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QMenu")
	}
}

func (ptr *QMenu) DestroyQMenu() {
	if ptr.Pointer() != nil {
		C.QMenu_DestroyQMenu(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QMenu) DestroyQMenuDefault() {
	if ptr.Pointer() != nil {
		C.QMenu_DestroyQMenuDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QMenu) ActionAt(pt core.QPoint_ITF) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_ActionAt(ptr.Pointer(), core.PointerFromQPoint(pt)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) ActiveAction() *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_ActiveAction(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) DefaultAction() *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_DefaultAction(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) MenuAction() *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu_MenuAction(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) Icon() *gui.QIcon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQIconFromPointer(C.QMenu_Icon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) ActionGeometry(act QAction_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QMenu_ActionGeometry(ptr.Pointer(), PointerFromQAction(act)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) Title() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMenu_Title(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMenu) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return int8(C.QMenu_IsEmpty(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QMenu) IsTearOffEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QMenu_IsTearOffEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QMenu) IsTearOffMenuVisible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QMenu_IsTearOffMenuVisible(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QMenu) SeparatorsCollapsible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QMenu_SeparatorsCollapsible(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QMenu) ToolTipsVisible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QMenu_ToolTipsVisible(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QMenu) ColumnCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMenu_ColumnCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMenu) InitStyleOption(option QStyleOptionMenuItem_ITF, action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu_InitStyleOption(ptr.Pointer(), PointerFromQStyleOptionMenuItem(option), PointerFromQAction(action))
	}
}

func (ptr *QMenu) __exec_actions_atList3(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QMenu___exec_actions_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QMenu) __exec_actions_setList3(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QMenu___exec_actions_setList3(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QMenu) __exec_actions_newList3() unsafe.Pointer {
	return C.QMenu___exec_actions_newList3(ptr.Pointer())
}

//go:generate stringer -type=QMessageBox__ButtonRole
//QMessageBox::ButtonRole
type QMessageBox__ButtonRole int64

const (
	QMessageBox__InvalidRole     QMessageBox__ButtonRole = QMessageBox__ButtonRole(-1)
	QMessageBox__AcceptRole      QMessageBox__ButtonRole = QMessageBox__ButtonRole(0)
	QMessageBox__RejectRole      QMessageBox__ButtonRole = QMessageBox__ButtonRole(1)
	QMessageBox__DestructiveRole QMessageBox__ButtonRole = QMessageBox__ButtonRole(2)
	QMessageBox__ActionRole      QMessageBox__ButtonRole = QMessageBox__ButtonRole(3)
	QMessageBox__HelpRole        QMessageBox__ButtonRole = QMessageBox__ButtonRole(4)
	QMessageBox__YesRole         QMessageBox__ButtonRole = QMessageBox__ButtonRole(5)
	QMessageBox__NoRole          QMessageBox__ButtonRole = QMessageBox__ButtonRole(6)
	QMessageBox__ResetRole       QMessageBox__ButtonRole = QMessageBox__ButtonRole(7)
	QMessageBox__ApplyRole       QMessageBox__ButtonRole = QMessageBox__ButtonRole(8)
	QMessageBox__NRoles          QMessageBox__ButtonRole = QMessageBox__ButtonRole(9)
)

//go:generate stringer -type=QMessageBox__Icon
//QMessageBox::Icon
type QMessageBox__Icon int64

const (
	QMessageBox__NoIcon      QMessageBox__Icon = QMessageBox__Icon(0)
	QMessageBox__Information QMessageBox__Icon = QMessageBox__Icon(1)
	QMessageBox__Warning     QMessageBox__Icon = QMessageBox__Icon(2)
	QMessageBox__Critical    QMessageBox__Icon = QMessageBox__Icon(3)
	QMessageBox__Question    QMessageBox__Icon = QMessageBox__Icon(4)
)

//go:generate stringer -type=QMessageBox__StandardButton
//QMessageBox::StandardButton
type QMessageBox__StandardButton int64

var (
	QMessageBox__NoButton        QMessageBox__StandardButton = QMessageBox__StandardButton(0x00000000)
	QMessageBox__Ok              QMessageBox__StandardButton = QMessageBox__StandardButton(0x00000400)
	QMessageBox__Save            QMessageBox__StandardButton = QMessageBox__StandardButton(0x00000800)
	QMessageBox__SaveAll         QMessageBox__StandardButton = QMessageBox__StandardButton(0x00001000)
	QMessageBox__Open            QMessageBox__StandardButton = QMessageBox__StandardButton(0x00002000)
	QMessageBox__Yes             QMessageBox__StandardButton = QMessageBox__StandardButton(0x00004000)
	QMessageBox__YesToAll        QMessageBox__StandardButton = QMessageBox__StandardButton(0x00008000)
	QMessageBox__No              QMessageBox__StandardButton = QMessageBox__StandardButton(0x00010000)
	QMessageBox__NoToAll         QMessageBox__StandardButton = QMessageBox__StandardButton(0x00020000)
	QMessageBox__Abort           QMessageBox__StandardButton = QMessageBox__StandardButton(0x00040000)
	QMessageBox__Retry           QMessageBox__StandardButton = QMessageBox__StandardButton(0x00080000)
	QMessageBox__Ignore          QMessageBox__StandardButton = QMessageBox__StandardButton(0x00100000)
	QMessageBox__Close           QMessageBox__StandardButton = QMessageBox__StandardButton(0x00200000)
	QMessageBox__Cancel          QMessageBox__StandardButton = QMessageBox__StandardButton(0x00400000)
	QMessageBox__Discard         QMessageBox__StandardButton = QMessageBox__StandardButton(0x00800000)
	QMessageBox__Help            QMessageBox__StandardButton = QMessageBox__StandardButton(0x01000000)
	QMessageBox__Apply           QMessageBox__StandardButton = QMessageBox__StandardButton(0x02000000)
	QMessageBox__Reset           QMessageBox__StandardButton = QMessageBox__StandardButton(0x04000000)
	QMessageBox__RestoreDefaults QMessageBox__StandardButton = QMessageBox__StandardButton(0x08000000)
	QMessageBox__FirstButton     QMessageBox__StandardButton = QMessageBox__StandardButton(QMessageBox__Ok)
	QMessageBox__LastButton      QMessageBox__StandardButton = QMessageBox__StandardButton(QMessageBox__RestoreDefaults)
	QMessageBox__YesAll          QMessageBox__StandardButton = QMessageBox__StandardButton(QMessageBox__YesToAll)
	QMessageBox__NoAll           QMessageBox__StandardButton = QMessageBox__StandardButton(QMessageBox__NoToAll)
	QMessageBox__Default         QMessageBox__StandardButton = QMessageBox__StandardButton(0x00000100)
	QMessageBox__Escape          QMessageBox__StandardButton = QMessageBox__StandardButton(0x00000200)
	QMessageBox__FlagMask        QMessageBox__StandardButton = QMessageBox__StandardButton(0x00000300)
	QMessageBox__ButtonMask      QMessageBox__StandardButton = QMessageBox__StandardButton(C.QMessageBox_ButtonMask_Type())
)

//go:generate stringer -type=QOpenGLWidget__UpdateBehavior
//QOpenGLWidget::UpdateBehavior
type QOpenGLWidget__UpdateBehavior int64

const (
	QOpenGLWidget__NoPartialUpdate QOpenGLWidget__UpdateBehavior = QOpenGLWidget__UpdateBehavior(0)
	QOpenGLWidget__PartialUpdate   QOpenGLWidget__UpdateBehavior = QOpenGLWidget__UpdateBehavior(1)
)

//go:generate stringer -type=QPinchGesture__ChangeFlag
//QPinchGesture::ChangeFlag
type QPinchGesture__ChangeFlag int64

const (
	QPinchGesture__ScaleFactorChanged   QPinchGesture__ChangeFlag = QPinchGesture__ChangeFlag(0x1)
	QPinchGesture__RotationAngleChanged QPinchGesture__ChangeFlag = QPinchGesture__ChangeFlag(0x2)
	QPinchGesture__CenterPointChanged   QPinchGesture__ChangeFlag = QPinchGesture__ChangeFlag(0x4)
)

//go:generate stringer -type=QPlainTextEdit__LineWrapMode
//QPlainTextEdit::LineWrapMode
type QPlainTextEdit__LineWrapMode int64

const (
	QPlainTextEdit__NoWrap      QPlainTextEdit__LineWrapMode = QPlainTextEdit__LineWrapMode(0)
	QPlainTextEdit__WidgetWidth QPlainTextEdit__LineWrapMode = QPlainTextEdit__LineWrapMode(1)
)

//go:generate stringer -type=QProgressBar__Direction
//QProgressBar::Direction
type QProgressBar__Direction int64

const (
	QProgressBar__TopToBottom QProgressBar__Direction = QProgressBar__Direction(0)
	QProgressBar__BottomToTop QProgressBar__Direction = QProgressBar__Direction(1)
)

//go:generate stringer -type=QRubberBand__Shape
//QRubberBand::Shape
type QRubberBand__Shape int64

const (
	QRubberBand__Line      QRubberBand__Shape = QRubberBand__Shape(0)
	QRubberBand__Rectangle QRubberBand__Shape = QRubberBand__Shape(1)
)

type QScrollBar struct {
	QAbstractSlider
}

type QScrollBar_ITF interface {
	QAbstractSlider_ITF
	QScrollBar_PTR() *QScrollBar
}

func (ptr *QScrollBar) QScrollBar_PTR() *QScrollBar {
	return ptr
}

func (ptr *QScrollBar) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractSlider_PTR().Pointer()
	}
	return nil
}

func (ptr *QScrollBar) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QAbstractSlider_PTR().SetPointer(p)
	}
}

func PointerFromQScrollBar(ptr QScrollBar_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScrollBar_PTR().Pointer()
	}
	return nil
}

func NewQScrollBarFromPointer(ptr unsafe.Pointer) (n *QScrollBar) {
	n = new(QScrollBar)
	n.SetPointer(ptr)
	return
}
func NewQScrollBar(parent QWidget_ITF) *QScrollBar {
	tmpValue := NewQScrollBarFromPointer(C.QScrollBar_NewQScrollBar(PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQScrollBar2(orientation core.Qt__Orientation, parent QWidget_ITF) *QScrollBar {
	tmpValue := NewQScrollBarFromPointer(C.QScrollBar_NewQScrollBar2(C.longlong(orientation), PointerFromQWidget(parent)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQScrollBar_DestroyQScrollBar
func callbackQScrollBar_DestroyQScrollBar(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QScrollBar"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQScrollBarFromPointer(ptr).DestroyQScrollBarDefault()
	}
}

func (ptr *QScrollBar) ConnectDestroyQScrollBar(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QScrollBar"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QScrollBar", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QScrollBar", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QScrollBar) DisconnectDestroyQScrollBar() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QScrollBar")
	}
}

func (ptr *QScrollBar) DestroyQScrollBar() {
	if ptr.Pointer() != nil {
		C.QScrollBar_DestroyQScrollBar(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QScrollBar) DestroyQScrollBarDefault() {
	if ptr.Pointer() != nil {
		C.QScrollBar_DestroyQScrollBarDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QScrollBar) InitStyleOption(option QStyleOptionSlider_ITF) {
	if ptr.Pointer() != nil {
		C.QScrollBar_InitStyleOption(ptr.Pointer(), PointerFromQStyleOptionSlider(option))
	}
}

//go:generate stringer -type=QScroller__Input
//QScroller::Input
type QScroller__Input int64

const (
	QScroller__InputPress   QScroller__Input = QScroller__Input(1)
	QScroller__InputMove    QScroller__Input = QScroller__Input(2)
	QScroller__InputRelease QScroller__Input = QScroller__Input(3)
)

//go:generate stringer -type=QScroller__ScrollerGestureType
//QScroller::ScrollerGestureType
type QScroller__ScrollerGestureType int64

const (
	QScroller__TouchGesture             QScroller__ScrollerGestureType = QScroller__ScrollerGestureType(0)
	QScroller__LeftMouseButtonGesture   QScroller__ScrollerGestureType = QScroller__ScrollerGestureType(1)
	QScroller__RightMouseButtonGesture  QScroller__ScrollerGestureType = QScroller__ScrollerGestureType(2)
	QScroller__MiddleMouseButtonGesture QScroller__ScrollerGestureType = QScroller__ScrollerGestureType(3)
)

//go:generate stringer -type=QScroller__State
//QScroller::State
type QScroller__State int64

const (
	QScroller__Inactive  QScroller__State = QScroller__State(0)
	QScroller__Pressed   QScroller__State = QScroller__State(1)
	QScroller__Dragging  QScroller__State = QScroller__State(2)
	QScroller__Scrolling QScroller__State = QScroller__State(3)
)

//go:generate stringer -type=QScrollerProperties__FrameRates
//QScrollerProperties::FrameRates
type QScrollerProperties__FrameRates int64

const (
	QScrollerProperties__Standard QScrollerProperties__FrameRates = QScrollerProperties__FrameRates(0)
	QScrollerProperties__Fps60    QScrollerProperties__FrameRates = QScrollerProperties__FrameRates(1)
	QScrollerProperties__Fps30    QScrollerProperties__FrameRates = QScrollerProperties__FrameRates(2)
	QScrollerProperties__Fps20    QScrollerProperties__FrameRates = QScrollerProperties__FrameRates(3)
)

//go:generate stringer -type=QScrollerProperties__OvershootPolicy
//QScrollerProperties::OvershootPolicy
type QScrollerProperties__OvershootPolicy int64

const (
	QScrollerProperties__OvershootWhenScrollable QScrollerProperties__OvershootPolicy = QScrollerProperties__OvershootPolicy(0)
	QScrollerProperties__OvershootAlwaysOff      QScrollerProperties__OvershootPolicy = QScrollerProperties__OvershootPolicy(1)
	QScrollerProperties__OvershootAlwaysOn       QScrollerProperties__OvershootPolicy = QScrollerProperties__OvershootPolicy(2)
)

//go:generate stringer -type=QScrollerProperties__ScrollMetric
//QScrollerProperties::ScrollMetric
type QScrollerProperties__ScrollMetric int64

const (
	QScrollerProperties__MousePressEventDelay           QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(0)
	QScrollerProperties__DragStartDistance              QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(1)
	QScrollerProperties__DragVelocitySmoothingFactor    QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(2)
	QScrollerProperties__AxisLockThreshold              QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(3)
	QScrollerProperties__ScrollingCurve                 QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(4)
	QScrollerProperties__DecelerationFactor             QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(5)
	QScrollerProperties__MinimumVelocity                QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(6)
	QScrollerProperties__MaximumVelocity                QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(7)
	QScrollerProperties__MaximumClickThroughVelocity    QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(8)
	QScrollerProperties__AcceleratingFlickMaximumTime   QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(9)
	QScrollerProperties__AcceleratingFlickSpeedupFactor QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(10)
	QScrollerProperties__SnapPositionRatio              QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(11)
	QScrollerProperties__SnapTime                       QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(12)
	QScrollerProperties__OvershootDragResistanceFactor  QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(13)
	QScrollerProperties__OvershootDragDistanceFactor    QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(14)
	QScrollerProperties__OvershootScrollDistanceFactor  QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(15)
	QScrollerProperties__OvershootScrollTime            QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(16)
	QScrollerProperties__HorizontalOvershootPolicy      QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(17)
	QScrollerProperties__VerticalOvershootPolicy        QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(18)
	QScrollerProperties__FrameRate                      QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(19)
	QScrollerProperties__ScrollMetricCount              QScrollerProperties__ScrollMetric = QScrollerProperties__ScrollMetric(20)
)

type QSizePolicy struct {
	ptr unsafe.Pointer
}

type QSizePolicy_ITF interface {
	QSizePolicy_PTR() *QSizePolicy
}

func (ptr *QSizePolicy) QSizePolicy_PTR() *QSizePolicy {
	return ptr
}

func (ptr *QSizePolicy) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QSizePolicy) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQSizePolicy(ptr QSizePolicy_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSizePolicy_PTR().Pointer()
	}
	return nil
}

func NewQSizePolicyFromPointer(ptr unsafe.Pointer) (n *QSizePolicy) {
	n = new(QSizePolicy)
	n.SetPointer(ptr)
	return
}

func (ptr *QSizePolicy) DestroyQSizePolicy() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//go:generate stringer -type=QSizePolicy__ControlType
//QSizePolicy::ControlType
type QSizePolicy__ControlType int64

const (
	QSizePolicy__DefaultType QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000001)
	QSizePolicy__ButtonBox   QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000002)
	QSizePolicy__CheckBox    QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000004)
	QSizePolicy__ComboBox    QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000008)
	QSizePolicy__Frame       QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000010)
	QSizePolicy__GroupBox    QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000020)
	QSizePolicy__Label       QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000040)
	QSizePolicy__Line        QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000080)
	QSizePolicy__LineEdit    QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000100)
	QSizePolicy__PushButton  QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000200)
	QSizePolicy__RadioButton QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000400)
	QSizePolicy__Slider      QSizePolicy__ControlType = QSizePolicy__ControlType(0x00000800)
	QSizePolicy__SpinBox     QSizePolicy__ControlType = QSizePolicy__ControlType(0x00001000)
	QSizePolicy__TabWidget   QSizePolicy__ControlType = QSizePolicy__ControlType(0x00002000)
	QSizePolicy__ToolButton  QSizePolicy__ControlType = QSizePolicy__ControlType(0x00004000)
)

//go:generate stringer -type=QSizePolicy__Policy
//QSizePolicy::Policy
type QSizePolicy__Policy int64

const (
	QSizePolicy__Fixed            QSizePolicy__Policy = QSizePolicy__Policy(0)
	QSizePolicy__Minimum          QSizePolicy__Policy = QSizePolicy__Policy(QSizePolicy__GrowFlag)
	QSizePolicy__Maximum          QSizePolicy__Policy = QSizePolicy__Policy(QSizePolicy__ShrinkFlag)
	QSizePolicy__Preferred        QSizePolicy__Policy = QSizePolicy__Policy(QSizePolicy__GrowFlag | QSizePolicy__ShrinkFlag)
	QSizePolicy__MinimumExpanding QSizePolicy__Policy = QSizePolicy__Policy(QSizePolicy__GrowFlag | QSizePolicy__ExpandFlag)
	QSizePolicy__Expanding        QSizePolicy__Policy = QSizePolicy__Policy(QSizePolicy__GrowFlag | QSizePolicy__ShrinkFlag | QSizePolicy__ExpandFlag)
	QSizePolicy__Ignored          QSizePolicy__Policy = QSizePolicy__Policy(QSizePolicy__ShrinkFlag | QSizePolicy__GrowFlag | QSizePolicy__IgnoreFlag)
)

//go:generate stringer -type=QSizePolicy__PolicyFlag
//QSizePolicy::PolicyFlag
type QSizePolicy__PolicyFlag int64

const (
	QSizePolicy__GrowFlag   QSizePolicy__PolicyFlag = QSizePolicy__PolicyFlag(1)
	QSizePolicy__ExpandFlag QSizePolicy__PolicyFlag = QSizePolicy__PolicyFlag(2)
	QSizePolicy__ShrinkFlag QSizePolicy__PolicyFlag = QSizePolicy__PolicyFlag(4)
	QSizePolicy__IgnoreFlag QSizePolicy__PolicyFlag = QSizePolicy__PolicyFlag(8)
)

func NewQSizePolicy() *QSizePolicy {
	tmpValue := NewQSizePolicyFromPointer(C.QSizePolicy_NewQSizePolicy())
	runtime.SetFinalizer(tmpValue, (*QSizePolicy).DestroyQSizePolicy)
	return tmpValue
}

func NewQSizePolicy2(horizontal QSizePolicy__Policy, vertical QSizePolicy__Policy, ty QSizePolicy__ControlType) *QSizePolicy {
	tmpValue := NewQSizePolicyFromPointer(C.QSizePolicy_NewQSizePolicy2(C.longlong(horizontal), C.longlong(vertical), C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QSizePolicy).DestroyQSizePolicy)
	return tmpValue
}

func (ptr *QSizePolicy) SetControlType(ty QSizePolicy__ControlType) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetControlType(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QSizePolicy) SetHeightForWidth(dependent bool) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetHeightForWidth(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(dependent))))
	}
}

func (ptr *QSizePolicy) SetHorizontalPolicy(policy QSizePolicy__Policy) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetHorizontalPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QSizePolicy) SetHorizontalStretch(stretchFactor int) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetHorizontalStretch(ptr.Pointer(), C.int(int32(stretchFactor)))
	}
}

func (ptr *QSizePolicy) SetRetainSizeWhenHidden(retainSize bool) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetRetainSizeWhenHidden(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(retainSize))))
	}
}

func (ptr *QSizePolicy) SetVerticalPolicy(policy QSizePolicy__Policy) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetVerticalPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QSizePolicy) SetVerticalStretch(stretchFactor int) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetVerticalStretch(ptr.Pointer(), C.int(int32(stretchFactor)))
	}
}

func (ptr *QSizePolicy) SetWidthForHeight(dependent bool) {
	if ptr.Pointer() != nil {
		C.QSizePolicy_SetWidthForHeight(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(dependent))))
	}
}

func (ptr *QSizePolicy) Transpose() {
	if ptr.Pointer() != nil {
		C.QSizePolicy_Transpose(ptr.Pointer())
	}
}

func (ptr *QSizePolicy) Transposed() *QSizePolicy {
	if ptr.Pointer() != nil {
		tmpValue := NewQSizePolicyFromPointer(C.QSizePolicy_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizePolicy).DestroyQSizePolicy)
		return tmpValue
	}
	return nil
}

func (ptr *QSizePolicy) ControlType() QSizePolicy__ControlType {
	if ptr.Pointer() != nil {
		return QSizePolicy__ControlType(C.QSizePolicy_ControlType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSizePolicy) HorizontalPolicy() QSizePolicy__Policy {
	if ptr.Pointer() != nil {
		return QSizePolicy__Policy(C.QSizePolicy_HorizontalPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSizePolicy) VerticalPolicy() QSizePolicy__Policy {
	if ptr.Pointer() != nil {
		return QSizePolicy__Policy(C.QSizePolicy_VerticalPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSizePolicy) ExpandingDirections() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QSizePolicy_ExpandingDirections(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSizePolicy) HasHeightForWidth() bool {
	if ptr.Pointer() != nil {
		return int8(C.QSizePolicy_HasHeightForWidth(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QSizePolicy) HasWidthForHeight() bool {
	if ptr.Pointer() != nil {
		return int8(C.QSizePolicy_HasWidthForHeight(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QSizePolicy) RetainSizeWhenHidden() bool {
	if ptr.Pointer() != nil {
		return int8(C.QSizePolicy_RetainSizeWhenHidden(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QSizePolicy) HorizontalStretch() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSizePolicy_HorizontalStretch(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSizePolicy) VerticalStretch() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSizePolicy_VerticalStretch(ptr.Pointer())))
	}
	return 0
}

//go:generate stringer -type=QSlider__TickPosition
//QSlider::TickPosition
type QSlider__TickPosition int64

const (
	QSlider__NoTicks        QSlider__TickPosition = QSlider__TickPosition(0)
	QSlider__TicksAbove     QSlider__TickPosition = QSlider__TickPosition(1)
	QSlider__TicksLeft      QSlider__TickPosition = QSlider__TickPosition(QSlider__TicksAbove)
	QSlider__TicksBelow     QSlider__TickPosition = QSlider__TickPosition(2)
	QSlider__TicksRight     QSlider__TickPosition = QSlider__TickPosition(QSlider__TicksBelow)
	QSlider__TicksBothSides QSlider__TickPosition = QSlider__TickPosition(3)
)

type QSpacerItem struct {
	QLayoutItem
}

type QSpacerItem_ITF interface {
	QLayoutItem_ITF
	QSpacerItem_PTR() *QSpacerItem
}

func (ptr *QSpacerItem) QSpacerItem_PTR() *QSpacerItem {
	return ptr
}

func (ptr *QSpacerItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QLayoutItem_PTR().Pointer()
	}
	return nil
}

func (ptr *QSpacerItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QLayoutItem_PTR().SetPointer(p)
	}
}

func PointerFromQSpacerItem(ptr QSpacerItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSpacerItem_PTR().Pointer()
	}
	return nil
}

func NewQSpacerItemFromPointer(ptr unsafe.Pointer) (n *QSpacerItem) {
	n = new(QSpacerItem)
	n.SetPointer(ptr)
	return
}
func NewQSpacerItem(w int, h int, hPolicy QSizePolicy__Policy, vPolicy QSizePolicy__Policy) *QSpacerItem {
	return NewQSpacerItemFromPointer(C.QSpacerItem_NewQSpacerItem(C.int(int32(w)), C.int(int32(h)), C.longlong(hPolicy), C.longlong(vPolicy)))
}

func (ptr *QSpacerItem) ChangeSize(w int, h int, hPolicy QSizePolicy__Policy, vPolicy QSizePolicy__Policy) {
	if ptr.Pointer() != nil {
		C.QSpacerItem_ChangeSize(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)), C.longlong(hPolicy), C.longlong(vPolicy))
	}
}

//export callbackQSpacerItem_SetGeometry
func callbackQSpacerItem_SetGeometry(ptr unsafe.Pointer, r unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setGeometry"); signal != nil {
		(*(*func(*core.QRect))(signal))(core.NewQRectFromPointer(r))
	} else {
		NewQSpacerItemFromPointer(ptr).SetGeometryDefault(core.NewQRectFromPointer(r))
	}
}

func (ptr *QSpacerItem) ConnectSetGeometry(f func(r *core.QRect)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setGeometry"); signal != nil {
			f := func(r *core.QRect) {
				(*(*func(*core.QRect))(signal))(r)
				f(r)
			}
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setGeometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectSetGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setGeometry")
	}
}

func (ptr *QSpacerItem) SetGeometry(r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QSpacerItem_SetGeometry(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

func (ptr *QSpacerItem) SetGeometryDefault(r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QSpacerItem_SetGeometryDefault(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

//export callbackQSpacerItem_DestroyQSpacerItem
func callbackQSpacerItem_DestroyQSpacerItem(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QSpacerItem"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQSpacerItemFromPointer(ptr).DestroyQSpacerItemDefault()
	}
}

func (ptr *QSpacerItem) ConnectDestroyQSpacerItem(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QSpacerItem"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QSpacerItem", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QSpacerItem", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectDestroyQSpacerItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QSpacerItem")
	}
}

func (ptr *QSpacerItem) DestroyQSpacerItem() {
	if ptr.Pointer() != nil {
		C.QSpacerItem_DestroyQSpacerItem(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QSpacerItem) DestroyQSpacerItemDefault() {
	if ptr.Pointer() != nil {
		C.QSpacerItem_DestroyQSpacerItemDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQSpacerItem_Geometry
func callbackQSpacerItem_Geometry(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "geometry"); signal != nil {
		return core.PointerFromQRect((*(*func() *core.QRect)(signal))())
	}

	return core.PointerFromQRect(NewQSpacerItemFromPointer(ptr).GeometryDefault())
}

func (ptr *QSpacerItem) ConnectGeometry(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "geometry"); signal != nil {
			f := func() *core.QRect {
				(*(*func() *core.QRect)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "geometry", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "geometry", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectGeometry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "geometry")
	}
}

func (ptr *QSpacerItem) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QSpacerItem_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QSpacerItem) GeometryDefault() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QSpacerItem_GeometryDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQSpacerItem_MaximumSize
func callbackQSpacerItem_MaximumSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "maximumSize"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQSpacerItemFromPointer(ptr).MaximumSizeDefault())
}

func (ptr *QSpacerItem) ConnectMaximumSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "maximumSize"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "maximumSize", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "maximumSize", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectMaximumSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "maximumSize")
	}
}

func (ptr *QSpacerItem) MaximumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QSpacerItem_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSpacerItem) MaximumSizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QSpacerItem_MaximumSizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQSpacerItem_MinimumSize
func callbackQSpacerItem_MinimumSize(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "minimumSize"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQSpacerItemFromPointer(ptr).MinimumSizeDefault())
}

func (ptr *QSpacerItem) ConnectMinimumSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "minimumSize"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "minimumSize", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "minimumSize", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectMinimumSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "minimumSize")
	}
}

func (ptr *QSpacerItem) MinimumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QSpacerItem_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSpacerItem) MinimumSizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QSpacerItem_MinimumSizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQSpacerItem_SizeHint
func callbackQSpacerItem_SizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeHint"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQSpacerItemFromPointer(ptr).SizeHintDefault())
}

func (ptr *QSpacerItem) ConnectSizeHint(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sizeHint"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectSizeHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sizeHint")
	}
}

func (ptr *QSpacerItem) SizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QSpacerItem_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSpacerItem) SizeHintDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QSpacerItem_SizeHintDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSpacerItem) SizePolicy() *QSizePolicy {
	if ptr.Pointer() != nil {
		tmpValue := NewQSizePolicyFromPointer(C.QSpacerItem_SizePolicy(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizePolicy).DestroyQSizePolicy)
		return tmpValue
	}
	return nil
}

//export callbackQSpacerItem_ExpandingDirections
func callbackQSpacerItem_ExpandingDirections(ptr unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(ptr, "expandingDirections"); signal != nil {
		return C.longlong((*(*func() core.Qt__Orientation)(signal))())
	}

	return C.longlong(NewQSpacerItemFromPointer(ptr).ExpandingDirectionsDefault())
}

func (ptr *QSpacerItem) ConnectExpandingDirections(f func() core.Qt__Orientation) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "expandingDirections"); signal != nil {
			f := func() core.Qt__Orientation {
				(*(*func() core.Qt__Orientation)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "expandingDirections", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "expandingDirections", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectExpandingDirections() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "expandingDirections")
	}
}

func (ptr *QSpacerItem) ExpandingDirections() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QSpacerItem_ExpandingDirections(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSpacerItem) ExpandingDirectionsDefault() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QSpacerItem_ExpandingDirectionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQSpacerItem_IsEmpty
func callbackQSpacerItem_IsEmpty(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "isEmpty"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSpacerItemFromPointer(ptr).IsEmptyDefault())))
}

func (ptr *QSpacerItem) ConnectIsEmpty(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "isEmpty"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "isEmpty", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "isEmpty", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QSpacerItem) DisconnectIsEmpty() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "isEmpty")
	}
}

func (ptr *QSpacerItem) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return int8(C.QSpacerItem_IsEmpty(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QSpacerItem) IsEmptyDefault() bool {
	if ptr.Pointer() != nil {
		return int8(C.QSpacerItem_IsEmptyDefault(ptr.Pointer())) != 0
	}
	return false
}

//go:generate stringer -type=QStackedLayout__StackingMode
//QStackedLayout::StackingMode
type QStackedLayout__StackingMode int64

const (
	QStackedLayout__StackOne QStackedLayout__StackingMode = QStackedLayout__StackingMode(0)
	QStackedLayout__StackAll QStackedLayout__StackingMode = QStackedLayout__StackingMode(1)
)

type QStyle struct {
	core.QObject
}

type QStyle_ITF interface {
	core.QObject_ITF
	QStyle_PTR() *QStyle
}

func (ptr *QStyle) QStyle_PTR() *QStyle {
	return ptr
}

func (ptr *QStyle) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QStyle) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
	}
}

func PointerFromQStyle(ptr QStyle_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyle_PTR().Pointer()
	}
	return nil
}

func NewQStyleFromPointer(ptr unsafe.Pointer) (n *QStyle) {
	n = new(QStyle)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QStyle__ComplexControl
//QStyle::ComplexControl
type QStyle__ComplexControl int64

const (
	QStyle__CC_SpinBox     QStyle__ComplexControl = QStyle__ComplexControl(0)
	QStyle__CC_ComboBox    QStyle__ComplexControl = QStyle__ComplexControl(1)
	QStyle__CC_ScrollBar   QStyle__ComplexControl = QStyle__ComplexControl(2)
	QStyle__CC_Slider      QStyle__ComplexControl = QStyle__ComplexControl(3)
	QStyle__CC_ToolButton  QStyle__ComplexControl = QStyle__ComplexControl(4)
	QStyle__CC_TitleBar    QStyle__ComplexControl = QStyle__ComplexControl(5)
	QStyle__CC_Dial        QStyle__ComplexControl = QStyle__ComplexControl(6)
	QStyle__CC_GroupBox    QStyle__ComplexControl = QStyle__ComplexControl(7)
	QStyle__CC_MdiControls QStyle__ComplexControl = QStyle__ComplexControl(8)
	QStyle__CC_CustomBase  QStyle__ComplexControl = QStyle__ComplexControl(0xf0000000)
)

//go:generate stringer -type=QStyle__ContentsType
//QStyle::ContentsType
type QStyle__ContentsType int64

const (
	QStyle__CT_PushButton    QStyle__ContentsType = QStyle__ContentsType(0)
	QStyle__CT_CheckBox      QStyle__ContentsType = QStyle__ContentsType(1)
	QStyle__CT_RadioButton   QStyle__ContentsType = QStyle__ContentsType(2)
	QStyle__CT_ToolButton    QStyle__ContentsType = QStyle__ContentsType(3)
	QStyle__CT_ComboBox      QStyle__ContentsType = QStyle__ContentsType(4)
	QStyle__CT_Splitter      QStyle__ContentsType = QStyle__ContentsType(5)
	QStyle__CT_ProgressBar   QStyle__ContentsType = QStyle__ContentsType(6)
	QStyle__CT_MenuItem      QStyle__ContentsType = QStyle__ContentsType(7)
	QStyle__CT_MenuBarItem   QStyle__ContentsType = QStyle__ContentsType(8)
	QStyle__CT_MenuBar       QStyle__ContentsType = QStyle__ContentsType(9)
	QStyle__CT_Menu          QStyle__ContentsType = QStyle__ContentsType(10)
	QStyle__CT_TabBarTab     QStyle__ContentsType = QStyle__ContentsType(11)
	QStyle__CT_Slider        QStyle__ContentsType = QStyle__ContentsType(12)
	QStyle__CT_ScrollBar     QStyle__ContentsType = QStyle__ContentsType(13)
	QStyle__CT_LineEdit      QStyle__ContentsType = QStyle__ContentsType(14)
	QStyle__CT_SpinBox       QStyle__ContentsType = QStyle__ContentsType(15)
	QStyle__CT_SizeGrip      QStyle__ContentsType = QStyle__ContentsType(16)
	QStyle__CT_TabWidget     QStyle__ContentsType = QStyle__ContentsType(17)
	QStyle__CT_DialogButtons QStyle__ContentsType = QStyle__ContentsType(18)
	QStyle__CT_HeaderSection QStyle__ContentsType = QStyle__ContentsType(19)
	QStyle__CT_GroupBox      QStyle__ContentsType = QStyle__ContentsType(20)
	QStyle__CT_MdiControls   QStyle__ContentsType = QStyle__ContentsType(21)
	QStyle__CT_ItemViewItem  QStyle__ContentsType = QStyle__ContentsType(22)
	QStyle__CT_CustomBase    QStyle__ContentsType = QStyle__ContentsType(0xf0000000)
)

//go:generate stringer -type=QStyle__ControlElement
//QStyle::ControlElement
type QStyle__ControlElement int64

const (
	QStyle__CE_PushButton          QStyle__ControlElement = QStyle__ControlElement(0)
	QStyle__CE_PushButtonBevel     QStyle__ControlElement = QStyle__ControlElement(1)
	QStyle__CE_PushButtonLabel     QStyle__ControlElement = QStyle__ControlElement(2)
	QStyle__CE_CheckBox            QStyle__ControlElement = QStyle__ControlElement(3)
	QStyle__CE_CheckBoxLabel       QStyle__ControlElement = QStyle__ControlElement(4)
	QStyle__CE_RadioButton         QStyle__ControlElement = QStyle__ControlElement(5)
	QStyle__CE_RadioButtonLabel    QStyle__ControlElement = QStyle__ControlElement(6)
	QStyle__CE_TabBarTab           QStyle__ControlElement = QStyle__ControlElement(7)
	QStyle__CE_TabBarTabShape      QStyle__ControlElement = QStyle__ControlElement(8)
	QStyle__CE_TabBarTabLabel      QStyle__ControlElement = QStyle__ControlElement(9)
	QStyle__CE_ProgressBar         QStyle__ControlElement = QStyle__ControlElement(10)
	QStyle__CE_ProgressBarGroove   QStyle__ControlElement = QStyle__ControlElement(11)
	QStyle__CE_ProgressBarContents QStyle__ControlElement = QStyle__ControlElement(12)
	QStyle__CE_ProgressBarLabel    QStyle__ControlElement = QStyle__ControlElement(13)
	QStyle__CE_MenuItem            QStyle__ControlElement = QStyle__ControlElement(14)
	QStyle__CE_MenuScroller        QStyle__ControlElement = QStyle__ControlElement(15)
	QStyle__CE_MenuVMargin         QStyle__ControlElement = QStyle__ControlElement(16)
	QStyle__CE_MenuHMargin         QStyle__ControlElement = QStyle__ControlElement(17)
	QStyle__CE_MenuTearoff         QStyle__ControlElement = QStyle__ControlElement(18)
	QStyle__CE_MenuEmptyArea       QStyle__ControlElement = QStyle__ControlElement(19)
	QStyle__CE_MenuBarItem         QStyle__ControlElement = QStyle__ControlElement(20)
	QStyle__CE_MenuBarEmptyArea    QStyle__ControlElement = QStyle__ControlElement(21)
	QStyle__CE_ToolButtonLabel     QStyle__ControlElement = QStyle__ControlElement(22)
	QStyle__CE_Header              QStyle__ControlElement = QStyle__ControlElement(23)
	QStyle__CE_HeaderSection       QStyle__ControlElement = QStyle__ControlElement(24)
	QStyle__CE_HeaderLabel         QStyle__ControlElement = QStyle__ControlElement(25)
	QStyle__CE_ToolBoxTab          QStyle__ControlElement = QStyle__ControlElement(26)
	QStyle__CE_SizeGrip            QStyle__ControlElement = QStyle__ControlElement(27)
	QStyle__CE_Splitter            QStyle__ControlElement = QStyle__ControlElement(28)
	QStyle__CE_RubberBand          QStyle__ControlElement = QStyle__ControlElement(29)
	QStyle__CE_DockWidgetTitle     QStyle__ControlElement = QStyle__ControlElement(30)
	QStyle__CE_ScrollBarAddLine    QStyle__ControlElement = QStyle__ControlElement(31)
	QStyle__CE_ScrollBarSubLine    QStyle__ControlElement = QStyle__ControlElement(32)
	QStyle__CE_ScrollBarAddPage    QStyle__ControlElement = QStyle__ControlElement(33)
	QStyle__CE_ScrollBarSubPage    QStyle__ControlElement = QStyle__ControlElement(34)
	QStyle__CE_ScrollBarSlider     QStyle__ControlElement = QStyle__ControlElement(35)
	QStyle__CE_ScrollBarFirst      QStyle__ControlElement = QStyle__ControlElement(36)
	QStyle__CE_ScrollBarLast       QStyle__ControlElement = QStyle__ControlElement(37)
	QStyle__CE_FocusFrame          QStyle__ControlElement = QStyle__ControlElement(38)
	QStyle__CE_ComboBoxLabel       QStyle__ControlElement = QStyle__ControlElement(39)
	QStyle__CE_ToolBar             QStyle__ControlElement = QStyle__ControlElement(40)
	QStyle__CE_ToolBoxTabShape     QStyle__ControlElement = QStyle__ControlElement(41)
	QStyle__CE_ToolBoxTabLabel     QStyle__ControlElement = QStyle__ControlElement(42)
	QStyle__CE_HeaderEmptyArea     QStyle__ControlElement = QStyle__ControlElement(43)
	QStyle__CE_ColumnViewGrip      QStyle__ControlElement = QStyle__ControlElement(44)
	QStyle__CE_ItemViewItem        QStyle__ControlElement = QStyle__ControlElement(45)
	QStyle__CE_ShapedFrame         QStyle__ControlElement = QStyle__ControlElement(46)
	QStyle__CE_CustomBase          QStyle__ControlElement = QStyle__ControlElement(0xf0000000)
)

//go:generate stringer -type=QStyle__PixelMetric
//QStyle::PixelMetric
type QStyle__PixelMetric int64

const (
	QStyle__PM_ButtonMargin                       QStyle__PixelMetric = QStyle__PixelMetric(0)
	QStyle__PM_ButtonDefaultIndicator             QStyle__PixelMetric = QStyle__PixelMetric(1)
	QStyle__PM_MenuButtonIndicator                QStyle__PixelMetric = QStyle__PixelMetric(2)
	QStyle__PM_ButtonShiftHorizontal              QStyle__PixelMetric = QStyle__PixelMetric(3)
	QStyle__PM_ButtonShiftVertical                QStyle__PixelMetric = QStyle__PixelMetric(4)
	QStyle__PM_DefaultFrameWidth                  QStyle__PixelMetric = QStyle__PixelMetric(5)
	QStyle__PM_SpinBoxFrameWidth                  QStyle__PixelMetric = QStyle__PixelMetric(6)
	QStyle__PM_ComboBoxFrameWidth                 QStyle__PixelMetric = QStyle__PixelMetric(7)
	QStyle__PM_MaximumDragDistance                QStyle__PixelMetric = QStyle__PixelMetric(8)
	QStyle__PM_ScrollBarExtent                    QStyle__PixelMetric = QStyle__PixelMetric(9)
	QStyle__PM_ScrollBarSliderMin                 QStyle__PixelMetric = QStyle__PixelMetric(10)
	QStyle__PM_SliderThickness                    QStyle__PixelMetric = QStyle__PixelMetric(11)
	QStyle__PM_SliderControlThickness             QStyle__PixelMetric = QStyle__PixelMetric(12)
	QStyle__PM_SliderLength                       QStyle__PixelMetric = QStyle__PixelMetric(13)
	QStyle__PM_SliderTickmarkOffset               QStyle__PixelMetric = QStyle__PixelMetric(14)
	QStyle__PM_SliderSpaceAvailable               QStyle__PixelMetric = QStyle__PixelMetric(15)
	QStyle__PM_DockWidgetSeparatorExtent          QStyle__PixelMetric = QStyle__PixelMetric(16)
	QStyle__PM_DockWidgetHandleExtent             QStyle__PixelMetric = QStyle__PixelMetric(17)
	QStyle__PM_DockWidgetFrameWidth               QStyle__PixelMetric = QStyle__PixelMetric(18)
	QStyle__PM_TabBarTabOverlap                   QStyle__PixelMetric = QStyle__PixelMetric(19)
	QStyle__PM_TabBarTabHSpace                    QStyle__PixelMetric = QStyle__PixelMetric(20)
	QStyle__PM_TabBarTabVSpace                    QStyle__PixelMetric = QStyle__PixelMetric(21)
	QStyle__PM_TabBarBaseHeight                   QStyle__PixelMetric = QStyle__PixelMetric(22)
	QStyle__PM_TabBarBaseOverlap                  QStyle__PixelMetric = QStyle__PixelMetric(23)
	QStyle__PM_ProgressBarChunkWidth              QStyle__PixelMetric = QStyle__PixelMetric(24)
	QStyle__PM_SplitterWidth                      QStyle__PixelMetric = QStyle__PixelMetric(25)
	QStyle__PM_TitleBarHeight                     QStyle__PixelMetric = QStyle__PixelMetric(26)
	QStyle__PM_MenuScrollerHeight                 QStyle__PixelMetric = QStyle__PixelMetric(27)
	QStyle__PM_MenuHMargin                        QStyle__PixelMetric = QStyle__PixelMetric(28)
	QStyle__PM_MenuVMargin                        QStyle__PixelMetric = QStyle__PixelMetric(29)
	QStyle__PM_MenuPanelWidth                     QStyle__PixelMetric = QStyle__PixelMetric(30)
	QStyle__PM_MenuTearoffHeight                  QStyle__PixelMetric = QStyle__PixelMetric(31)
	QStyle__PM_MenuDesktopFrameWidth              QStyle__PixelMetric = QStyle__PixelMetric(32)
	QStyle__PM_MenuBarPanelWidth                  QStyle__PixelMetric = QStyle__PixelMetric(33)
	QStyle__PM_MenuBarItemSpacing                 QStyle__PixelMetric = QStyle__PixelMetric(34)
	QStyle__PM_MenuBarVMargin                     QStyle__PixelMetric = QStyle__PixelMetric(35)
	QStyle__PM_MenuBarHMargin                     QStyle__PixelMetric = QStyle__PixelMetric(36)
	QStyle__PM_IndicatorWidth                     QStyle__PixelMetric = QStyle__PixelMetric(37)
	QStyle__PM_IndicatorHeight                    QStyle__PixelMetric = QStyle__PixelMetric(38)
	QStyle__PM_ExclusiveIndicatorWidth            QStyle__PixelMetric = QStyle__PixelMetric(39)
	QStyle__PM_ExclusiveIndicatorHeight           QStyle__PixelMetric = QStyle__PixelMetric(40)
	QStyle__PM_DialogButtonsSeparator             QStyle__PixelMetric = QStyle__PixelMetric(41)
	QStyle__PM_DialogButtonsButtonWidth           QStyle__PixelMetric = QStyle__PixelMetric(42)
	QStyle__PM_DialogButtonsButtonHeight          QStyle__PixelMetric = QStyle__PixelMetric(43)
	QStyle__PM_MdiSubWindowFrameWidth             QStyle__PixelMetric = QStyle__PixelMetric(44)
	QStyle__PM_MDIFrameWidth                      QStyle__PixelMetric = QStyle__PixelMetric(QStyle__PM_MdiSubWindowFrameWidth)
	QStyle__PM_MdiSubWindowMinimizedWidth         QStyle__PixelMetric = QStyle__PixelMetric(45)
	QStyle__PM_MDIMinimizedWidth                  QStyle__PixelMetric = QStyle__PixelMetric(QStyle__PM_MdiSubWindowMinimizedWidth)
	QStyle__PM_HeaderMargin                       QStyle__PixelMetric = QStyle__PixelMetric(46)
	QStyle__PM_HeaderMarkSize                     QStyle__PixelMetric = QStyle__PixelMetric(47)
	QStyle__PM_HeaderGripMargin                   QStyle__PixelMetric = QStyle__PixelMetric(48)
	QStyle__PM_TabBarTabShiftHorizontal           QStyle__PixelMetric = QStyle__PixelMetric(49)
	QStyle__PM_TabBarTabShiftVertical             QStyle__PixelMetric = QStyle__PixelMetric(50)
	QStyle__PM_TabBarScrollButtonWidth            QStyle__PixelMetric = QStyle__PixelMetric(51)
	QStyle__PM_ToolBarFrameWidth                  QStyle__PixelMetric = QStyle__PixelMetric(52)
	QStyle__PM_ToolBarHandleExtent                QStyle__PixelMetric = QStyle__PixelMetric(53)
	QStyle__PM_ToolBarItemSpacing                 QStyle__PixelMetric = QStyle__PixelMetric(54)
	QStyle__PM_ToolBarItemMargin                  QStyle__PixelMetric = QStyle__PixelMetric(55)
	QStyle__PM_ToolBarSeparatorExtent             QStyle__PixelMetric = QStyle__PixelMetric(56)
	QStyle__PM_ToolBarExtensionExtent             QStyle__PixelMetric = QStyle__PixelMetric(57)
	QStyle__PM_SpinBoxSliderHeight                QStyle__PixelMetric = QStyle__PixelMetric(58)
	QStyle__PM_DefaultTopLevelMargin              QStyle__PixelMetric = QStyle__PixelMetric(59)
	QStyle__PM_DefaultChildMargin                 QStyle__PixelMetric = QStyle__PixelMetric(60)
	QStyle__PM_DefaultLayoutSpacing               QStyle__PixelMetric = QStyle__PixelMetric(61)
	QStyle__PM_ToolBarIconSize                    QStyle__PixelMetric = QStyle__PixelMetric(62)
	QStyle__PM_ListViewIconSize                   QStyle__PixelMetric = QStyle__PixelMetric(63)
	QStyle__PM_IconViewIconSize                   QStyle__PixelMetric = QStyle__PixelMetric(64)
	QStyle__PM_SmallIconSize                      QStyle__PixelMetric = QStyle__PixelMetric(65)
	QStyle__PM_LargeIconSize                      QStyle__PixelMetric = QStyle__PixelMetric(66)
	QStyle__PM_FocusFrameVMargin                  QStyle__PixelMetric = QStyle__PixelMetric(67)
	QStyle__PM_FocusFrameHMargin                  QStyle__PixelMetric = QStyle__PixelMetric(68)
	QStyle__PM_ToolTipLabelFrameWidth             QStyle__PixelMetric = QStyle__PixelMetric(69)
	QStyle__PM_CheckBoxLabelSpacing               QStyle__PixelMetric = QStyle__PixelMetric(70)
	QStyle__PM_TabBarIconSize                     QStyle__PixelMetric = QStyle__PixelMetric(71)
	QStyle__PM_SizeGripSize                       QStyle__PixelMetric = QStyle__PixelMetric(72)
	QStyle__PM_DockWidgetTitleMargin              QStyle__PixelMetric = QStyle__PixelMetric(73)
	QStyle__PM_MessageBoxIconSize                 QStyle__PixelMetric = QStyle__PixelMetric(74)
	QStyle__PM_ButtonIconSize                     QStyle__PixelMetric = QStyle__PixelMetric(75)
	QStyle__PM_DockWidgetTitleBarButtonMargin     QStyle__PixelMetric = QStyle__PixelMetric(76)
	QStyle__PM_RadioButtonLabelSpacing            QStyle__PixelMetric = QStyle__PixelMetric(77)
	QStyle__PM_LayoutLeftMargin                   QStyle__PixelMetric = QStyle__PixelMetric(78)
	QStyle__PM_LayoutTopMargin                    QStyle__PixelMetric = QStyle__PixelMetric(79)
	QStyle__PM_LayoutRightMargin                  QStyle__PixelMetric = QStyle__PixelMetric(80)
	QStyle__PM_LayoutBottomMargin                 QStyle__PixelMetric = QStyle__PixelMetric(81)
	QStyle__PM_LayoutHorizontalSpacing            QStyle__PixelMetric = QStyle__PixelMetric(82)
	QStyle__PM_LayoutVerticalSpacing              QStyle__PixelMetric = QStyle__PixelMetric(83)
	QStyle__PM_TabBar_ScrollButtonOverlap         QStyle__PixelMetric = QStyle__PixelMetric(84)
	QStyle__PM_TextCursorWidth                    QStyle__PixelMetric = QStyle__PixelMetric(85)
	QStyle__PM_TabCloseIndicatorWidth             QStyle__PixelMetric = QStyle__PixelMetric(86)
	QStyle__PM_TabCloseIndicatorHeight            QStyle__PixelMetric = QStyle__PixelMetric(87)
	QStyle__PM_ScrollView_ScrollBarSpacing        QStyle__PixelMetric = QStyle__PixelMetric(88)
	QStyle__PM_ScrollView_ScrollBarOverlap        QStyle__PixelMetric = QStyle__PixelMetric(89)
	QStyle__PM_SubMenuOverlap                     QStyle__PixelMetric = QStyle__PixelMetric(90)
	QStyle__PM_TreeViewIndentation                QStyle__PixelMetric = QStyle__PixelMetric(91)
	QStyle__PM_HeaderDefaultSectionSizeHorizontal QStyle__PixelMetric = QStyle__PixelMetric(92)
	QStyle__PM_HeaderDefaultSectionSizeVertical   QStyle__PixelMetric = QStyle__PixelMetric(93)
	QStyle__PM_TitleBarButtonIconSize             QStyle__PixelMetric = QStyle__PixelMetric(94)
	QStyle__PM_TitleBarButtonSize                 QStyle__PixelMetric = QStyle__PixelMetric(95)
	QStyle__PM_CustomBase                         QStyle__PixelMetric = QStyle__PixelMetric(0xf0000000)
)

//go:generate stringer -type=QStyle__PrimitiveElement
//QStyle::PrimitiveElement
type QStyle__PrimitiveElement int64

const (
	QStyle__PE_Frame                           QStyle__PrimitiveElement = QStyle__PrimitiveElement(0)
	QStyle__PE_FrameDefaultButton              QStyle__PrimitiveElement = QStyle__PrimitiveElement(1)
	QStyle__PE_FrameDockWidget                 QStyle__PrimitiveElement = QStyle__PrimitiveElement(2)
	QStyle__PE_FrameFocusRect                  QStyle__PrimitiveElement = QStyle__PrimitiveElement(3)
	QStyle__PE_FrameGroupBox                   QStyle__PrimitiveElement = QStyle__PrimitiveElement(4)
	QStyle__PE_FrameLineEdit                   QStyle__PrimitiveElement = QStyle__PrimitiveElement(5)
	QStyle__PE_FrameMenu                       QStyle__PrimitiveElement = QStyle__PrimitiveElement(6)
	QStyle__PE_FrameStatusBar                  QStyle__PrimitiveElement = QStyle__PrimitiveElement(7)
	QStyle__PE_FrameStatusBarItem              QStyle__PrimitiveElement = QStyle__PrimitiveElement(QStyle__PE_FrameStatusBar)
	QStyle__PE_FrameTabWidget                  QStyle__PrimitiveElement = QStyle__PrimitiveElement(8)
	QStyle__PE_FrameWindow                     QStyle__PrimitiveElement = QStyle__PrimitiveElement(9)
	QStyle__PE_FrameButtonBevel                QStyle__PrimitiveElement = QStyle__PrimitiveElement(10)
	QStyle__PE_FrameButtonTool                 QStyle__PrimitiveElement = QStyle__PrimitiveElement(11)
	QStyle__PE_FrameTabBarBase                 QStyle__PrimitiveElement = QStyle__PrimitiveElement(12)
	QStyle__PE_PanelButtonCommand              QStyle__PrimitiveElement = QStyle__PrimitiveElement(13)
	QStyle__PE_PanelButtonBevel                QStyle__PrimitiveElement = QStyle__PrimitiveElement(14)
	QStyle__PE_PanelButtonTool                 QStyle__PrimitiveElement = QStyle__PrimitiveElement(15)
	QStyle__PE_PanelMenuBar                    QStyle__PrimitiveElement = QStyle__PrimitiveElement(16)
	QStyle__PE_PanelToolBar                    QStyle__PrimitiveElement = QStyle__PrimitiveElement(17)
	QStyle__PE_PanelLineEdit                   QStyle__PrimitiveElement = QStyle__PrimitiveElement(18)
	QStyle__PE_IndicatorArrowDown              QStyle__PrimitiveElement = QStyle__PrimitiveElement(19)
	QStyle__PE_IndicatorArrowLeft              QStyle__PrimitiveElement = QStyle__PrimitiveElement(20)
	QStyle__PE_IndicatorArrowRight             QStyle__PrimitiveElement = QStyle__PrimitiveElement(21)
	QStyle__PE_IndicatorArrowUp                QStyle__PrimitiveElement = QStyle__PrimitiveElement(22)
	QStyle__PE_IndicatorBranch                 QStyle__PrimitiveElement = QStyle__PrimitiveElement(23)
	QStyle__PE_IndicatorButtonDropDown         QStyle__PrimitiveElement = QStyle__PrimitiveElement(24)
	QStyle__PE_IndicatorViewItemCheck          QStyle__PrimitiveElement = QStyle__PrimitiveElement(25)
	QStyle__PE_IndicatorItemViewItemCheck      QStyle__PrimitiveElement = QStyle__PrimitiveElement(QStyle__PE_IndicatorViewItemCheck)
	QStyle__PE_IndicatorCheckBox               QStyle__PrimitiveElement = QStyle__PrimitiveElement(26)
	QStyle__PE_IndicatorDockWidgetResizeHandle QStyle__PrimitiveElement = QStyle__PrimitiveElement(27)
	QStyle__PE_IndicatorHeaderArrow            QStyle__PrimitiveElement = QStyle__PrimitiveElement(28)
	QStyle__PE_IndicatorMenuCheckMark          QStyle__PrimitiveElement = QStyle__PrimitiveElement(29)
	QStyle__PE_IndicatorProgressChunk          QStyle__PrimitiveElement = QStyle__PrimitiveElement(30)
	QStyle__PE_IndicatorRadioButton            QStyle__PrimitiveElement = QStyle__PrimitiveElement(31)
	QStyle__PE_IndicatorSpinDown               QStyle__PrimitiveElement = QStyle__PrimitiveElement(32)
	QStyle__PE_IndicatorSpinMinus              QStyle__PrimitiveElement = QStyle__PrimitiveElement(33)
	QStyle__PE_IndicatorSpinPlus               QStyle__PrimitiveElement = QStyle__PrimitiveElement(34)
	QStyle__PE_IndicatorSpinUp                 QStyle__PrimitiveElement = QStyle__PrimitiveElement(35)
	QStyle__PE_IndicatorToolBarHandle          QStyle__PrimitiveElement = QStyle__PrimitiveElement(36)
	QStyle__PE_IndicatorToolBarSeparator       QStyle__PrimitiveElement = QStyle__PrimitiveElement(37)
	QStyle__PE_PanelTipLabel                   QStyle__PrimitiveElement = QStyle__PrimitiveElement(38)
	QStyle__PE_IndicatorTabTear                QStyle__PrimitiveElement = QStyle__PrimitiveElement(39)
	QStyle__PE_IndicatorTabTearLeft            QStyle__PrimitiveElement = QStyle__PrimitiveElement(QStyle__PE_IndicatorTabTear)
	QStyle__PE_PanelScrollAreaCorner           QStyle__PrimitiveElement = QStyle__PrimitiveElement(40)
	QStyle__PE_Widget                          QStyle__PrimitiveElement = QStyle__PrimitiveElement(41)
	QStyle__PE_IndicatorColumnViewArrow        QStyle__PrimitiveElement = QStyle__PrimitiveElement(42)
	QStyle__PE_IndicatorItemViewItemDrop       QStyle__PrimitiveElement = QStyle__PrimitiveElement(43)
	QStyle__PE_PanelItemViewItem               QStyle__PrimitiveElement = QStyle__PrimitiveElement(44)
	QStyle__PE_PanelItemViewRow                QStyle__PrimitiveElement = QStyle__PrimitiveElement(45)
	QStyle__PE_PanelStatusBar                  QStyle__PrimitiveElement = QStyle__PrimitiveElement(46)
	QStyle__PE_IndicatorTabClose               QStyle__PrimitiveElement = QStyle__PrimitiveElement(47)
	QStyle__PE_PanelMenu                       QStyle__PrimitiveElement = QStyle__PrimitiveElement(48)
	QStyle__PE_IndicatorTabTearRight           QStyle__PrimitiveElement = QStyle__PrimitiveElement(49)
	QStyle__PE_CustomBase                      QStyle__PrimitiveElement = QStyle__PrimitiveElement(0xf000000)
)

//go:generate stringer -type=QStyle__RequestSoftwareInputPanel
//QStyle::RequestSoftwareInputPanel
type QStyle__RequestSoftwareInputPanel int64

const (
	QStyle__RSIP_OnMouseClickAndAlreadyFocused QStyle__RequestSoftwareInputPanel = QStyle__RequestSoftwareInputPanel(0)
	QStyle__RSIP_OnMouseClick                  QStyle__RequestSoftwareInputPanel = QStyle__RequestSoftwareInputPanel(1)
)

//go:generate stringer -type=QStyle__StandardPixmap
//QStyle::StandardPixmap
type QStyle__StandardPixmap int64

const (
	QStyle__SP_TitleBarMenuButton               QStyle__StandardPixmap = QStyle__StandardPixmap(0)
	QStyle__SP_TitleBarMinButton                QStyle__StandardPixmap = QStyle__StandardPixmap(1)
	QStyle__SP_TitleBarMaxButton                QStyle__StandardPixmap = QStyle__StandardPixmap(2)
	QStyle__SP_TitleBarCloseButton              QStyle__StandardPixmap = QStyle__StandardPixmap(3)
	QStyle__SP_TitleBarNormalButton             QStyle__StandardPixmap = QStyle__StandardPixmap(4)
	QStyle__SP_TitleBarShadeButton              QStyle__StandardPixmap = QStyle__StandardPixmap(5)
	QStyle__SP_TitleBarUnshadeButton            QStyle__StandardPixmap = QStyle__StandardPixmap(6)
	QStyle__SP_TitleBarContextHelpButton        QStyle__StandardPixmap = QStyle__StandardPixmap(7)
	QStyle__SP_DockWidgetCloseButton            QStyle__StandardPixmap = QStyle__StandardPixmap(8)
	QStyle__SP_MessageBoxInformation            QStyle__StandardPixmap = QStyle__StandardPixmap(9)
	QStyle__SP_MessageBoxWarning                QStyle__StandardPixmap = QStyle__StandardPixmap(10)
	QStyle__SP_MessageBoxCritical               QStyle__StandardPixmap = QStyle__StandardPixmap(11)
	QStyle__SP_MessageBoxQuestion               QStyle__StandardPixmap = QStyle__StandardPixmap(12)
	QStyle__SP_DesktopIcon                      QStyle__StandardPixmap = QStyle__StandardPixmap(13)
	QStyle__SP_TrashIcon                        QStyle__StandardPixmap = QStyle__StandardPixmap(14)
	QStyle__SP_ComputerIcon                     QStyle__StandardPixmap = QStyle__StandardPixmap(15)
	QStyle__SP_DriveFDIcon                      QStyle__StandardPixmap = QStyle__StandardPixmap(16)
	QStyle__SP_DriveHDIcon                      QStyle__StandardPixmap = QStyle__StandardPixmap(17)
	QStyle__SP_DriveCDIcon                      QStyle__StandardPixmap = QStyle__StandardPixmap(18)
	QStyle__SP_DriveDVDIcon                     QStyle__StandardPixmap = QStyle__StandardPixmap(19)
	QStyle__SP_DriveNetIcon                     QStyle__StandardPixmap = QStyle__StandardPixmap(20)
	QStyle__SP_DirOpenIcon                      QStyle__StandardPixmap = QStyle__StandardPixmap(21)
	QStyle__SP_DirClosedIcon                    QStyle__StandardPixmap = QStyle__StandardPixmap(22)
	QStyle__SP_DirLinkIcon                      QStyle__StandardPixmap = QStyle__StandardPixmap(23)
	QStyle__SP_DirLinkOpenIcon                  QStyle__StandardPixmap = QStyle__StandardPixmap(24)
	QStyle__SP_FileIcon                         QStyle__StandardPixmap = QStyle__StandardPixmap(25)
	QStyle__SP_FileLinkIcon                     QStyle__StandardPixmap = QStyle__StandardPixmap(26)
	QStyle__SP_ToolBarHorizontalExtensionButton QStyle__StandardPixmap = QStyle__StandardPixmap(27)
	QStyle__SP_ToolBarVerticalExtensionButton   QStyle__StandardPixmap = QStyle__StandardPixmap(28)
	QStyle__SP_FileDialogStart                  QStyle__StandardPixmap = QStyle__StandardPixmap(29)
	QStyle__SP_FileDialogEnd                    QStyle__StandardPixmap = QStyle__StandardPixmap(30)
	QStyle__SP_FileDialogToParent               QStyle__StandardPixmap = QStyle__StandardPixmap(31)
	QStyle__SP_FileDialogNewFolder              QStyle__StandardPixmap = QStyle__StandardPixmap(32)
	QStyle__SP_FileDialogDetailedView           QStyle__StandardPixmap = QStyle__StandardPixmap(33)
	QStyle__SP_FileDialogInfoView               QStyle__StandardPixmap = QStyle__StandardPixmap(34)
	QStyle__SP_FileDialogContentsView           QStyle__StandardPixmap = QStyle__StandardPixmap(35)
	QStyle__SP_FileDialogListView               QStyle__StandardPixmap = QStyle__StandardPixmap(36)
	QStyle__SP_FileDialogBack                   QStyle__StandardPixmap = QStyle__StandardPixmap(37)
	QStyle__SP_DirIcon                          QStyle__StandardPixmap = QStyle__StandardPixmap(38)
	QStyle__SP_DialogOkButton                   QStyle__StandardPixmap = QStyle__StandardPixmap(39)
	QStyle__SP_DialogCancelButton               QStyle__StandardPixmap = QStyle__StandardPixmap(40)
	QStyle__SP_DialogHelpButton                 QStyle__StandardPixmap = QStyle__StandardPixmap(41)
	QStyle__SP_DialogOpenButton                 QStyle__StandardPixmap = QStyle__StandardPixmap(42)
	QStyle__SP_DialogSaveButton                 QStyle__StandardPixmap = QStyle__StandardPixmap(43)
	QStyle__SP_DialogCloseButton                QStyle__StandardPixmap = QStyle__StandardPixmap(44)
	QStyle__SP_DialogApplyButton                QStyle__StandardPixmap = QStyle__StandardPixmap(45)
	QStyle__SP_DialogResetButton                QStyle__StandardPixmap = QStyle__StandardPixmap(46)
	QStyle__SP_DialogDiscardButton              QStyle__StandardPixmap = QStyle__StandardPixmap(47)
	QStyle__SP_DialogYesButton                  QStyle__StandardPixmap = QStyle__StandardPixmap(48)
	QStyle__SP_DialogNoButton                   QStyle__StandardPixmap = QStyle__StandardPixmap(49)
	QStyle__SP_ArrowUp                          QStyle__StandardPixmap = QStyle__StandardPixmap(50)
	QStyle__SP_ArrowDown                        QStyle__StandardPixmap = QStyle__StandardPixmap(51)
	QStyle__SP_ArrowLeft                        QStyle__StandardPixmap = QStyle__StandardPixmap(52)
	QStyle__SP_ArrowRight                       QStyle__StandardPixmap = QStyle__StandardPixmap(53)
	QStyle__SP_ArrowBack                        QStyle__StandardPixmap = QStyle__StandardPixmap(54)
	QStyle__SP_ArrowForward                     QStyle__StandardPixmap = QStyle__StandardPixmap(55)
	QStyle__SP_DirHomeIcon                      QStyle__StandardPixmap = QStyle__StandardPixmap(56)
	QStyle__SP_CommandLink                      QStyle__StandardPixmap = QStyle__StandardPixmap(57)
	QStyle__SP_VistaShield                      QStyle__StandardPixmap = QStyle__StandardPixmap(58)
	QStyle__SP_BrowserReload                    QStyle__StandardPixmap = QStyle__StandardPixmap(59)
	QStyle__SP_BrowserStop                      QStyle__StandardPixmap = QStyle__StandardPixmap(60)
	QStyle__SP_MediaPlay                        QStyle__StandardPixmap = QStyle__StandardPixmap(61)
	QStyle__SP_MediaStop                        QStyle__StandardPixmap = QStyle__StandardPixmap(62)
	QStyle__SP_MediaPause                       QStyle__StandardPixmap = QStyle__StandardPixmap(63)
	QStyle__SP_MediaSkipForward                 QStyle__StandardPixmap = QStyle__StandardPixmap(64)
	QStyle__SP_MediaSkipBackward                QStyle__StandardPixmap = QStyle__StandardPixmap(65)
	QStyle__SP_MediaSeekForward                 QStyle__StandardPixmap = QStyle__StandardPixmap(66)
	QStyle__SP_MediaSeekBackward                QStyle__StandardPixmap = QStyle__StandardPixmap(67)
	QStyle__SP_MediaVolume                      QStyle__StandardPixmap = QStyle__StandardPixmap(68)
	QStyle__SP_MediaVolumeMuted                 QStyle__StandardPixmap = QStyle__StandardPixmap(69)
	QStyle__SP_LineEditClearButton              QStyle__StandardPixmap = QStyle__StandardPixmap(70)
	QStyle__SP_CustomBase                       QStyle__StandardPixmap = QStyle__StandardPixmap(0xf0000000)
)

//go:generate stringer -type=QStyle__StateFlag
//QStyle::StateFlag
type QStyle__StateFlag int64

const (
	QStyle__State_None                QStyle__StateFlag = QStyle__StateFlag(0x00000000)
	QStyle__State_Enabled             QStyle__StateFlag = QStyle__StateFlag(0x00000001)
	QStyle__State_Raised              QStyle__StateFlag = QStyle__StateFlag(0x00000002)
	QStyle__State_Sunken              QStyle__StateFlag = QStyle__StateFlag(0x00000004)
	QStyle__State_Off                 QStyle__StateFlag = QStyle__StateFlag(0x00000008)
	QStyle__State_NoChange            QStyle__StateFlag = QStyle__StateFlag(0x00000010)
	QStyle__State_On                  QStyle__StateFlag = QStyle__StateFlag(0x00000020)
	QStyle__State_DownArrow           QStyle__StateFlag = QStyle__StateFlag(0x00000040)
	QStyle__State_Horizontal          QStyle__StateFlag = QStyle__StateFlag(0x00000080)
	QStyle__State_HasFocus            QStyle__StateFlag = QStyle__StateFlag(0x00000100)
	QStyle__State_Top                 QStyle__StateFlag = QStyle__StateFlag(0x00000200)
	QStyle__State_Bottom              QStyle__StateFlag = QStyle__StateFlag(0x00000400)
	QStyle__State_FocusAtBorder       QStyle__StateFlag = QStyle__StateFlag(0x00000800)
	QStyle__State_AutoRaise           QStyle__StateFlag = QStyle__StateFlag(0x00001000)
	QStyle__State_MouseOver           QStyle__StateFlag = QStyle__StateFlag(0x00002000)
	QStyle__State_UpArrow             QStyle__StateFlag = QStyle__StateFlag(0x00004000)
	QStyle__State_Selected            QStyle__StateFlag = QStyle__StateFlag(0x00008000)
	QStyle__State_Active              QStyle__StateFlag = QStyle__StateFlag(0x00010000)
	QStyle__State_Window              QStyle__StateFlag = QStyle__StateFlag(0x00020000)
	QStyle__State_Open                QStyle__StateFlag = QStyle__StateFlag(0x00040000)
	QStyle__State_Children            QStyle__StateFlag = QStyle__StateFlag(0x00080000)
	QStyle__State_Item                QStyle__StateFlag = QStyle__StateFlag(0x00100000)
	QStyle__State_Sibling             QStyle__StateFlag = QStyle__StateFlag(0x00200000)
	QStyle__State_Editing             QStyle__StateFlag = QStyle__StateFlag(0x00400000)
	QStyle__State_KeyboardFocusChange QStyle__StateFlag = QStyle__StateFlag(0x00800000)
	QStyle__State_HasEditFocus        QStyle__StateFlag = QStyle__StateFlag(0x01000000)
	QStyle__State_ReadOnly            QStyle__StateFlag = QStyle__StateFlag(0x02000000)
	QStyle__State_Small               QStyle__StateFlag = QStyle__StateFlag(0x04000000)
	QStyle__State_Mini                QStyle__StateFlag = QStyle__StateFlag(0x08000000)
)

//go:generate stringer -type=QStyle__StyleHint
//QStyle::StyleHint
type QStyle__StyleHint int64

var (
	QStyle__SH_EtchDisabledText                               QStyle__StyleHint = QStyle__StyleHint(0)
	QStyle__SH_DitherDisabledText                             QStyle__StyleHint = QStyle__StyleHint(1)
	QStyle__SH_ScrollBar_MiddleClickAbsolutePosition          QStyle__StyleHint = QStyle__StyleHint(2)
	QStyle__SH_ScrollBar_ScrollWhenPointerLeavesControl       QStyle__StyleHint = QStyle__StyleHint(3)
	QStyle__SH_TabBar_SelectMouseType                         QStyle__StyleHint = QStyle__StyleHint(4)
	QStyle__SH_TabBar_Alignment                               QStyle__StyleHint = QStyle__StyleHint(5)
	QStyle__SH_Header_ArrowAlignment                          QStyle__StyleHint = QStyle__StyleHint(6)
	QStyle__SH_Slider_SnapToValue                             QStyle__StyleHint = QStyle__StyleHint(7)
	QStyle__SH_Slider_SloppyKeyEvents                         QStyle__StyleHint = QStyle__StyleHint(8)
	QStyle__SH_ProgressDialog_CenterCancelButton              QStyle__StyleHint = QStyle__StyleHint(9)
	QStyle__SH_ProgressDialog_TextLabelAlignment              QStyle__StyleHint = QStyle__StyleHint(10)
	QStyle__SH_PrintDialog_RightAlignButtons                  QStyle__StyleHint = QStyle__StyleHint(11)
	QStyle__SH_MainWindow_SpaceBelowMenuBar                   QStyle__StyleHint = QStyle__StyleHint(12)
	QStyle__SH_FontDialog_SelectAssociatedText                QStyle__StyleHint = QStyle__StyleHint(13)
	QStyle__SH_Menu_AllowActiveAndDisabled                    QStyle__StyleHint = QStyle__StyleHint(14)
	QStyle__SH_Menu_SpaceActivatesItem                        QStyle__StyleHint = QStyle__StyleHint(15)
	QStyle__SH_Menu_SubMenuPopupDelay                         QStyle__StyleHint = QStyle__StyleHint(16)
	QStyle__SH_ScrollView_FrameOnlyAroundContents             QStyle__StyleHint = QStyle__StyleHint(17)
	QStyle__SH_MenuBar_AltKeyNavigation                       QStyle__StyleHint = QStyle__StyleHint(18)
	QStyle__SH_ComboBox_ListMouseTracking                     QStyle__StyleHint = QStyle__StyleHint(19)
	QStyle__SH_Menu_MouseTracking                             QStyle__StyleHint = QStyle__StyleHint(20)
	QStyle__SH_MenuBar_MouseTracking                          QStyle__StyleHint = QStyle__StyleHint(21)
	QStyle__SH_ItemView_ChangeHighlightOnFocus                QStyle__StyleHint = QStyle__StyleHint(22)
	QStyle__SH_Widget_ShareActivation                         QStyle__StyleHint = QStyle__StyleHint(23)
	QStyle__SH_Workspace_FillSpaceOnMaximize                  QStyle__StyleHint = QStyle__StyleHint(24)
	QStyle__SH_ComboBox_Popup                                 QStyle__StyleHint = QStyle__StyleHint(25)
	QStyle__SH_TitleBar_NoBorder                              QStyle__StyleHint = QStyle__StyleHint(26)
	QStyle__SH_Slider_StopMouseOverSlider                     QStyle__StyleHint = QStyle__StyleHint(27)
	QStyle__SH_ScrollBar_StopMouseOverSlider                  QStyle__StyleHint = QStyle__StyleHint(QStyle__SH_Slider_StopMouseOverSlider)
	QStyle__SH_BlinkCursorWhenTextSelected                    QStyle__StyleHint = QStyle__StyleHint(28)
	QStyle__SH_RichText_FullWidthSelection                    QStyle__StyleHint = QStyle__StyleHint(29)
	QStyle__SH_Menu_Scrollable                                QStyle__StyleHint = QStyle__StyleHint(30)
	QStyle__SH_GroupBox_TextLabelVerticalAlignment            QStyle__StyleHint = QStyle__StyleHint(31)
	QStyle__SH_GroupBox_TextLabelColor                        QStyle__StyleHint = QStyle__StyleHint(32)
	QStyle__SH_Menu_SloppySubMenus                            QStyle__StyleHint = QStyle__StyleHint(33)
	QStyle__SH_Table_GridLineColor                            QStyle__StyleHint = QStyle__StyleHint(34)
	QStyle__SH_LineEdit_PasswordCharacter                     QStyle__StyleHint = QStyle__StyleHint(35)
	QStyle__SH_DialogButtons_DefaultButton                    QStyle__StyleHint = QStyle__StyleHint(36)
	QStyle__SH_ToolBox_SelectedPageTitleBold                  QStyle__StyleHint = QStyle__StyleHint(37)
	QStyle__SH_TabBar_PreferNoArrows                          QStyle__StyleHint = QStyle__StyleHint(38)
	QStyle__SH_ScrollBar_LeftClickAbsolutePosition            QStyle__StyleHint = QStyle__StyleHint(39)
	QStyle__SH_ListViewExpand_SelectMouseType                 QStyle__StyleHint = QStyle__StyleHint(40)
	QStyle__SH_UnderlineShortcut                              QStyle__StyleHint = QStyle__StyleHint(41)
	QStyle__SH_SpinBox_AnimateButton                          QStyle__StyleHint = QStyle__StyleHint(42)
	QStyle__SH_SpinBox_KeyPressAutoRepeatRate                 QStyle__StyleHint = QStyle__StyleHint(43)
	QStyle__SH_SpinBox_ClickAutoRepeatRate                    QStyle__StyleHint = QStyle__StyleHint(44)
	QStyle__SH_Menu_FillScreenWithScroll                      QStyle__StyleHint = QStyle__StyleHint(45)
	QStyle__SH_ToolTipLabel_Opacity                           QStyle__StyleHint = QStyle__StyleHint(46)
	QStyle__SH_DrawMenuBarSeparator                           QStyle__StyleHint = QStyle__StyleHint(47)
	QStyle__SH_TitleBar_ModifyNotification                    QStyle__StyleHint = QStyle__StyleHint(48)
	QStyle__SH_Button_FocusPolicy                             QStyle__StyleHint = QStyle__StyleHint(49)
	QStyle__SH_MessageBox_UseBorderForButtonSpacing           QStyle__StyleHint = QStyle__StyleHint(50)
	QStyle__SH_TitleBar_AutoRaise                             QStyle__StyleHint = QStyle__StyleHint(51)
	QStyle__SH_ToolButton_PopupDelay                          QStyle__StyleHint = QStyle__StyleHint(52)
	QStyle__SH_FocusFrame_Mask                                QStyle__StyleHint = QStyle__StyleHint(53)
	QStyle__SH_RubberBand_Mask                                QStyle__StyleHint = QStyle__StyleHint(54)
	QStyle__SH_WindowFrame_Mask                               QStyle__StyleHint = QStyle__StyleHint(55)
	QStyle__SH_SpinControls_DisableOnBounds                   QStyle__StyleHint = QStyle__StyleHint(56)
	QStyle__SH_Dial_BackgroundRole                            QStyle__StyleHint = QStyle__StyleHint(57)
	QStyle__SH_ComboBox_LayoutDirection                       QStyle__StyleHint = QStyle__StyleHint(58)
	QStyle__SH_ItemView_EllipsisLocation                      QStyle__StyleHint = QStyle__StyleHint(59)
	QStyle__SH_ItemView_ShowDecorationSelected                QStyle__StyleHint = QStyle__StyleHint(60)
	QStyle__SH_ItemView_ActivateItemOnSingleClick             QStyle__StyleHint = QStyle__StyleHint(61)
	QStyle__SH_ScrollBar_ContextMenu                          QStyle__StyleHint = QStyle__StyleHint(62)
	QStyle__SH_ScrollBar_RollBetweenButtons                   QStyle__StyleHint = QStyle__StyleHint(63)
	QStyle__SH_Slider_AbsoluteSetButtons                      QStyle__StyleHint = QStyle__StyleHint(64)
	QStyle__SH_Slider_PageSetButtons                          QStyle__StyleHint = QStyle__StyleHint(65)
	QStyle__SH_Menu_KeyboardSearch                            QStyle__StyleHint = QStyle__StyleHint(66)
	QStyle__SH_TabBar_ElideMode                               QStyle__StyleHint = QStyle__StyleHint(67)
	QStyle__SH_DialogButtonLayout                             QStyle__StyleHint = QStyle__StyleHint(68)
	QStyle__SH_ComboBox_PopupFrameStyle                       QStyle__StyleHint = QStyle__StyleHint(69)
	QStyle__SH_MessageBox_TextInteractionFlags                QStyle__StyleHint = QStyle__StyleHint(70)
	QStyle__SH_DialogButtonBox_ButtonsHaveIcons               QStyle__StyleHint = QStyle__StyleHint(71)
	QStyle__SH_SpellCheckUnderlineStyle                       QStyle__StyleHint = QStyle__StyleHint(72)
	QStyle__SH_MessageBox_CenterButtons                       QStyle__StyleHint = QStyle__StyleHint(73)
	QStyle__SH_Menu_SelectionWrap                             QStyle__StyleHint = QStyle__StyleHint(74)
	QStyle__SH_ItemView_MovementWithoutUpdatingSelection      QStyle__StyleHint = QStyle__StyleHint(75)
	QStyle__SH_ToolTip_Mask                                   QStyle__StyleHint = QStyle__StyleHint(76)
	QStyle__SH_FocusFrame_AboveWidget                         QStyle__StyleHint = QStyle__StyleHint(77)
	QStyle__SH_TextControl_FocusIndicatorTextCharFormat       QStyle__StyleHint = QStyle__StyleHint(78)
	QStyle__SH_WizardStyle                                    QStyle__StyleHint = QStyle__StyleHint(79)
	QStyle__SH_ItemView_ArrowKeysNavigateIntoChildren         QStyle__StyleHint = QStyle__StyleHint(80)
	QStyle__SH_Menu_Mask                                      QStyle__StyleHint = QStyle__StyleHint(81)
	QStyle__SH_Menu_FlashTriggeredItem                        QStyle__StyleHint = QStyle__StyleHint(82)
	QStyle__SH_Menu_FadeOutOnHide                             QStyle__StyleHint = QStyle__StyleHint(83)
	QStyle__SH_SpinBox_ClickAutoRepeatThreshold               QStyle__StyleHint = QStyle__StyleHint(84)
	QStyle__SH_ItemView_PaintAlternatingRowColorsForEmptyArea QStyle__StyleHint = QStyle__StyleHint(85)
	QStyle__SH_FormLayoutWrapPolicy                           QStyle__StyleHint = QStyle__StyleHint(86)
	QStyle__SH_TabWidget_DefaultTabPosition                   QStyle__StyleHint = QStyle__StyleHint(87)
	QStyle__SH_ToolBar_Movable                                QStyle__StyleHint = QStyle__StyleHint(88)
	QStyle__SH_FormLayoutFieldGrowthPolicy                    QStyle__StyleHint = QStyle__StyleHint(89)
	QStyle__SH_FormLayoutFormAlignment                        QStyle__StyleHint = QStyle__StyleHint(90)
	QStyle__SH_FormLayoutLabelAlignment                       QStyle__StyleHint = QStyle__StyleHint(91)
	QStyle__SH_ItemView_DrawDelegateFrame                     QStyle__StyleHint = QStyle__StyleHint(92)
	QStyle__SH_TabBar_CloseButtonPosition                     QStyle__StyleHint = QStyle__StyleHint(93)
	QStyle__SH_DockWidget_ButtonsHaveFrame                    QStyle__StyleHint = QStyle__StyleHint(94)
	QStyle__SH_ToolButtonStyle                                QStyle__StyleHint = QStyle__StyleHint(95)
	QStyle__SH_RequestSoftwareInputPanel                      QStyle__StyleHint = QStyle__StyleHint(96)
	QStyle__SH_ScrollBar_Transient                            QStyle__StyleHint = QStyle__StyleHint(97)
	QStyle__SH_Menu_SupportsSections                          QStyle__StyleHint = QStyle__StyleHint(98)
	QStyle__SH_ToolTip_WakeUpDelay                            QStyle__StyleHint = QStyle__StyleHint(99)
	QStyle__SH_ToolTip_FallAsleepDelay                        QStyle__StyleHint = QStyle__StyleHint(100)
	QStyle__SH_Widget_Animate                                 QStyle__StyleHint = QStyle__StyleHint(101)
	QStyle__SH_Splitter_OpaqueResize                          QStyle__StyleHint = QStyle__StyleHint(102)
	QStyle__SH_ComboBox_UseNativePopup                        QStyle__StyleHint = QStyle__StyleHint(103)
	QStyle__SH_LineEdit_PasswordMaskDelay                     QStyle__StyleHint = QStyle__StyleHint(104)
	QStyle__SH_TabBar_ChangeCurrentDelay                      QStyle__StyleHint = QStyle__StyleHint(105)
	QStyle__SH_Menu_SubMenuUniDirection                       QStyle__StyleHint = QStyle__StyleHint(106)
	QStyle__SH_Menu_SubMenuUniDirectionFailCount              QStyle__StyleHint = QStyle__StyleHint(107)
	QStyle__SH_Menu_SubMenuSloppySelectOtherActions           QStyle__StyleHint = QStyle__StyleHint(108)
	QStyle__SH_Menu_SubMenuSloppyCloseTimeout                 QStyle__StyleHint = QStyle__StyleHint(109)
	QStyle__SH_Menu_SubMenuResetWhenReenteringParent          QStyle__StyleHint = QStyle__StyleHint(110)
	QStyle__SH_Menu_SubMenuDontStartSloppyOnLeave             QStyle__StyleHint = QStyle__StyleHint(111)
	QStyle__SH_ItemView_ScrollMode                            QStyle__StyleHint = QStyle__StyleHint(112)
	QStyle__SH_TitleBar_ShowToolTipsOnButtons                 QStyle__StyleHint = QStyle__StyleHint(113)
	QStyle__SH_Widget_Animation_Duration                      QStyle__StyleHint = QStyle__StyleHint(114)
	QStyle__SH_ComboBox_AllowWheelScrolling                   QStyle__StyleHint = QStyle__StyleHint(115)
	QStyle__SH_SpinBox_ButtonsInsideFrame                     QStyle__StyleHint = QStyle__StyleHint(116)
	QStyle__SH_SpinBox_StepModifier                           QStyle__StyleHint = QStyle__StyleHint(117)
	QStyle__SH_CustomBase                                     QStyle__StyleHint = QStyle__StyleHint(0xf0000000)
)

//go:generate stringer -type=QStyle__SubControl
//QStyle::SubControl
type QStyle__SubControl int64

const (
	QStyle__SC_None                      QStyle__SubControl = QStyle__SubControl(0x00000000)
	QStyle__SC_ScrollBarAddLine          QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_ScrollBarSubLine          QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_ScrollBarAddPage          QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_ScrollBarSubPage          QStyle__SubControl = QStyle__SubControl(0x00000008)
	QStyle__SC_ScrollBarFirst            QStyle__SubControl = QStyle__SubControl(0x00000010)
	QStyle__SC_ScrollBarLast             QStyle__SubControl = QStyle__SubControl(0x00000020)
	QStyle__SC_ScrollBarSlider           QStyle__SubControl = QStyle__SubControl(0x00000040)
	QStyle__SC_ScrollBarGroove           QStyle__SubControl = QStyle__SubControl(0x00000080)
	QStyle__SC_SpinBoxUp                 QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_SpinBoxDown               QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_SpinBoxFrame              QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_SpinBoxEditField          QStyle__SubControl = QStyle__SubControl(0x00000008)
	QStyle__SC_ComboBoxFrame             QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_ComboBoxEditField         QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_ComboBoxArrow             QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_ComboBoxListBoxPopup      QStyle__SubControl = QStyle__SubControl(0x00000008)
	QStyle__SC_SliderGroove              QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_SliderHandle              QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_SliderTickmarks           QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_ToolButton                QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_ToolButtonMenu            QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_TitleBarSysMenu           QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_TitleBarMinButton         QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_TitleBarMaxButton         QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_TitleBarCloseButton       QStyle__SubControl = QStyle__SubControl(0x00000008)
	QStyle__SC_TitleBarNormalButton      QStyle__SubControl = QStyle__SubControl(0x00000010)
	QStyle__SC_TitleBarShadeButton       QStyle__SubControl = QStyle__SubControl(0x00000020)
	QStyle__SC_TitleBarUnshadeButton     QStyle__SubControl = QStyle__SubControl(0x00000040)
	QStyle__SC_TitleBarContextHelpButton QStyle__SubControl = QStyle__SubControl(0x00000080)
	QStyle__SC_TitleBarLabel             QStyle__SubControl = QStyle__SubControl(0x00000100)
	QStyle__SC_DialGroove                QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_DialHandle                QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_DialTickmarks             QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_GroupBoxCheckBox          QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_GroupBoxLabel             QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_GroupBoxContents          QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_GroupBoxFrame             QStyle__SubControl = QStyle__SubControl(0x00000008)
	QStyle__SC_MdiMinButton              QStyle__SubControl = QStyle__SubControl(0x00000001)
	QStyle__SC_MdiNormalButton           QStyle__SubControl = QStyle__SubControl(0x00000002)
	QStyle__SC_MdiCloseButton            QStyle__SubControl = QStyle__SubControl(0x00000004)
	QStyle__SC_CustomBase                QStyle__SubControl = QStyle__SubControl(0xf0000000)
	QStyle__SC_All                       QStyle__SubControl = QStyle__SubControl(0xffffffff)
)

//go:generate stringer -type=QStyle__SubElement
//QStyle::SubElement
type QStyle__SubElement int64

const (
	QStyle__SE_PushButtonContents         QStyle__SubElement = QStyle__SubElement(0)
	QStyle__SE_PushButtonFocusRect        QStyle__SubElement = QStyle__SubElement(1)
	QStyle__SE_CheckBoxIndicator          QStyle__SubElement = QStyle__SubElement(2)
	QStyle__SE_CheckBoxContents           QStyle__SubElement = QStyle__SubElement(3)
	QStyle__SE_CheckBoxFocusRect          QStyle__SubElement = QStyle__SubElement(4)
	QStyle__SE_CheckBoxClickRect          QStyle__SubElement = QStyle__SubElement(5)
	QStyle__SE_RadioButtonIndicator       QStyle__SubElement = QStyle__SubElement(6)
	QStyle__SE_RadioButtonContents        QStyle__SubElement = QStyle__SubElement(7)
	QStyle__SE_RadioButtonFocusRect       QStyle__SubElement = QStyle__SubElement(8)
	QStyle__SE_RadioButtonClickRect       QStyle__SubElement = QStyle__SubElement(9)
	QStyle__SE_ComboBoxFocusRect          QStyle__SubElement = QStyle__SubElement(10)
	QStyle__SE_SliderFocusRect            QStyle__SubElement = QStyle__SubElement(11)
	QStyle__SE_ProgressBarGroove          QStyle__SubElement = QStyle__SubElement(12)
	QStyle__SE_ProgressBarContents        QStyle__SubElement = QStyle__SubElement(13)
	QStyle__SE_ProgressBarLabel           QStyle__SubElement = QStyle__SubElement(14)
	QStyle__SE_ToolBoxTabContents         QStyle__SubElement = QStyle__SubElement(15)
	QStyle__SE_HeaderLabel                QStyle__SubElement = QStyle__SubElement(16)
	QStyle__SE_HeaderArrow                QStyle__SubElement = QStyle__SubElement(17)
	QStyle__SE_TabWidgetTabBar            QStyle__SubElement = QStyle__SubElement(18)
	QStyle__SE_TabWidgetTabPane           QStyle__SubElement = QStyle__SubElement(19)
	QStyle__SE_TabWidgetTabContents       QStyle__SubElement = QStyle__SubElement(20)
	QStyle__SE_TabWidgetLeftCorner        QStyle__SubElement = QStyle__SubElement(21)
	QStyle__SE_TabWidgetRightCorner       QStyle__SubElement = QStyle__SubElement(22)
	QStyle__SE_ViewItemCheckIndicator     QStyle__SubElement = QStyle__SubElement(23)
	QStyle__SE_ItemViewItemCheckIndicator QStyle__SubElement = QStyle__SubElement(QStyle__SE_ViewItemCheckIndicator)
	QStyle__SE_TabBarTearIndicator        QStyle__SubElement = QStyle__SubElement(24)
	QStyle__SE_TabBarTearIndicatorLeft    QStyle__SubElement = QStyle__SubElement(QStyle__SE_TabBarTearIndicator)
	QStyle__SE_TreeViewDisclosureItem     QStyle__SubElement = QStyle__SubElement(25)
	QStyle__SE_LineEditContents           QStyle__SubElement = QStyle__SubElement(26)
	QStyle__SE_FrameContents              QStyle__SubElement = QStyle__SubElement(27)
	QStyle__SE_DockWidgetCloseButton      QStyle__SubElement = QStyle__SubElement(28)
	QStyle__SE_DockWidgetFloatButton      QStyle__SubElement = QStyle__SubElement(29)
	QStyle__SE_DockWidgetTitleBarText     QStyle__SubElement = QStyle__SubElement(30)
	QStyle__SE_DockWidgetIcon             QStyle__SubElement = QStyle__SubElement(31)
	QStyle__SE_CheckBoxLayoutItem         QStyle__SubElement = QStyle__SubElement(32)
	QStyle__SE_ComboBoxLayoutItem         QStyle__SubElement = QStyle__SubElement(33)
	QStyle__SE_DateTimeEditLayoutItem     QStyle__SubElement = QStyle__SubElement(34)
	QStyle__SE_DialogButtonBoxLayoutItem  QStyle__SubElement = QStyle__SubElement(35)
	QStyle__SE_LabelLayoutItem            QStyle__SubElement = QStyle__SubElement(36)
	QStyle__SE_ProgressBarLayoutItem      QStyle__SubElement = QStyle__SubElement(37)
	QStyle__SE_PushButtonLayoutItem       QStyle__SubElement = QStyle__SubElement(38)
	QStyle__SE_RadioButtonLayoutItem      QStyle__SubElement = QStyle__SubElement(39)
	QStyle__SE_SliderLayoutItem           QStyle__SubElement = QStyle__SubElement(40)
	QStyle__SE_SpinBoxLayoutItem          QStyle__SubElement = QStyle__SubElement(41)
	QStyle__SE_ToolButtonLayoutItem       QStyle__SubElement = QStyle__SubElement(42)
	QStyle__SE_FrameLayoutItem            QStyle__SubElement = QStyle__SubElement(43)
	QStyle__SE_GroupBoxLayoutItem         QStyle__SubElement = QStyle__SubElement(44)
	QStyle__SE_TabWidgetLayoutItem        QStyle__SubElement = QStyle__SubElement(45)
	QStyle__SE_ItemViewItemDecoration     QStyle__SubElement = QStyle__SubElement(46)
	QStyle__SE_ItemViewItemText           QStyle__SubElement = QStyle__SubElement(47)
	QStyle__SE_ItemViewItemFocusRect      QStyle__SubElement = QStyle__SubElement(48)
	QStyle__SE_TabBarTabLeftButton        QStyle__SubElement = QStyle__SubElement(49)
	QStyle__SE_TabBarTabRightButton       QStyle__SubElement = QStyle__SubElement(50)
	QStyle__SE_TabBarTabText              QStyle__SubElement = QStyle__SubElement(51)
	QStyle__SE_ShapedFrameContents        QStyle__SubElement = QStyle__SubElement(52)
	QStyle__SE_ToolBarHandle              QStyle__SubElement = QStyle__SubElement(53)
	QStyle__SE_TabBarScrollLeftButton     QStyle__SubElement = QStyle__SubElement(54)
	QStyle__SE_TabBarScrollRightButton    QStyle__SubElement = QStyle__SubElement(55)
	QStyle__SE_TabBarTearIndicatorRight   QStyle__SubElement = QStyle__SubElement(56)
	QStyle__SE_CustomBase                 QStyle__SubElement = QStyle__SubElement(0xf0000000)
)

func QStyle_VisualPos(direction core.Qt__LayoutDirection, boundingRectangle core.QRect_ITF, logicalPosition core.QPoint_ITF) *core.QPoint {
	tmpValue := core.NewQPointFromPointer(C.QStyle_QStyle_VisualPos(C.longlong(direction), core.PointerFromQRect(boundingRectangle), core.PointerFromQPoint(logicalPosition)))
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func (ptr *QStyle) VisualPos(direction core.Qt__LayoutDirection, boundingRectangle core.QRect_ITF, logicalPosition core.QPoint_ITF) *core.QPoint {
	tmpValue := core.NewQPointFromPointer(C.QStyle_QStyle_VisualPos(C.longlong(direction), core.PointerFromQRect(boundingRectangle), core.PointerFromQPoint(logicalPosition)))
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func QStyle_AlignedRect(direction core.Qt__LayoutDirection, alignment core.Qt__AlignmentFlag, size core.QSize_ITF, rectangle core.QRect_ITF) *core.QRect {
	tmpValue := core.NewQRectFromPointer(C.QStyle_QStyle_AlignedRect(C.longlong(direction), C.longlong(alignment), core.PointerFromQSize(size), core.PointerFromQRect(rectangle)))
	runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
	return tmpValue
}

func (ptr *QStyle) AlignedRect(direction core.Qt__LayoutDirection, alignment core.Qt__AlignmentFlag, size core.QSize_ITF, rectangle core.QRect_ITF) *core.QRect {
	tmpValue := core.NewQRectFromPointer(C.QStyle_QStyle_AlignedRect(C.longlong(direction), C.longlong(alignment), core.PointerFromQSize(size), core.PointerFromQRect(rectangle)))
	runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
	return tmpValue
}

func QStyle_VisualRect(direction core.Qt__LayoutDirection, boundingRectangle core.QRect_ITF, logicalRectangle core.QRect_ITF) *core.QRect {
	tmpValue := core.NewQRectFromPointer(C.QStyle_QStyle_VisualRect(C.longlong(direction), core.PointerFromQRect(boundingRectangle), core.PointerFromQRect(logicalRectangle)))
	runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
	return tmpValue
}

func (ptr *QStyle) VisualRect(direction core.Qt__LayoutDirection, boundingRectangle core.QRect_ITF, logicalRectangle core.QRect_ITF) *core.QRect {
	tmpValue := core.NewQRectFromPointer(C.QStyle_QStyle_VisualRect(C.longlong(direction), core.PointerFromQRect(boundingRectangle), core.PointerFromQRect(logicalRectangle)))
	runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
	return tmpValue
}

func QStyle_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QStyle_QStyle_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QStyle) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QStyle_QStyle_Tr(sC, cC, C.int(int32(n))))
}

func NewQStyle() *QStyle {
	tmpValue := NewQStyleFromPointer(C.QStyle_NewQStyle())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QStyle_VisualAlignment(direction core.Qt__LayoutDirection, alignment core.Qt__AlignmentFlag) core.Qt__AlignmentFlag {
	return core.Qt__AlignmentFlag(C.QStyle_QStyle_VisualAlignment(C.longlong(direction), C.longlong(alignment)))
}

func (ptr *QStyle) VisualAlignment(direction core.Qt__LayoutDirection, alignment core.Qt__AlignmentFlag) core.Qt__AlignmentFlag {
	return core.Qt__AlignmentFlag(C.QStyle_QStyle_VisualAlignment(C.longlong(direction), C.longlong(alignment)))
}

func QStyle_SliderPositionFromValue(min int, max int, logicalValue int, span int, upsideDown bool) int {
	return int(int32(C.QStyle_QStyle_SliderPositionFromValue(C.int(int32(min)), C.int(int32(max)), C.int(int32(logicalValue)), C.int(int32(span)), C.char(int8(qt.GoBoolToInt(upsideDown))))))
}

func (ptr *QStyle) SliderPositionFromValue(min int, max int, logicalValue int, span int, upsideDown bool) int {
	return int(int32(C.QStyle_QStyle_SliderPositionFromValue(C.int(int32(min)), C.int(int32(max)), C.int(int32(logicalValue)), C.int(int32(span)), C.char(int8(qt.GoBoolToInt(upsideDown))))))
}

func QStyle_SliderValueFromPosition(min int, max int, position int, span int, upsideDown bool) int {
	return int(int32(C.QStyle_QStyle_SliderValueFromPosition(C.int(int32(min)), C.int(int32(max)), C.int(int32(position)), C.int(int32(span)), C.char(int8(qt.GoBoolToInt(upsideDown))))))
}

func (ptr *QStyle) SliderValueFromPosition(min int, max int, position int, span int, upsideDown bool) int {
	return int(int32(C.QStyle_QStyle_SliderValueFromPosition(C.int(int32(min)), C.int(int32(max)), C.int(int32(position)), C.int(int32(span)), C.char(int8(qt.GoBoolToInt(upsideDown))))))
}

//export callbackQStyle_Polish2
func callbackQStyle_Polish2(ptr unsafe.Pointer, application unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "polish2"); signal != nil {
		(*(*func(*QApplication))(signal))(NewQApplicationFromPointer(application))
	} else {
		NewQStyleFromPointer(ptr).Polish2Default(NewQApplicationFromPointer(application))
	}
}

func (ptr *QStyle) ConnectPolish2(f func(application *QApplication)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "polish2"); signal != nil {
			f := func(application *QApplication) {
				(*(*func(*QApplication))(signal))(application)
				f(application)
			}
			qt.ConnectSignal(ptr.Pointer(), "polish2", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "polish2", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectPolish2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "polish2")
	}
}

func (ptr *QStyle) Polish2(application QApplication_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Polish2(ptr.Pointer(), PointerFromQApplication(application))
	}
}

func (ptr *QStyle) Polish2Default(application QApplication_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Polish2Default(ptr.Pointer(), PointerFromQApplication(application))
	}
}

//export callbackQStyle_Polish3
func callbackQStyle_Polish3(ptr unsafe.Pointer, palette unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "polish3"); signal != nil {
		(*(*func(*gui.QPalette))(signal))(gui.NewQPaletteFromPointer(palette))
	} else {
		NewQStyleFromPointer(ptr).Polish3Default(gui.NewQPaletteFromPointer(palette))
	}
}

func (ptr *QStyle) ConnectPolish3(f func(palette *gui.QPalette)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "polish3"); signal != nil {
			f := func(palette *gui.QPalette) {
				(*(*func(*gui.QPalette))(signal))(palette)
				f(palette)
			}
			qt.ConnectSignal(ptr.Pointer(), "polish3", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "polish3", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectPolish3() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "polish3")
	}
}

func (ptr *QStyle) Polish3(palette gui.QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Polish3(ptr.Pointer(), gui.PointerFromQPalette(palette))
	}
}

func (ptr *QStyle) Polish3Default(palette gui.QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Polish3Default(ptr.Pointer(), gui.PointerFromQPalette(palette))
	}
}

//export callbackQStyle_Polish
func callbackQStyle_Polish(ptr unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "polish"); signal != nil {
		(*(*func(*QWidget))(signal))(NewQWidgetFromPointer(widget))
	} else {
		NewQStyleFromPointer(ptr).PolishDefault(NewQWidgetFromPointer(widget))
	}
}

func (ptr *QStyle) ConnectPolish(f func(widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "polish"); signal != nil {
			f := func(widget *QWidget) {
				(*(*func(*QWidget))(signal))(widget)
				f(widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "polish", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "polish", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectPolish() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "polish")
	}
}

func (ptr *QStyle) Polish(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Polish(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QStyle) PolishDefault(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_PolishDefault(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

//export callbackQStyle_Unpolish2
func callbackQStyle_Unpolish2(ptr unsafe.Pointer, application unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "unpolish2"); signal != nil {
		(*(*func(*QApplication))(signal))(NewQApplicationFromPointer(application))
	} else {
		NewQStyleFromPointer(ptr).Unpolish2Default(NewQApplicationFromPointer(application))
	}
}

func (ptr *QStyle) ConnectUnpolish2(f func(application *QApplication)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "unpolish2"); signal != nil {
			f := func(application *QApplication) {
				(*(*func(*QApplication))(signal))(application)
				f(application)
			}
			qt.ConnectSignal(ptr.Pointer(), "unpolish2", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "unpolish2", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectUnpolish2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "unpolish2")
	}
}

func (ptr *QStyle) Unpolish2(application QApplication_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Unpolish2(ptr.Pointer(), PointerFromQApplication(application))
	}
}

func (ptr *QStyle) Unpolish2Default(application QApplication_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Unpolish2Default(ptr.Pointer(), PointerFromQApplication(application))
	}
}

//export callbackQStyle_Unpolish
func callbackQStyle_Unpolish(ptr unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "unpolish"); signal != nil {
		(*(*func(*QWidget))(signal))(NewQWidgetFromPointer(widget))
	} else {
		NewQStyleFromPointer(ptr).UnpolishDefault(NewQWidgetFromPointer(widget))
	}
}

func (ptr *QStyle) ConnectUnpolish(f func(widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "unpolish"); signal != nil {
			f := func(widget *QWidget) {
				(*(*func(*QWidget))(signal))(widget)
				f(widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "unpolish", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "unpolish", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectUnpolish() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "unpolish")
	}
}

func (ptr *QStyle) Unpolish(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_Unpolish(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QStyle) UnpolishDefault(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_UnpolishDefault(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

//export callbackQStyle_DestroyQStyle
func callbackQStyle_DestroyQStyle(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QStyle"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQStyleFromPointer(ptr).DestroyQStyleDefault()
	}
}

func (ptr *QStyle) ConnectDestroyQStyle(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QStyle"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QStyle", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QStyle", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectDestroyQStyle() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QStyle")
	}
}

func (ptr *QStyle) DestroyQStyle() {
	if ptr.Pointer() != nil {
		C.QStyle_DestroyQStyle(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QStyle) DestroyQStyleDefault() {
	if ptr.Pointer() != nil {
		C.QStyle_DestroyQStyleDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQStyle_StandardIcon
func callbackQStyle_StandardIcon(ptr unsafe.Pointer, standardIcon C.longlong, option unsafe.Pointer, widget unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "standardIcon"); signal != nil {
		return gui.PointerFromQIcon((*(*func(QStyle__StandardPixmap, *QStyleOption, *QWidget) *gui.QIcon)(signal))(QStyle__StandardPixmap(standardIcon), NewQStyleOptionFromPointer(option), NewQWidgetFromPointer(widget)))
	}

	return gui.PointerFromQIcon(gui.NewQIcon())
}

func (ptr *QStyle) ConnectStandardIcon(f func(standardIcon QStyle__StandardPixmap, option *QStyleOption, widget *QWidget) *gui.QIcon) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "standardIcon"); signal != nil {
			f := func(standardIcon QStyle__StandardPixmap, option *QStyleOption, widget *QWidget) *gui.QIcon {
				(*(*func(QStyle__StandardPixmap, *QStyleOption, *QWidget) *gui.QIcon)(signal))(standardIcon, option, widget)
				return f(standardIcon, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "standardIcon", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "standardIcon", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectStandardIcon() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "standardIcon")
	}
}

func (ptr *QStyle) StandardIcon(standardIcon QStyle__StandardPixmap, option QStyleOption_ITF, widget QWidget_ITF) *gui.QIcon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQIconFromPointer(C.QStyle_StandardIcon(ptr.Pointer(), C.longlong(standardIcon), PointerFromQStyleOption(option), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*gui.QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_StandardPalette
func callbackQStyle_StandardPalette(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "standardPalette"); signal != nil {
		return gui.PointerFromQPalette((*(*func() *gui.QPalette)(signal))())
	}

	return gui.PointerFromQPalette(NewQStyleFromPointer(ptr).StandardPaletteDefault())
}

func (ptr *QStyle) ConnectStandardPalette(f func() *gui.QPalette) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "standardPalette"); signal != nil {
			f := func() *gui.QPalette {
				(*(*func() *gui.QPalette)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "standardPalette", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "standardPalette", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectStandardPalette() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "standardPalette")
	}
}

func (ptr *QStyle) StandardPalette() *gui.QPalette {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPaletteFromPointer(C.QStyle_StandardPalette(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) StandardPaletteDefault() *gui.QPalette {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPaletteFromPointer(C.QStyle_StandardPaletteDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_GeneratedIconPixmap
func callbackQStyle_GeneratedIconPixmap(ptr unsafe.Pointer, iconMode C.longlong, pixmap unsafe.Pointer, option unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "generatedIconPixmap"); signal != nil {
		return gui.PointerFromQPixmap((*(*func(gui.QIcon__Mode, *gui.QPixmap, *QStyleOption) *gui.QPixmap)(signal))(gui.QIcon__Mode(iconMode), gui.NewQPixmapFromPointer(pixmap), NewQStyleOptionFromPointer(option)))
	}

	return gui.PointerFromQPixmap(gui.NewQPixmap())
}

func (ptr *QStyle) ConnectGeneratedIconPixmap(f func(iconMode gui.QIcon__Mode, pixmap *gui.QPixmap, option *QStyleOption) *gui.QPixmap) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "generatedIconPixmap"); signal != nil {
			f := func(iconMode gui.QIcon__Mode, pixmap *gui.QPixmap, option *QStyleOption) *gui.QPixmap {
				(*(*func(gui.QIcon__Mode, *gui.QPixmap, *QStyleOption) *gui.QPixmap)(signal))(iconMode, pixmap, option)
				return f(iconMode, pixmap, option)
			}
			qt.ConnectSignal(ptr.Pointer(), "generatedIconPixmap", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "generatedIconPixmap", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectGeneratedIconPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "generatedIconPixmap")
	}
}

func (ptr *QStyle) GeneratedIconPixmap(iconMode gui.QIcon__Mode, pixmap gui.QPixmap_ITF, option QStyleOption_ITF) *gui.QPixmap {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPixmapFromPointer(C.QStyle_GeneratedIconPixmap(ptr.Pointer(), C.longlong(iconMode), gui.PointerFromQPixmap(pixmap), PointerFromQStyleOption(option)))
		runtime.SetFinalizer(tmpValue, (*gui.QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_ItemPixmapRect
func callbackQStyle_ItemPixmapRect(ptr unsafe.Pointer, rectangle unsafe.Pointer, alignment C.int, pixmap unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "itemPixmapRect"); signal != nil {
		return core.PointerFromQRect((*(*func(*core.QRect, int, *gui.QPixmap) *core.QRect)(signal))(core.NewQRectFromPointer(rectangle), int(int32(alignment)), gui.NewQPixmapFromPointer(pixmap)))
	}

	return core.PointerFromQRect(NewQStyleFromPointer(ptr).ItemPixmapRectDefault(core.NewQRectFromPointer(rectangle), int(int32(alignment)), gui.NewQPixmapFromPointer(pixmap)))
}

func (ptr *QStyle) ConnectItemPixmapRect(f func(rectangle *core.QRect, alignment int, pixmap *gui.QPixmap) *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "itemPixmapRect"); signal != nil {
			f := func(rectangle *core.QRect, alignment int, pixmap *gui.QPixmap) *core.QRect {
				(*(*func(*core.QRect, int, *gui.QPixmap) *core.QRect)(signal))(rectangle, alignment, pixmap)
				return f(rectangle, alignment, pixmap)
			}
			qt.ConnectSignal(ptr.Pointer(), "itemPixmapRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "itemPixmapRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectItemPixmapRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "itemPixmapRect")
	}
}

func (ptr *QStyle) ItemPixmapRect(rectangle core.QRect_ITF, alignment int, pixmap gui.QPixmap_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QStyle_ItemPixmapRect(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(alignment)), gui.PointerFromQPixmap(pixmap)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) ItemPixmapRectDefault(rectangle core.QRect_ITF, alignment int, pixmap gui.QPixmap_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QStyle_ItemPixmapRectDefault(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(alignment)), gui.PointerFromQPixmap(pixmap)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_ItemTextRect
func callbackQStyle_ItemTextRect(ptr unsafe.Pointer, metrics unsafe.Pointer, rectangle unsafe.Pointer, alignment C.int, enabled C.char, text C.struct_QtWidgets_PackedString) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "itemTextRect"); signal != nil {
		return core.PointerFromQRect((*(*func(*gui.QFontMetrics, *core.QRect, int, bool, string) *core.QRect)(signal))(gui.NewQFontMetricsFromPointer(metrics), core.NewQRectFromPointer(rectangle), int(int32(alignment)), int8(enabled) != 0, cGoUnpackString(text)))
	}

	return core.PointerFromQRect(NewQStyleFromPointer(ptr).ItemTextRectDefault(gui.NewQFontMetricsFromPointer(metrics), core.NewQRectFromPointer(rectangle), int(int32(alignment)), int8(enabled) != 0, cGoUnpackString(text)))
}

func (ptr *QStyle) ConnectItemTextRect(f func(metrics *gui.QFontMetrics, rectangle *core.QRect, alignment int, enabled bool, text string) *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "itemTextRect"); signal != nil {
			f := func(metrics *gui.QFontMetrics, rectangle *core.QRect, alignment int, enabled bool, text string) *core.QRect {
				(*(*func(*gui.QFontMetrics, *core.QRect, int, bool, string) *core.QRect)(signal))(metrics, rectangle, alignment, enabled, text)
				return f(metrics, rectangle, alignment, enabled, text)
			}
			qt.ConnectSignal(ptr.Pointer(), "itemTextRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "itemTextRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectItemTextRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "itemTextRect")
	}
}

func (ptr *QStyle) ItemTextRect(metrics gui.QFontMetrics_ITF, rectangle core.QRect_ITF, alignment int, enabled bool, text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := core.NewQRectFromPointer(C.QStyle_ItemTextRect(ptr.Pointer(), gui.PointerFromQFontMetrics(metrics), core.PointerFromQRect(rectangle), C.int(int32(alignment)), C.char(int8(qt.GoBoolToInt(enabled))), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) ItemTextRectDefault(metrics gui.QFontMetrics_ITF, rectangle core.QRect_ITF, alignment int, enabled bool, text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		tmpValue := core.NewQRectFromPointer(C.QStyle_ItemTextRectDefault(ptr.Pointer(), gui.PointerFromQFontMetrics(metrics), core.PointerFromQRect(rectangle), C.int(int32(alignment)), C.char(int8(qt.GoBoolToInt(enabled))), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_SubControlRect
func callbackQStyle_SubControlRect(ptr unsafe.Pointer, control C.longlong, option unsafe.Pointer, subControl C.longlong, widget unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "subControlRect"); signal != nil {
		return core.PointerFromQRect((*(*func(QStyle__ComplexControl, *QStyleOptionComplex, QStyle__SubControl, *QWidget) *core.QRect)(signal))(QStyle__ComplexControl(control), NewQStyleOptionComplexFromPointer(option), QStyle__SubControl(subControl), NewQWidgetFromPointer(widget)))
	}

	return core.PointerFromQRect(core.NewQRect())
}

func (ptr *QStyle) ConnectSubControlRect(f func(control QStyle__ComplexControl, option *QStyleOptionComplex, subControl QStyle__SubControl, widget *QWidget) *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "subControlRect"); signal != nil {
			f := func(control QStyle__ComplexControl, option *QStyleOptionComplex, subControl QStyle__SubControl, widget *QWidget) *core.QRect {
				(*(*func(QStyle__ComplexControl, *QStyleOptionComplex, QStyle__SubControl, *QWidget) *core.QRect)(signal))(control, option, subControl, widget)
				return f(control, option, subControl, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "subControlRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "subControlRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectSubControlRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "subControlRect")
	}
}

func (ptr *QStyle) SubControlRect(control QStyle__ComplexControl, option QStyleOptionComplex_ITF, subControl QStyle__SubControl, widget QWidget_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QStyle_SubControlRect(ptr.Pointer(), C.longlong(control), PointerFromQStyleOptionComplex(option), C.longlong(subControl), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_SubElementRect
func callbackQStyle_SubElementRect(ptr unsafe.Pointer, element C.longlong, option unsafe.Pointer, widget unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "subElementRect"); signal != nil {
		return core.PointerFromQRect((*(*func(QStyle__SubElement, *QStyleOption, *QWidget) *core.QRect)(signal))(QStyle__SubElement(element), NewQStyleOptionFromPointer(option), NewQWidgetFromPointer(widget)))
	}

	return core.PointerFromQRect(core.NewQRect())
}

func (ptr *QStyle) ConnectSubElementRect(f func(element QStyle__SubElement, option *QStyleOption, widget *QWidget) *core.QRect) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "subElementRect"); signal != nil {
			f := func(element QStyle__SubElement, option *QStyleOption, widget *QWidget) *core.QRect {
				(*(*func(QStyle__SubElement, *QStyleOption, *QWidget) *core.QRect)(signal))(element, option, widget)
				return f(element, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "subElementRect", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "subElementRect", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectSubElementRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "subElementRect")
	}
}

func (ptr *QStyle) SubElementRect(element QStyle__SubElement, option QStyleOption_ITF, widget QWidget_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QStyle_SubElementRect(ptr.Pointer(), C.longlong(element), PointerFromQStyleOption(option), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_SizeFromContents
func callbackQStyle_SizeFromContents(ptr unsafe.Pointer, ty C.longlong, option unsafe.Pointer, contentsSize unsafe.Pointer, widget unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeFromContents"); signal != nil {
		return core.PointerFromQSize((*(*func(QStyle__ContentsType, *QStyleOption, *core.QSize, *QWidget) *core.QSize)(signal))(QStyle__ContentsType(ty), NewQStyleOptionFromPointer(option), core.NewQSizeFromPointer(contentsSize), NewQWidgetFromPointer(widget)))
	}

	return core.PointerFromQSize(core.NewQSize())
}

func (ptr *QStyle) ConnectSizeFromContents(f func(ty QStyle__ContentsType, option *QStyleOption, contentsSize *core.QSize, widget *QWidget) *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sizeFromContents"); signal != nil {
			f := func(ty QStyle__ContentsType, option *QStyleOption, contentsSize *core.QSize, widget *QWidget) *core.QSize {
				(*(*func(QStyle__ContentsType, *QStyleOption, *core.QSize, *QWidget) *core.QSize)(signal))(ty, option, contentsSize, widget)
				return f(ty, option, contentsSize, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "sizeFromContents", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sizeFromContents", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectSizeFromContents() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sizeFromContents")
	}
}

func (ptr *QStyle) SizeFromContents(ty QStyle__ContentsType, option QStyleOption_ITF, contentsSize core.QSize_ITF, widget QWidget_ITF) *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QStyle_SizeFromContents(ptr.Pointer(), C.longlong(ty), PointerFromQStyleOption(option), core.PointerFromQSize(contentsSize), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQStyle_HitTestComplexControl
func callbackQStyle_HitTestComplexControl(ptr unsafe.Pointer, control C.longlong, option unsafe.Pointer, position unsafe.Pointer, widget unsafe.Pointer) C.longlong {
	if signal := qt.GetSignal(ptr, "hitTestComplexControl"); signal != nil {
		return C.longlong((*(*func(QStyle__ComplexControl, *QStyleOptionComplex, *core.QPoint, *QWidget) QStyle__SubControl)(signal))(QStyle__ComplexControl(control), NewQStyleOptionComplexFromPointer(option), core.NewQPointFromPointer(position), NewQWidgetFromPointer(widget)))
	}

	return C.longlong(0)
}

func (ptr *QStyle) ConnectHitTestComplexControl(f func(control QStyle__ComplexControl, option *QStyleOptionComplex, position *core.QPoint, widget *QWidget) QStyle__SubControl) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hitTestComplexControl"); signal != nil {
			f := func(control QStyle__ComplexControl, option *QStyleOptionComplex, position *core.QPoint, widget *QWidget) QStyle__SubControl {
				(*(*func(QStyle__ComplexControl, *QStyleOptionComplex, *core.QPoint, *QWidget) QStyle__SubControl)(signal))(control, option, position, widget)
				return f(control, option, position, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "hitTestComplexControl", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hitTestComplexControl", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectHitTestComplexControl() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hitTestComplexControl")
	}
}

func (ptr *QStyle) HitTestComplexControl(control QStyle__ComplexControl, option QStyleOptionComplex_ITF, position core.QPoint_ITF, widget QWidget_ITF) QStyle__SubControl {
	if ptr.Pointer() != nil {
		return QStyle__SubControl(C.QStyle_HitTestComplexControl(ptr.Pointer(), C.longlong(control), PointerFromQStyleOptionComplex(option), core.PointerFromQPoint(position), PointerFromQWidget(widget)))
	}
	return 0
}

//export callbackQStyle_MetaObject
func callbackQStyle_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQStyleFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStyle) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStyle_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStyle) Proxy() *QStyle {
	if ptr.Pointer() != nil {
		tmpValue := NewQStyleFromPointer(C.QStyle_Proxy(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) CombinedLayoutSpacing(controls1 QSizePolicy__ControlType, controls2 QSizePolicy__ControlType, orientation core.Qt__Orientation, option QStyleOption_ITF, widget QWidget_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyle_CombinedLayoutSpacing(ptr.Pointer(), C.longlong(controls1), C.longlong(controls2), C.longlong(orientation), PointerFromQStyleOption(option), PointerFromQWidget(widget))))
	}
	return 0
}

//export callbackQStyle_LayoutSpacing
func callbackQStyle_LayoutSpacing(ptr unsafe.Pointer, control1 C.longlong, control2 C.longlong, orientation C.longlong, option unsafe.Pointer, widget unsafe.Pointer) C.int {
	if signal := qt.GetSignal(ptr, "layoutSpacing"); signal != nil {
		return C.int(int32((*(*func(QSizePolicy__ControlType, QSizePolicy__ControlType, core.Qt__Orientation, *QStyleOption, *QWidget) int)(signal))(QSizePolicy__ControlType(control1), QSizePolicy__ControlType(control2), core.Qt__Orientation(orientation), NewQStyleOptionFromPointer(option), NewQWidgetFromPointer(widget))))
	}

	return C.int(int32(0))
}

func (ptr *QStyle) ConnectLayoutSpacing(f func(control1 QSizePolicy__ControlType, control2 QSizePolicy__ControlType, orientation core.Qt__Orientation, option *QStyleOption, widget *QWidget) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "layoutSpacing"); signal != nil {
			f := func(control1 QSizePolicy__ControlType, control2 QSizePolicy__ControlType, orientation core.Qt__Orientation, option *QStyleOption, widget *QWidget) int {
				(*(*func(QSizePolicy__ControlType, QSizePolicy__ControlType, core.Qt__Orientation, *QStyleOption, *QWidget) int)(signal))(control1, control2, orientation, option, widget)
				return f(control1, control2, orientation, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "layoutSpacing", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "layoutSpacing", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectLayoutSpacing() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "layoutSpacing")
	}
}

func (ptr *QStyle) LayoutSpacing(control1 QSizePolicy__ControlType, control2 QSizePolicy__ControlType, orientation core.Qt__Orientation, option QStyleOption_ITF, widget QWidget_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyle_LayoutSpacing(ptr.Pointer(), C.longlong(control1), C.longlong(control2), C.longlong(orientation), PointerFromQStyleOption(option), PointerFromQWidget(widget))))
	}
	return 0
}

//export callbackQStyle_PixelMetric
func callbackQStyle_PixelMetric(ptr unsafe.Pointer, metric C.longlong, option unsafe.Pointer, widget unsafe.Pointer) C.int {
	if signal := qt.GetSignal(ptr, "pixelMetric"); signal != nil {
		return C.int(int32((*(*func(QStyle__PixelMetric, *QStyleOption, *QWidget) int)(signal))(QStyle__PixelMetric(metric), NewQStyleOptionFromPointer(option), NewQWidgetFromPointer(widget))))
	}

	return C.int(int32(0))
}

func (ptr *QStyle) ConnectPixelMetric(f func(metric QStyle__PixelMetric, option *QStyleOption, widget *QWidget) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "pixelMetric"); signal != nil {
			f := func(metric QStyle__PixelMetric, option *QStyleOption, widget *QWidget) int {
				(*(*func(QStyle__PixelMetric, *QStyleOption, *QWidget) int)(signal))(metric, option, widget)
				return f(metric, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "pixelMetric", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "pixelMetric", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectPixelMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "pixelMetric")
	}
}

func (ptr *QStyle) PixelMetric(metric QStyle__PixelMetric, option QStyleOption_ITF, widget QWidget_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyle_PixelMetric(ptr.Pointer(), C.longlong(metric), PointerFromQStyleOption(option), PointerFromQWidget(widget))))
	}
	return 0
}

//export callbackQStyle_StyleHint
func callbackQStyle_StyleHint(ptr unsafe.Pointer, hint C.longlong, option unsafe.Pointer, widget unsafe.Pointer, returnData unsafe.Pointer) C.int {
	if signal := qt.GetSignal(ptr, "styleHint"); signal != nil {
		return C.int(int32((*(*func(QStyle__StyleHint, *QStyleOption, *QWidget, *QStyleHintReturn) int)(signal))(QStyle__StyleHint(hint), NewQStyleOptionFromPointer(option), NewQWidgetFromPointer(widget), NewQStyleHintReturnFromPointer(returnData))))
	}

	return C.int(int32(0))
}

func (ptr *QStyle) ConnectStyleHint(f func(hint QStyle__StyleHint, option *QStyleOption, widget *QWidget, returnData *QStyleHintReturn) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "styleHint"); signal != nil {
			f := func(hint QStyle__StyleHint, option *QStyleOption, widget *QWidget, returnData *QStyleHintReturn) int {
				(*(*func(QStyle__StyleHint, *QStyleOption, *QWidget, *QStyleHintReturn) int)(signal))(hint, option, widget, returnData)
				return f(hint, option, widget, returnData)
			}
			qt.ConnectSignal(ptr.Pointer(), "styleHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "styleHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectStyleHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "styleHint")
	}
}

func (ptr *QStyle) StyleHint(hint QStyle__StyleHint, option QStyleOption_ITF, widget QWidget_ITF, returnData QStyleHintReturn_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyle_StyleHint(ptr.Pointer(), C.longlong(hint), PointerFromQStyleOption(option), PointerFromQWidget(widget), PointerFromQStyleHintReturn(returnData))))
	}
	return 0
}

//export callbackQStyle_DrawComplexControl
func callbackQStyle_DrawComplexControl(ptr unsafe.Pointer, control C.longlong, option unsafe.Pointer, painter unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawComplexControl"); signal != nil {
		(*(*func(QStyle__ComplexControl, *QStyleOptionComplex, *gui.QPainter, *QWidget))(signal))(QStyle__ComplexControl(control), NewQStyleOptionComplexFromPointer(option), gui.NewQPainterFromPointer(painter), NewQWidgetFromPointer(widget))
	}

}

func (ptr *QStyle) ConnectDrawComplexControl(f func(control QStyle__ComplexControl, option *QStyleOptionComplex, painter *gui.QPainter, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawComplexControl"); signal != nil {
			f := func(control QStyle__ComplexControl, option *QStyleOptionComplex, painter *gui.QPainter, widget *QWidget) {
				(*(*func(QStyle__ComplexControl, *QStyleOptionComplex, *gui.QPainter, *QWidget))(signal))(control, option, painter, widget)
				f(control, option, painter, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawComplexControl", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawComplexControl", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectDrawComplexControl() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawComplexControl")
	}
}

func (ptr *QStyle) DrawComplexControl(control QStyle__ComplexControl, option QStyleOptionComplex_ITF, painter gui.QPainter_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_DrawComplexControl(ptr.Pointer(), C.longlong(control), PointerFromQStyleOptionComplex(option), gui.PointerFromQPainter(painter), PointerFromQWidget(widget))
	}
}

//export callbackQStyle_DrawControl
func callbackQStyle_DrawControl(ptr unsafe.Pointer, element C.longlong, option unsafe.Pointer, painter unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawControl"); signal != nil {
		(*(*func(QStyle__ControlElement, *QStyleOption, *gui.QPainter, *QWidget))(signal))(QStyle__ControlElement(element), NewQStyleOptionFromPointer(option), gui.NewQPainterFromPointer(painter), NewQWidgetFromPointer(widget))
	}

}

func (ptr *QStyle) ConnectDrawControl(f func(element QStyle__ControlElement, option *QStyleOption, painter *gui.QPainter, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawControl"); signal != nil {
			f := func(element QStyle__ControlElement, option *QStyleOption, painter *gui.QPainter, widget *QWidget) {
				(*(*func(QStyle__ControlElement, *QStyleOption, *gui.QPainter, *QWidget))(signal))(element, option, painter, widget)
				f(element, option, painter, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawControl", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawControl", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectDrawControl() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawControl")
	}
}

func (ptr *QStyle) DrawControl(element QStyle__ControlElement, option QStyleOption_ITF, painter gui.QPainter_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_DrawControl(ptr.Pointer(), C.longlong(element), PointerFromQStyleOption(option), gui.PointerFromQPainter(painter), PointerFromQWidget(widget))
	}
}

//export callbackQStyle_DrawItemPixmap
func callbackQStyle_DrawItemPixmap(ptr unsafe.Pointer, painter unsafe.Pointer, rectangle unsafe.Pointer, alignment C.int, pixmap unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawItemPixmap"); signal != nil {
		(*(*func(*gui.QPainter, *core.QRect, int, *gui.QPixmap))(signal))(gui.NewQPainterFromPointer(painter), core.NewQRectFromPointer(rectangle), int(int32(alignment)), gui.NewQPixmapFromPointer(pixmap))
	} else {
		NewQStyleFromPointer(ptr).DrawItemPixmapDefault(gui.NewQPainterFromPointer(painter), core.NewQRectFromPointer(rectangle), int(int32(alignment)), gui.NewQPixmapFromPointer(pixmap))
	}
}

func (ptr *QStyle) ConnectDrawItemPixmap(f func(painter *gui.QPainter, rectangle *core.QRect, alignment int, pixmap *gui.QPixmap)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawItemPixmap"); signal != nil {
			f := func(painter *gui.QPainter, rectangle *core.QRect, alignment int, pixmap *gui.QPixmap) {
				(*(*func(*gui.QPainter, *core.QRect, int, *gui.QPixmap))(signal))(painter, rectangle, alignment, pixmap)
				f(painter, rectangle, alignment, pixmap)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawItemPixmap", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawItemPixmap", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectDrawItemPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawItemPixmap")
	}
}

func (ptr *QStyle) DrawItemPixmap(painter gui.QPainter_ITF, rectangle core.QRect_ITF, alignment int, pixmap gui.QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_DrawItemPixmap(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRect(rectangle), C.int(int32(alignment)), gui.PointerFromQPixmap(pixmap))
	}
}

func (ptr *QStyle) DrawItemPixmapDefault(painter gui.QPainter_ITF, rectangle core.QRect_ITF, alignment int, pixmap gui.QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_DrawItemPixmapDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRect(rectangle), C.int(int32(alignment)), gui.PointerFromQPixmap(pixmap))
	}
}

//export callbackQStyle_DrawItemText
func callbackQStyle_DrawItemText(ptr unsafe.Pointer, painter unsafe.Pointer, rectangle unsafe.Pointer, alignment C.int, palette unsafe.Pointer, enabled C.char, text C.struct_QtWidgets_PackedString, textRole C.longlong) {
	if signal := qt.GetSignal(ptr, "drawItemText"); signal != nil {
		(*(*func(*gui.QPainter, *core.QRect, int, *gui.QPalette, bool, string, gui.QPalette__ColorRole))(signal))(gui.NewQPainterFromPointer(painter), core.NewQRectFromPointer(rectangle), int(int32(alignment)), gui.NewQPaletteFromPointer(palette), int8(enabled) != 0, cGoUnpackString(text), gui.QPalette__ColorRole(textRole))
	} else {
		NewQStyleFromPointer(ptr).DrawItemTextDefault(gui.NewQPainterFromPointer(painter), core.NewQRectFromPointer(rectangle), int(int32(alignment)), gui.NewQPaletteFromPointer(palette), int8(enabled) != 0, cGoUnpackString(text), gui.QPalette__ColorRole(textRole))
	}
}

func (ptr *QStyle) ConnectDrawItemText(f func(painter *gui.QPainter, rectangle *core.QRect, alignment int, palette *gui.QPalette, enabled bool, text string, textRole gui.QPalette__ColorRole)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawItemText"); signal != nil {
			f := func(painter *gui.QPainter, rectangle *core.QRect, alignment int, palette *gui.QPalette, enabled bool, text string, textRole gui.QPalette__ColorRole) {
				(*(*func(*gui.QPainter, *core.QRect, int, *gui.QPalette, bool, string, gui.QPalette__ColorRole))(signal))(painter, rectangle, alignment, palette, enabled, text, textRole)
				f(painter, rectangle, alignment, palette, enabled, text, textRole)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawItemText", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawItemText", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectDrawItemText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawItemText")
	}
}

func (ptr *QStyle) DrawItemText(painter gui.QPainter_ITF, rectangle core.QRect_ITF, alignment int, palette gui.QPalette_ITF, enabled bool, text string, textRole gui.QPalette__ColorRole) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QStyle_DrawItemText(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRect(rectangle), C.int(int32(alignment)), gui.PointerFromQPalette(palette), C.char(int8(qt.GoBoolToInt(enabled))), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, C.longlong(textRole))
	}
}

func (ptr *QStyle) DrawItemTextDefault(painter gui.QPainter_ITF, rectangle core.QRect_ITF, alignment int, palette gui.QPalette_ITF, enabled bool, text string, textRole gui.QPalette__ColorRole) {
	if ptr.Pointer() != nil {
		var textC *C.char
		if text != "" {
			textC = C.CString(text)
			defer C.free(unsafe.Pointer(textC))
		}
		C.QStyle_DrawItemTextDefault(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQRect(rectangle), C.int(int32(alignment)), gui.PointerFromQPalette(palette), C.char(int8(qt.GoBoolToInt(enabled))), C.struct_QtWidgets_PackedString{data: textC, len: C.longlong(len(text))}, C.longlong(textRole))
	}
}

//export callbackQStyle_DrawPrimitive
func callbackQStyle_DrawPrimitive(ptr unsafe.Pointer, element C.longlong, option unsafe.Pointer, painter unsafe.Pointer, widget unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "drawPrimitive"); signal != nil {
		(*(*func(QStyle__PrimitiveElement, *QStyleOption, *gui.QPainter, *QWidget))(signal))(QStyle__PrimitiveElement(element), NewQStyleOptionFromPointer(option), gui.NewQPainterFromPointer(painter), NewQWidgetFromPointer(widget))
	}

}

func (ptr *QStyle) ConnectDrawPrimitive(f func(element QStyle__PrimitiveElement, option *QStyleOption, painter *gui.QPainter, widget *QWidget)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "drawPrimitive"); signal != nil {
			f := func(element QStyle__PrimitiveElement, option *QStyleOption, painter *gui.QPainter, widget *QWidget) {
				(*(*func(QStyle__PrimitiveElement, *QStyleOption, *gui.QPainter, *QWidget))(signal))(element, option, painter, widget)
				f(element, option, painter, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "drawPrimitive", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "drawPrimitive", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectDrawPrimitive() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "drawPrimitive")
	}
}

func (ptr *QStyle) DrawPrimitive(element QStyle__PrimitiveElement, option QStyleOption_ITF, painter gui.QPainter_ITF, widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_DrawPrimitive(ptr.Pointer(), C.longlong(element), PointerFromQStyleOption(option), gui.PointerFromQPainter(painter), PointerFromQWidget(widget))
	}
}

//export callbackQStyle_StandardPixmap
func callbackQStyle_StandardPixmap(ptr unsafe.Pointer, standardIcon C.longlong, option unsafe.Pointer, widget unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "standardPixmap"); signal != nil {
		return gui.PointerFromQPixmap((*(*func(QStyle__StandardPixmap, *QStyleOption, *QWidget) *gui.QPixmap)(signal))(QStyle__StandardPixmap(standardIcon), NewQStyleOptionFromPointer(option), NewQWidgetFromPointer(widget)))
	}

	return gui.PointerFromQPixmap(gui.NewQPixmap())
}

func (ptr *QStyle) ConnectStandardPixmap(f func(standardIcon QStyle__StandardPixmap, option *QStyleOption, widget *QWidget) *gui.QPixmap) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "standardPixmap"); signal != nil {
			f := func(standardIcon QStyle__StandardPixmap, option *QStyleOption, widget *QWidget) *gui.QPixmap {
				(*(*func(QStyle__StandardPixmap, *QStyleOption, *QWidget) *gui.QPixmap)(signal))(standardIcon, option, widget)
				return f(standardIcon, option, widget)
			}
			qt.ConnectSignal(ptr.Pointer(), "standardPixmap", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "standardPixmap", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QStyle) DisconnectStandardPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "standardPixmap")
	}
}

func (ptr *QStyle) StandardPixmap(standardIcon QStyle__StandardPixmap, option QStyleOption_ITF, widget QWidget_ITF) *gui.QPixmap {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPixmapFromPointer(C.QStyle_StandardPixmap(ptr.Pointer(), C.longlong(standardIcon), PointerFromQStyleOption(option), PointerFromQWidget(widget)))
		runtime.SetFinalizer(tmpValue, (*gui.QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QStyle___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QStyle) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QStyle___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QStyle) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QStyle___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyle) __findChildren_newList2() unsafe.Pointer {
	return C.QStyle___findChildren_newList2(ptr.Pointer())
}

func (ptr *QStyle) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QStyle___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyle) __findChildren_newList3() unsafe.Pointer {
	return C.QStyle___findChildren_newList3(ptr.Pointer())
}

func (ptr *QStyle) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QStyle___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyle) __findChildren_newList() unsafe.Pointer {
	return C.QStyle___findChildren_newList(ptr.Pointer())
}

func (ptr *QStyle) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QStyle___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyle) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QStyle) __children_newList() unsafe.Pointer {
	return C.QStyle___children_newList(ptr.Pointer())
}

//export callbackQStyle_Event
func callbackQStyle_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStyleFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QStyle) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QStyle_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e))) != 0
	}
	return false
}

//export callbackQStyle_EventFilter
func callbackQStyle_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStyleFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QStyle) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QStyle_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQStyle_ChildEvent
func callbackQStyle_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQStyleFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QStyle) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQStyle_ConnectNotify
func callbackQStyle_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyle) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyle_CustomEvent
func callbackQStyle_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQStyleFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QStyle) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQStyle_DeleteLater
func callbackQStyle_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQStyleFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QStyle) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QStyle_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQStyle_Destroyed
func callbackQStyle_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQStyle_DisconnectNotify
func callbackQStyle_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyle) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyle_ObjectNameChanged
func callbackQStyle_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQStyle_TimerEvent
func callbackQStyle_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQStyleFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStyle) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyle_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//go:generate stringer -type=QStyleHelper__WidgetSizePolicy
//QStyleHelper::WidgetSizePolicy
type QStyleHelper__WidgetSizePolicy int64

const (
	QStyleHelper__SizeLarge   QStyleHelper__WidgetSizePolicy = QStyleHelper__WidgetSizePolicy(0)
	QStyleHelper__SizeSmall   QStyleHelper__WidgetSizePolicy = QStyleHelper__WidgetSizePolicy(1)
	QStyleHelper__SizeMini    QStyleHelper__WidgetSizePolicy = QStyleHelper__WidgetSizePolicy(2)
	QStyleHelper__SizeDefault QStyleHelper__WidgetSizePolicy = QStyleHelper__WidgetSizePolicy(-1)
)

type QStyleHintReturn struct {
	ptr unsafe.Pointer
}

type QStyleHintReturn_ITF interface {
	QStyleHintReturn_PTR() *QStyleHintReturn
}

func (ptr *QStyleHintReturn) QStyleHintReturn_PTR() *QStyleHintReturn {
	return ptr
}

func (ptr *QStyleHintReturn) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QStyleHintReturn) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQStyleHintReturn(ptr QStyleHintReturn_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleHintReturn_PTR().Pointer()
	}
	return nil
}

func NewQStyleHintReturnFromPointer(ptr unsafe.Pointer) (n *QStyleHintReturn) {
	n = new(QStyleHintReturn)
	n.SetPointer(ptr)
	return
}

func (ptr *QStyleHintReturn) DestroyQStyleHintReturn() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//go:generate stringer -type=QStyleHintReturn__HintReturnType
//QStyleHintReturn::HintReturnType
type QStyleHintReturn__HintReturnType int64

const (
	QStyleHintReturn__SH_Default QStyleHintReturn__HintReturnType = QStyleHintReturn__HintReturnType(0xf000)
	QStyleHintReturn__SH_Mask    QStyleHintReturn__HintReturnType = QStyleHintReturn__HintReturnType(0xf001)
	QStyleHintReturn__SH_Variant QStyleHintReturn__HintReturnType = QStyleHintReturn__HintReturnType(0xf002)
)

//go:generate stringer -type=QStyleHintReturn__StyleOptionType
//QStyleHintReturn::StyleOptionType
type QStyleHintReturn__StyleOptionType int64

var (
	QStyleHintReturn__Type QStyleHintReturn__StyleOptionType = QStyleHintReturn__StyleOptionType(QStyleHintReturn__SH_Default)
)

//go:generate stringer -type=QStyleHintReturn__StyleOptionVersion
//QStyleHintReturn::StyleOptionVersion
type QStyleHintReturn__StyleOptionVersion int64

var (
	QStyleHintReturn__Version QStyleHintReturn__StyleOptionVersion = QStyleHintReturn__StyleOptionVersion(1)
)

func NewQStyleHintReturn(version int, ty int) *QStyleHintReturn {
	tmpValue := NewQStyleHintReturnFromPointer(C.QStyleHintReturn_NewQStyleHintReturn(C.int(int32(version)), C.int(int32(ty))))
	runtime.SetFinalizer(tmpValue, (*QStyleHintReturn).DestroyQStyleHintReturn)
	return tmpValue
}

func (ptr *QStyleHintReturn) Type() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHintReturn_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHintReturn) SetType(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleHintReturn_SetType(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleHintReturn) Version() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHintReturn_Version(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHintReturn) SetVersion(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleHintReturn_SetVersion(ptr.Pointer(), C.int(int32(vin)))
	}
}

//go:generate stringer -type=QStyleHintReturnMask__StyleOptionType
//QStyleHintReturnMask::StyleOptionType
type QStyleHintReturnMask__StyleOptionType int64

var (
	QStyleHintReturnMask__Type QStyleHintReturnMask__StyleOptionType = QStyleHintReturnMask__StyleOptionType(QStyleHintReturn__SH_Mask)
)

//go:generate stringer -type=QStyleHintReturnMask__StyleOptionVersion
//QStyleHintReturnMask::StyleOptionVersion
type QStyleHintReturnMask__StyleOptionVersion int64

var (
	QStyleHintReturnMask__Version QStyleHintReturnMask__StyleOptionVersion = QStyleHintReturnMask__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleHintReturnVariant__StyleOptionType
//QStyleHintReturnVariant::StyleOptionType
type QStyleHintReturnVariant__StyleOptionType int64

var (
	QStyleHintReturnVariant__Type QStyleHintReturnVariant__StyleOptionType = QStyleHintReturnVariant__StyleOptionType(QStyleHintReturn__SH_Variant)
)

//go:generate stringer -type=QStyleHintReturnVariant__StyleOptionVersion
//QStyleHintReturnVariant::StyleOptionVersion
type QStyleHintReturnVariant__StyleOptionVersion int64

var (
	QStyleHintReturnVariant__Version QStyleHintReturnVariant__StyleOptionVersion = QStyleHintReturnVariant__StyleOptionVersion(1)
)

type QStyleOption struct {
	ptr unsafe.Pointer
}

type QStyleOption_ITF interface {
	QStyleOption_PTR() *QStyleOption
}

func (ptr *QStyleOption) QStyleOption_PTR() *QStyleOption {
	return ptr
}

func (ptr *QStyleOption) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.ptr
	}
	return nil
}

func (ptr *QStyleOption) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.ptr = p
	}
}

func PointerFromQStyleOption(ptr QStyleOption_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOption_PTR().Pointer()
	}
	return nil
}

func NewQStyleOptionFromPointer(ptr unsafe.Pointer) (n *QStyleOption) {
	n = new(QStyleOption)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QStyleOption__OptionType
//QStyleOption::OptionType
type QStyleOption__OptionType int64

const (
	QStyleOption__SO_Default           QStyleOption__OptionType = QStyleOption__OptionType(0)
	QStyleOption__SO_FocusRect         QStyleOption__OptionType = QStyleOption__OptionType(1)
	QStyleOption__SO_Button            QStyleOption__OptionType = QStyleOption__OptionType(2)
	QStyleOption__SO_Tab               QStyleOption__OptionType = QStyleOption__OptionType(3)
	QStyleOption__SO_MenuItem          QStyleOption__OptionType = QStyleOption__OptionType(4)
	QStyleOption__SO_Frame             QStyleOption__OptionType = QStyleOption__OptionType(5)
	QStyleOption__SO_ProgressBar       QStyleOption__OptionType = QStyleOption__OptionType(6)
	QStyleOption__SO_ToolBox           QStyleOption__OptionType = QStyleOption__OptionType(7)
	QStyleOption__SO_Header            QStyleOption__OptionType = QStyleOption__OptionType(8)
	QStyleOption__SO_DockWidget        QStyleOption__OptionType = QStyleOption__OptionType(9)
	QStyleOption__SO_ViewItem          QStyleOption__OptionType = QStyleOption__OptionType(10)
	QStyleOption__SO_TabWidgetFrame    QStyleOption__OptionType = QStyleOption__OptionType(11)
	QStyleOption__SO_TabBarBase        QStyleOption__OptionType = QStyleOption__OptionType(12)
	QStyleOption__SO_RubberBand        QStyleOption__OptionType = QStyleOption__OptionType(13)
	QStyleOption__SO_ToolBar           QStyleOption__OptionType = QStyleOption__OptionType(14)
	QStyleOption__SO_GraphicsItem      QStyleOption__OptionType = QStyleOption__OptionType(15)
	QStyleOption__SO_Complex           QStyleOption__OptionType = QStyleOption__OptionType(0xf0000)
	QStyleOption__SO_Slider            QStyleOption__OptionType = QStyleOption__OptionType(0xf0001)
	QStyleOption__SO_SpinBox           QStyleOption__OptionType = QStyleOption__OptionType(0xf0002)
	QStyleOption__SO_ToolButton        QStyleOption__OptionType = QStyleOption__OptionType(0xf0003)
	QStyleOption__SO_ComboBox          QStyleOption__OptionType = QStyleOption__OptionType(0xf0004)
	QStyleOption__SO_TitleBar          QStyleOption__OptionType = QStyleOption__OptionType(0xf0005)
	QStyleOption__SO_GroupBox          QStyleOption__OptionType = QStyleOption__OptionType(0xf0006)
	QStyleOption__SO_SizeGrip          QStyleOption__OptionType = QStyleOption__OptionType(0xf0007)
	QStyleOption__SO_CustomBase        QStyleOption__OptionType = QStyleOption__OptionType(0xf00)
	QStyleOption__SO_ComplexCustomBase QStyleOption__OptionType = QStyleOption__OptionType(0xf000000)
)

//go:generate stringer -type=QStyleOption__StyleOptionType
//QStyleOption::StyleOptionType
type QStyleOption__StyleOptionType int64

var (
	QStyleOption__Type QStyleOption__StyleOptionType = QStyleOption__StyleOptionType(QStyleOption__SO_Default)
)

//go:generate stringer -type=QStyleOption__StyleOptionVersion
//QStyleOption::StyleOptionVersion
type QStyleOption__StyleOptionVersion int64

var (
	QStyleOption__Version QStyleOption__StyleOptionVersion = QStyleOption__StyleOptionVersion(1)
)

func NewQStyleOption2(other QStyleOption_ITF) *QStyleOption {
	tmpValue := NewQStyleOptionFromPointer(C.QStyleOption_NewQStyleOption2(PointerFromQStyleOption(other)))
	runtime.SetFinalizer(tmpValue, (*QStyleOption).DestroyQStyleOption)
	return tmpValue
}

func NewQStyleOption(version int, ty int) *QStyleOption {
	tmpValue := NewQStyleOptionFromPointer(C.QStyleOption_NewQStyleOption(C.int(int32(version)), C.int(int32(ty))))
	runtime.SetFinalizer(tmpValue, (*QStyleOption).DestroyQStyleOption)
	return tmpValue
}

func (ptr *QStyleOption) InitFrom(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOption_InitFrom(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

func (ptr *QStyleOption) DestroyQStyleOption() {
	if ptr.Pointer() != nil {
		C.QStyleOption_DestroyQStyleOption(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QStyleOption) Direction() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QStyleOption_Direction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOption) SetDirection(vqt core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetDirection(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QStyleOption) FontMetrics() *gui.QFontMetrics {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontMetricsFromPointer(C.QStyleOption_FontMetrics(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFontMetrics).DestroyQFontMetrics)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOption) SetFontMetrics(vqf gui.QFontMetrics_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetFontMetrics(ptr.Pointer(), gui.PointerFromQFontMetrics(vqf))
	}
}

func (ptr *QStyleOption) Palette() *gui.QPalette {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPaletteFromPointer(C.QStyleOption_Palette(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOption) SetPalette(vqp gui.QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetPalette(ptr.Pointer(), gui.PointerFromQPalette(vqp))
	}
}

func (ptr *QStyleOption) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QStyleOption_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOption) SetRect(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetRect(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

func (ptr *QStyleOption) State() QStyle__StateFlag {
	if ptr.Pointer() != nil {
		return QStyle__StateFlag(C.QStyleOption_State(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOption) SetState(vqs QStyle__StateFlag) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetState(ptr.Pointer(), C.longlong(vqs))
	}
}

func (ptr *QStyleOption) StyleObject() *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QStyleOption_StyleObject(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOption) SetStyleObject(vqo core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetStyleObject(ptr.Pointer(), core.PointerFromQObject(vqo))
	}
}

func (ptr *QStyleOption) Type() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOption_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOption) SetType(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetType(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOption) Version() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOption_Version(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOption) SetVersion(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOption_SetVersion(ptr.Pointer(), C.int(int32(vin)))
	}
}

//go:generate stringer -type=QStyleOptionButton__ButtonFeature
//QStyleOptionButton::ButtonFeature
type QStyleOptionButton__ButtonFeature int64

const (
	QStyleOptionButton__None              QStyleOptionButton__ButtonFeature = QStyleOptionButton__ButtonFeature(0x00)
	QStyleOptionButton__Flat              QStyleOptionButton__ButtonFeature = QStyleOptionButton__ButtonFeature(0x01)
	QStyleOptionButton__HasMenu           QStyleOptionButton__ButtonFeature = QStyleOptionButton__ButtonFeature(0x02)
	QStyleOptionButton__DefaultButton     QStyleOptionButton__ButtonFeature = QStyleOptionButton__ButtonFeature(0x04)
	QStyleOptionButton__AutoDefaultButton QStyleOptionButton__ButtonFeature = QStyleOptionButton__ButtonFeature(0x08)
	QStyleOptionButton__CommandLinkButton QStyleOptionButton__ButtonFeature = QStyleOptionButton__ButtonFeature(0x10)
)

//go:generate stringer -type=QStyleOptionButton__StyleOptionType
//QStyleOptionButton::StyleOptionType
type QStyleOptionButton__StyleOptionType int64

var (
	QStyleOptionButton__Type QStyleOptionButton__StyleOptionType = QStyleOptionButton__StyleOptionType(QStyleOption__SO_Button)
)

//go:generate stringer -type=QStyleOptionButton__StyleOptionVersion
//QStyleOptionButton::StyleOptionVersion
type QStyleOptionButton__StyleOptionVersion int64

var (
	QStyleOptionButton__Version QStyleOptionButton__StyleOptionVersion = QStyleOptionButton__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleOptionComboBox__StyleOptionType
//QStyleOptionComboBox::StyleOptionType
type QStyleOptionComboBox__StyleOptionType int64

var (
	QStyleOptionComboBox__Type QStyleOptionComboBox__StyleOptionType = QStyleOptionComboBox__StyleOptionType(QStyleOption__SO_ComboBox)
)

//go:generate stringer -type=QStyleOptionComboBox__StyleOptionVersion
//QStyleOptionComboBox::StyleOptionVersion
type QStyleOptionComboBox__StyleOptionVersion int64

var (
	QStyleOptionComboBox__Version QStyleOptionComboBox__StyleOptionVersion = QStyleOptionComboBox__StyleOptionVersion(1)
)

type QStyleOptionComplex struct {
	QStyleOption
}

type QStyleOptionComplex_ITF interface {
	QStyleOption_ITF
	QStyleOptionComplex_PTR() *QStyleOptionComplex
}

func (ptr *QStyleOptionComplex) QStyleOptionComplex_PTR() *QStyleOptionComplex {
	return ptr
}

func (ptr *QStyleOptionComplex) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOption_PTR().Pointer()
	}
	return nil
}

func (ptr *QStyleOptionComplex) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QStyleOption_PTR().SetPointer(p)
	}
}

func PointerFromQStyleOptionComplex(ptr QStyleOptionComplex_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOptionComplex_PTR().Pointer()
	}
	return nil
}

func NewQStyleOptionComplexFromPointer(ptr unsafe.Pointer) (n *QStyleOptionComplex) {
	n = new(QStyleOptionComplex)
	n.SetPointer(ptr)
	return
}

func (ptr *QStyleOptionComplex) DestroyQStyleOptionComplex() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//go:generate stringer -type=QStyleOptionComplex__StyleOptionType
//QStyleOptionComplex::StyleOptionType
type QStyleOptionComplex__StyleOptionType int64

var (
	QStyleOptionComplex__Type QStyleOptionComplex__StyleOptionType = QStyleOptionComplex__StyleOptionType(QStyleOption__SO_Complex)
)

//go:generate stringer -type=QStyleOptionComplex__StyleOptionVersion
//QStyleOptionComplex::StyleOptionVersion
type QStyleOptionComplex__StyleOptionVersion int64

var (
	QStyleOptionComplex__Version QStyleOptionComplex__StyleOptionVersion = QStyleOptionComplex__StyleOptionVersion(1)
)

func NewQStyleOptionComplex2(other QStyleOptionComplex_ITF) *QStyleOptionComplex {
	tmpValue := NewQStyleOptionComplexFromPointer(C.QStyleOptionComplex_NewQStyleOptionComplex2(PointerFromQStyleOptionComplex(other)))
	runtime.SetFinalizer(tmpValue, (*QStyleOptionComplex).DestroyQStyleOptionComplex)
	return tmpValue
}

func NewQStyleOptionComplex(version int, ty int) *QStyleOptionComplex {
	tmpValue := NewQStyleOptionComplexFromPointer(C.QStyleOptionComplex_NewQStyleOptionComplex(C.int(int32(version)), C.int(int32(ty))))
	runtime.SetFinalizer(tmpValue, (*QStyleOptionComplex).DestroyQStyleOptionComplex)
	return tmpValue
}

func (ptr *QStyleOptionComplex) ActiveSubControls() QStyle__SubControl {
	if ptr.Pointer() != nil {
		return QStyle__SubControl(C.QStyleOptionComplex_ActiveSubControls(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionComplex) SetActiveSubControls(vqs QStyle__SubControl) {
	if ptr.Pointer() != nil {
		C.QStyleOptionComplex_SetActiveSubControls(ptr.Pointer(), C.longlong(vqs))
	}
}

func (ptr *QStyleOptionComplex) SubControls() QStyle__SubControl {
	if ptr.Pointer() != nil {
		return QStyle__SubControl(C.QStyleOptionComplex_SubControls(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionComplex) SetSubControls(vqs QStyle__SubControl) {
	if ptr.Pointer() != nil {
		C.QStyleOptionComplex_SetSubControls(ptr.Pointer(), C.longlong(vqs))
	}
}

//go:generate stringer -type=QStyleOptionDockWidget__StyleOptionType
//QStyleOptionDockWidget::StyleOptionType
type QStyleOptionDockWidget__StyleOptionType int64

var (
	QStyleOptionDockWidget__Type QStyleOptionDockWidget__StyleOptionType = QStyleOptionDockWidget__StyleOptionType(QStyleOption__SO_DockWidget)
)

//go:generate stringer -type=QStyleOptionDockWidget__StyleOptionVersion
//QStyleOptionDockWidget::StyleOptionVersion
type QStyleOptionDockWidget__StyleOptionVersion int64

var (
	QStyleOptionDockWidget__Version QStyleOptionDockWidget__StyleOptionVersion = QStyleOptionDockWidget__StyleOptionVersion(2)
)

//go:generate stringer -type=QStyleOptionFocusRect__StyleOptionType
//QStyleOptionFocusRect::StyleOptionType
type QStyleOptionFocusRect__StyleOptionType int64

var (
	QStyleOptionFocusRect__Type QStyleOptionFocusRect__StyleOptionType = QStyleOptionFocusRect__StyleOptionType(QStyleOption__SO_FocusRect)
)

//go:generate stringer -type=QStyleOptionFocusRect__StyleOptionVersion
//QStyleOptionFocusRect::StyleOptionVersion
type QStyleOptionFocusRect__StyleOptionVersion int64

var (
	QStyleOptionFocusRect__Version QStyleOptionFocusRect__StyleOptionVersion = QStyleOptionFocusRect__StyleOptionVersion(1)
)

type QStyleOptionFrame struct {
	QStyleOption
}

type QStyleOptionFrame_ITF interface {
	QStyleOption_ITF
	QStyleOptionFrame_PTR() *QStyleOptionFrame
}

func (ptr *QStyleOptionFrame) QStyleOptionFrame_PTR() *QStyleOptionFrame {
	return ptr
}

func (ptr *QStyleOptionFrame) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOption_PTR().Pointer()
	}
	return nil
}

func (ptr *QStyleOptionFrame) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QStyleOption_PTR().SetPointer(p)
	}
}

func PointerFromQStyleOptionFrame(ptr QStyleOptionFrame_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOptionFrame_PTR().Pointer()
	}
	return nil
}

func NewQStyleOptionFrameFromPointer(ptr unsafe.Pointer) (n *QStyleOptionFrame) {
	n = new(QStyleOptionFrame)
	n.SetPointer(ptr)
	return
}

func (ptr *QStyleOptionFrame) DestroyQStyleOptionFrame() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//go:generate stringer -type=QStyleOptionFrame__FrameFeature
//QStyleOptionFrame::FrameFeature
type QStyleOptionFrame__FrameFeature int64

const (
	QStyleOptionFrame__None    QStyleOptionFrame__FrameFeature = QStyleOptionFrame__FrameFeature(0x00)
	QStyleOptionFrame__Flat    QStyleOptionFrame__FrameFeature = QStyleOptionFrame__FrameFeature(0x01)
	QStyleOptionFrame__Rounded QStyleOptionFrame__FrameFeature = QStyleOptionFrame__FrameFeature(0x02)
)

//go:generate stringer -type=QStyleOptionFrame__StyleOptionType
//QStyleOptionFrame::StyleOptionType
type QStyleOptionFrame__StyleOptionType int64

var (
	QStyleOptionFrame__Type QStyleOptionFrame__StyleOptionType = QStyleOptionFrame__StyleOptionType(QStyleOption__SO_Frame)
)

//go:generate stringer -type=QStyleOptionFrame__StyleOptionVersion
//QStyleOptionFrame::StyleOptionVersion
type QStyleOptionFrame__StyleOptionVersion int64

var (
	QStyleOptionFrame__Version QStyleOptionFrame__StyleOptionVersion = QStyleOptionFrame__StyleOptionVersion(3)
)

func NewQStyleOptionFrame() *QStyleOptionFrame {
	tmpValue := NewQStyleOptionFrameFromPointer(C.QStyleOptionFrame_NewQStyleOptionFrame())
	runtime.SetFinalizer(tmpValue, (*QStyleOptionFrame).DestroyQStyleOptionFrame)
	return tmpValue
}

func NewQStyleOptionFrame2(other QStyleOptionFrame_ITF) *QStyleOptionFrame {
	tmpValue := NewQStyleOptionFrameFromPointer(C.QStyleOptionFrame_NewQStyleOptionFrame2(PointerFromQStyleOptionFrame(other)))
	runtime.SetFinalizer(tmpValue, (*QStyleOptionFrame).DestroyQStyleOptionFrame)
	return tmpValue
}

func (ptr *QStyleOptionFrame) Features() QStyleOptionFrame__FrameFeature {
	if ptr.Pointer() != nil {
		return QStyleOptionFrame__FrameFeature(C.QStyleOptionFrame_Features(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionFrame) SetFeatures(vqs QStyleOptionFrame__FrameFeature) {
	if ptr.Pointer() != nil {
		C.QStyleOptionFrame_SetFeatures(ptr.Pointer(), C.longlong(vqs))
	}
}

func (ptr *QStyleOptionFrame) FrameShape() QFrame__Shape {
	if ptr.Pointer() != nil {
		return QFrame__Shape(C.QStyleOptionFrame_FrameShape(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionFrame) SetFrameShape(vqf QFrame__Shape) {
	if ptr.Pointer() != nil {
		C.QStyleOptionFrame_SetFrameShape(ptr.Pointer(), C.longlong(vqf))
	}
}

func (ptr *QStyleOptionFrame) LineWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionFrame_LineWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionFrame) SetLineWidth(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionFrame_SetLineWidth(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionFrame) MidLineWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionFrame_MidLineWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionFrame) SetMidLineWidth(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionFrame_SetMidLineWidth(ptr.Pointer(), C.int(int32(vin)))
	}
}

type QStyleOptionGraphicsItem struct {
	QStyleOption
}

type QStyleOptionGraphicsItem_ITF interface {
	QStyleOption_ITF
	QStyleOptionGraphicsItem_PTR() *QStyleOptionGraphicsItem
}

func (ptr *QStyleOptionGraphicsItem) QStyleOptionGraphicsItem_PTR() *QStyleOptionGraphicsItem {
	return ptr
}

func (ptr *QStyleOptionGraphicsItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOption_PTR().Pointer()
	}
	return nil
}

func (ptr *QStyleOptionGraphicsItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QStyleOption_PTR().SetPointer(p)
	}
}

func PointerFromQStyleOptionGraphicsItem(ptr QStyleOptionGraphicsItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOptionGraphicsItem_PTR().Pointer()
	}
	return nil
}

func NewQStyleOptionGraphicsItemFromPointer(ptr unsafe.Pointer) (n *QStyleOptionGraphicsItem) {
	n = new(QStyleOptionGraphicsItem)
	n.SetPointer(ptr)
	return
}

func (ptr *QStyleOptionGraphicsItem) DestroyQStyleOptionGraphicsItem() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//go:generate stringer -type=QStyleOptionGraphicsItem__StyleOptionType
//QStyleOptionGraphicsItem::StyleOptionType
type QStyleOptionGraphicsItem__StyleOptionType int64

var (
	QStyleOptionGraphicsItem__Type QStyleOptionGraphicsItem__StyleOptionType = QStyleOptionGraphicsItem__StyleOptionType(QStyleOption__SO_GraphicsItem)
)

//go:generate stringer -type=QStyleOptionGraphicsItem__StyleOptionVersion
//QStyleOptionGraphicsItem::StyleOptionVersion
type QStyleOptionGraphicsItem__StyleOptionVersion int64

var (
	QStyleOptionGraphicsItem__Version QStyleOptionGraphicsItem__StyleOptionVersion = QStyleOptionGraphicsItem__StyleOptionVersion(1)
)

func NewQStyleOptionGraphicsItem() *QStyleOptionGraphicsItem {
	tmpValue := NewQStyleOptionGraphicsItemFromPointer(C.QStyleOptionGraphicsItem_NewQStyleOptionGraphicsItem())
	runtime.SetFinalizer(tmpValue, (*QStyleOptionGraphicsItem).DestroyQStyleOptionGraphicsItem)
	return tmpValue
}

func NewQStyleOptionGraphicsItem2(other QStyleOptionGraphicsItem_ITF) *QStyleOptionGraphicsItem {
	tmpValue := NewQStyleOptionGraphicsItemFromPointer(C.QStyleOptionGraphicsItem_NewQStyleOptionGraphicsItem2(PointerFromQStyleOptionGraphicsItem(other)))
	runtime.SetFinalizer(tmpValue, (*QStyleOptionGraphicsItem).DestroyQStyleOptionGraphicsItem)
	return tmpValue
}

func QStyleOptionGraphicsItem_LevelOfDetailFromTransform(worldTransform gui.QTransform_ITF) float64 {
	return float64(C.QStyleOptionGraphicsItem_QStyleOptionGraphicsItem_LevelOfDetailFromTransform(gui.PointerFromQTransform(worldTransform)))
}

func (ptr *QStyleOptionGraphicsItem) LevelOfDetailFromTransform(worldTransform gui.QTransform_ITF) float64 {
	return float64(C.QStyleOptionGraphicsItem_QStyleOptionGraphicsItem_LevelOfDetailFromTransform(gui.PointerFromQTransform(worldTransform)))
}

func (ptr *QStyleOptionGraphicsItem) ExposedRect() *core.QRectF {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFFromPointer(C.QStyleOptionGraphicsItem_ExposedRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOptionGraphicsItem) SetExposedRect(vqr core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOptionGraphicsItem_SetExposedRect(ptr.Pointer(), core.PointerFromQRectF(vqr))
	}
}

//go:generate stringer -type=QStyleOptionGroupBox__StyleOptionType
//QStyleOptionGroupBox::StyleOptionType
type QStyleOptionGroupBox__StyleOptionType int64

var (
	QStyleOptionGroupBox__Type QStyleOptionGroupBox__StyleOptionType = QStyleOptionGroupBox__StyleOptionType(QStyleOption__SO_GroupBox)
)

//go:generate stringer -type=QStyleOptionGroupBox__StyleOptionVersion
//QStyleOptionGroupBox::StyleOptionVersion
type QStyleOptionGroupBox__StyleOptionVersion int64

var (
	QStyleOptionGroupBox__Version QStyleOptionGroupBox__StyleOptionVersion = QStyleOptionGroupBox__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleOptionHeader__SectionPosition
//QStyleOptionHeader::SectionPosition
type QStyleOptionHeader__SectionPosition int64

const (
	QStyleOptionHeader__Beginning      QStyleOptionHeader__SectionPosition = QStyleOptionHeader__SectionPosition(0)
	QStyleOptionHeader__Middle         QStyleOptionHeader__SectionPosition = QStyleOptionHeader__SectionPosition(1)
	QStyleOptionHeader__End            QStyleOptionHeader__SectionPosition = QStyleOptionHeader__SectionPosition(2)
	QStyleOptionHeader__OnlyOneSection QStyleOptionHeader__SectionPosition = QStyleOptionHeader__SectionPosition(3)
)

//go:generate stringer -type=QStyleOptionHeader__SelectedPosition
//QStyleOptionHeader::SelectedPosition
type QStyleOptionHeader__SelectedPosition int64

const (
	QStyleOptionHeader__NotAdjacent                QStyleOptionHeader__SelectedPosition = QStyleOptionHeader__SelectedPosition(0)
	QStyleOptionHeader__NextIsSelected             QStyleOptionHeader__SelectedPosition = QStyleOptionHeader__SelectedPosition(1)
	QStyleOptionHeader__PreviousIsSelected         QStyleOptionHeader__SelectedPosition = QStyleOptionHeader__SelectedPosition(2)
	QStyleOptionHeader__NextAndPreviousAreSelected QStyleOptionHeader__SelectedPosition = QStyleOptionHeader__SelectedPosition(3)
)

//go:generate stringer -type=QStyleOptionHeader__SortIndicator
//QStyleOptionHeader::SortIndicator
type QStyleOptionHeader__SortIndicator int64

const (
	QStyleOptionHeader__None     QStyleOptionHeader__SortIndicator = QStyleOptionHeader__SortIndicator(0)
	QStyleOptionHeader__SortUp   QStyleOptionHeader__SortIndicator = QStyleOptionHeader__SortIndicator(1)
	QStyleOptionHeader__SortDown QStyleOptionHeader__SortIndicator = QStyleOptionHeader__SortIndicator(2)
)

//go:generate stringer -type=QStyleOptionHeader__StyleOptionType
//QStyleOptionHeader::StyleOptionType
type QStyleOptionHeader__StyleOptionType int64

var (
	QStyleOptionHeader__Type QStyleOptionHeader__StyleOptionType = QStyleOptionHeader__StyleOptionType(QStyleOption__SO_Header)
)

//go:generate stringer -type=QStyleOptionHeader__StyleOptionVersion
//QStyleOptionHeader::StyleOptionVersion
type QStyleOptionHeader__StyleOptionVersion int64

var (
	QStyleOptionHeader__Version QStyleOptionHeader__StyleOptionVersion = QStyleOptionHeader__StyleOptionVersion(1)
)

type QStyleOptionMenuItem struct {
	QStyleOption
}

type QStyleOptionMenuItem_ITF interface {
	QStyleOption_ITF
	QStyleOptionMenuItem_PTR() *QStyleOptionMenuItem
}

func (ptr *QStyleOptionMenuItem) QStyleOptionMenuItem_PTR() *QStyleOptionMenuItem {
	return ptr
}

func (ptr *QStyleOptionMenuItem) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOption_PTR().Pointer()
	}
	return nil
}

func (ptr *QStyleOptionMenuItem) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QStyleOption_PTR().SetPointer(p)
	}
}

func PointerFromQStyleOptionMenuItem(ptr QStyleOptionMenuItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOptionMenuItem_PTR().Pointer()
	}
	return nil
}

func NewQStyleOptionMenuItemFromPointer(ptr unsafe.Pointer) (n *QStyleOptionMenuItem) {
	n = new(QStyleOptionMenuItem)
	n.SetPointer(ptr)
	return
}

func (ptr *QStyleOptionMenuItem) DestroyQStyleOptionMenuItem() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//go:generate stringer -type=QStyleOptionMenuItem__CheckType
//QStyleOptionMenuItem::CheckType
type QStyleOptionMenuItem__CheckType int64

const (
	QStyleOptionMenuItem__NotCheckable QStyleOptionMenuItem__CheckType = QStyleOptionMenuItem__CheckType(0)
	QStyleOptionMenuItem__Exclusive    QStyleOptionMenuItem__CheckType = QStyleOptionMenuItem__CheckType(1)
	QStyleOptionMenuItem__NonExclusive QStyleOptionMenuItem__CheckType = QStyleOptionMenuItem__CheckType(2)
)

//go:generate stringer -type=QStyleOptionMenuItem__MenuItemType
//QStyleOptionMenuItem::MenuItemType
type QStyleOptionMenuItem__MenuItemType int64

const (
	QStyleOptionMenuItem__Normal      QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(0)
	QStyleOptionMenuItem__DefaultItem QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(1)
	QStyleOptionMenuItem__Separator   QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(2)
	QStyleOptionMenuItem__SubMenu     QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(3)
	QStyleOptionMenuItem__Scroller    QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(4)
	QStyleOptionMenuItem__TearOff     QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(5)
	QStyleOptionMenuItem__Margin      QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(6)
	QStyleOptionMenuItem__EmptyArea   QStyleOptionMenuItem__MenuItemType = QStyleOptionMenuItem__MenuItemType(7)
)

//go:generate stringer -type=QStyleOptionMenuItem__StyleOptionType
//QStyleOptionMenuItem::StyleOptionType
type QStyleOptionMenuItem__StyleOptionType int64

var (
	QStyleOptionMenuItem__Type QStyleOptionMenuItem__StyleOptionType = QStyleOptionMenuItem__StyleOptionType(QStyleOption__SO_MenuItem)
)

//go:generate stringer -type=QStyleOptionMenuItem__StyleOptionVersion
//QStyleOptionMenuItem::StyleOptionVersion
type QStyleOptionMenuItem__StyleOptionVersion int64

var (
	QStyleOptionMenuItem__Version QStyleOptionMenuItem__StyleOptionVersion = QStyleOptionMenuItem__StyleOptionVersion(1)
)

func NewQStyleOptionMenuItem() *QStyleOptionMenuItem {
	tmpValue := NewQStyleOptionMenuItemFromPointer(C.QStyleOptionMenuItem_NewQStyleOptionMenuItem())
	runtime.SetFinalizer(tmpValue, (*QStyleOptionMenuItem).DestroyQStyleOptionMenuItem)
	return tmpValue
}

func NewQStyleOptionMenuItem2(other QStyleOptionMenuItem_ITF) *QStyleOptionMenuItem {
	tmpValue := NewQStyleOptionMenuItemFromPointer(C.QStyleOptionMenuItem_NewQStyleOptionMenuItem2(PointerFromQStyleOptionMenuItem(other)))
	runtime.SetFinalizer(tmpValue, (*QStyleOptionMenuItem).DestroyQStyleOptionMenuItem)
	return tmpValue
}

func (ptr *QStyleOptionMenuItem) CheckType() QStyleOptionMenuItem__CheckType {
	if ptr.Pointer() != nil {
		return QStyleOptionMenuItem__CheckType(C.QStyleOptionMenuItem_CheckType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionMenuItem) SetCheckType(vqs QStyleOptionMenuItem__CheckType) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetCheckType(ptr.Pointer(), C.longlong(vqs))
	}
}

func (ptr *QStyleOptionMenuItem) Checked() bool {
	if ptr.Pointer() != nil {
		return int8(C.QStyleOptionMenuItem_Checked(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QStyleOptionMenuItem) SetChecked(vbo bool) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetChecked(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QStyleOptionMenuItem) Font() *gui.QFont {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontFromPointer(C.QStyleOptionMenuItem_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOptionMenuItem) SetFont(vqf gui.QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetFont(ptr.Pointer(), gui.PointerFromQFont(vqf))
	}
}

func (ptr *QStyleOptionMenuItem) Icon() *gui.QIcon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQIconFromPointer(C.QStyleOptionMenuItem_Icon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOptionMenuItem) SetIcon(vqi gui.QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetIcon(ptr.Pointer(), gui.PointerFromQIcon(vqi))
	}
}

func (ptr *QStyleOptionMenuItem) MaxIconWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionMenuItem_MaxIconWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionMenuItem) SetMaxIconWidth(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetMaxIconWidth(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionMenuItem) MenuHasCheckableItems() bool {
	if ptr.Pointer() != nil {
		return int8(C.QStyleOptionMenuItem_MenuHasCheckableItems(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QStyleOptionMenuItem) SetMenuHasCheckableItems(vbo bool) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetMenuHasCheckableItems(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QStyleOptionMenuItem) MenuItemType() QStyleOptionMenuItem__MenuItemType {
	if ptr.Pointer() != nil {
		return QStyleOptionMenuItem__MenuItemType(C.QStyleOptionMenuItem_MenuItemType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionMenuItem) SetMenuItemType(vqs QStyleOptionMenuItem__MenuItemType) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetMenuItemType(ptr.Pointer(), C.longlong(vqs))
	}
}

func (ptr *QStyleOptionMenuItem) MenuRect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QStyleOptionMenuItem_MenuRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleOptionMenuItem) SetMenuRect(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetMenuRect(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

func (ptr *QStyleOptionMenuItem) TabWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionMenuItem_TabWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionMenuItem) SetTabWidth(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionMenuItem_SetTabWidth(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionMenuItem) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStyleOptionMenuItem_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStyleOptionMenuItem) SetText(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QStyleOptionMenuItem_SetText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

//go:generate stringer -type=QStyleOptionProgressBar__StyleOptionType
//QStyleOptionProgressBar::StyleOptionType
type QStyleOptionProgressBar__StyleOptionType int64

var (
	QStyleOptionProgressBar__Type QStyleOptionProgressBar__StyleOptionType = QStyleOptionProgressBar__StyleOptionType(QStyleOption__SO_ProgressBar)
)

//go:generate stringer -type=QStyleOptionProgressBar__StyleOptionVersion
//QStyleOptionProgressBar::StyleOptionVersion
type QStyleOptionProgressBar__StyleOptionVersion int64

var (
	QStyleOptionProgressBar__Version QStyleOptionProgressBar__StyleOptionVersion = QStyleOptionProgressBar__StyleOptionVersion(2)
)

//go:generate stringer -type=QStyleOptionRubberBand__StyleOptionType
//QStyleOptionRubberBand::StyleOptionType
type QStyleOptionRubberBand__StyleOptionType int64

var (
	QStyleOptionRubberBand__Type QStyleOptionRubberBand__StyleOptionType = QStyleOptionRubberBand__StyleOptionType(QStyleOption__SO_RubberBand)
)

//go:generate stringer -type=QStyleOptionRubberBand__StyleOptionVersion
//QStyleOptionRubberBand::StyleOptionVersion
type QStyleOptionRubberBand__StyleOptionVersion int64

var (
	QStyleOptionRubberBand__Version QStyleOptionRubberBand__StyleOptionVersion = QStyleOptionRubberBand__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleOptionSizeGrip__StyleOptionType
//QStyleOptionSizeGrip::StyleOptionType
type QStyleOptionSizeGrip__StyleOptionType int64

var (
	QStyleOptionSizeGrip__Type QStyleOptionSizeGrip__StyleOptionType = QStyleOptionSizeGrip__StyleOptionType(QStyleOption__SO_SizeGrip)
)

//go:generate stringer -type=QStyleOptionSizeGrip__StyleOptionVersion
//QStyleOptionSizeGrip::StyleOptionVersion
type QStyleOptionSizeGrip__StyleOptionVersion int64

var (
	QStyleOptionSizeGrip__Version QStyleOptionSizeGrip__StyleOptionVersion = QStyleOptionSizeGrip__StyleOptionVersion(1)
)

type QStyleOptionSlider struct {
	QStyleOptionComplex
}

type QStyleOptionSlider_ITF interface {
	QStyleOptionComplex_ITF
	QStyleOptionSlider_PTR() *QStyleOptionSlider
}

func (ptr *QStyleOptionSlider) QStyleOptionSlider_PTR() *QStyleOptionSlider {
	return ptr
}

func (ptr *QStyleOptionSlider) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOptionComplex_PTR().Pointer()
	}
	return nil
}

func (ptr *QStyleOptionSlider) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QStyleOptionComplex_PTR().SetPointer(p)
	}
}

func PointerFromQStyleOptionSlider(ptr QStyleOptionSlider_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleOptionSlider_PTR().Pointer()
	}
	return nil
}

func NewQStyleOptionSliderFromPointer(ptr unsafe.Pointer) (n *QStyleOptionSlider) {
	n = new(QStyleOptionSlider)
	n.SetPointer(ptr)
	return
}

func (ptr *QStyleOptionSlider) DestroyQStyleOptionSlider() {
	if ptr != nil {
		C.free(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

//go:generate stringer -type=QStyleOptionSlider__StyleOptionType
//QStyleOptionSlider::StyleOptionType
type QStyleOptionSlider__StyleOptionType int64

var (
	QStyleOptionSlider__Type QStyleOptionSlider__StyleOptionType = QStyleOptionSlider__StyleOptionType(QStyleOption__SO_Slider)
)

//go:generate stringer -type=QStyleOptionSlider__StyleOptionVersion
//QStyleOptionSlider::StyleOptionVersion
type QStyleOptionSlider__StyleOptionVersion int64

var (
	QStyleOptionSlider__Version QStyleOptionSlider__StyleOptionVersion = QStyleOptionSlider__StyleOptionVersion(1)
)

func NewQStyleOptionSlider() *QStyleOptionSlider {
	tmpValue := NewQStyleOptionSliderFromPointer(C.QStyleOptionSlider_NewQStyleOptionSlider())
	runtime.SetFinalizer(tmpValue, (*QStyleOptionSlider).DestroyQStyleOptionSlider)
	return tmpValue
}

func NewQStyleOptionSlider2(other QStyleOptionSlider_ITF) *QStyleOptionSlider {
	tmpValue := NewQStyleOptionSliderFromPointer(C.QStyleOptionSlider_NewQStyleOptionSlider2(PointerFromQStyleOptionSlider(other)))
	runtime.SetFinalizer(tmpValue, (*QStyleOptionSlider).DestroyQStyleOptionSlider)
	return tmpValue
}

func (ptr *QStyleOptionSlider) DialWrapping() bool {
	if ptr.Pointer() != nil {
		return int8(C.QStyleOptionSlider_DialWrapping(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QStyleOptionSlider) SetDialWrapping(vbo bool) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetDialWrapping(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QStyleOptionSlider) Maximum() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionSlider_Maximum(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetMaximum(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetMaximum(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionSlider) Minimum() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionSlider_Minimum(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetMinimum(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetMinimum(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionSlider) NotchTarget() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QStyleOptionSlider_NotchTarget(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetNotchTarget(vqr float64) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetNotchTarget(ptr.Pointer(), C.double(vqr))
	}
}

func (ptr *QStyleOptionSlider) Orientation() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QStyleOptionSlider_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetOrientation(vqt core.Qt__Orientation) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetOrientation(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QStyleOptionSlider) PageStep() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionSlider_PageStep(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetPageStep(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetPageStep(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionSlider) SingleStep() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionSlider_SingleStep(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetSingleStep(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetSingleStep(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionSlider) SliderPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionSlider_SliderPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetSliderPosition(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetSliderPosition(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionSlider) SliderValue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionSlider_SliderValue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetSliderValue(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetSliderValue(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionSlider) TickInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleOptionSlider_TickInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetTickInterval(vin int) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetTickInterval(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QStyleOptionSlider) TickPosition() QSlider__TickPosition {
	if ptr.Pointer() != nil {
		return QSlider__TickPosition(C.QStyleOptionSlider_TickPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleOptionSlider) SetTickPosition(vqs QSlider__TickPosition) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetTickPosition(ptr.Pointer(), C.longlong(vqs))
	}
}

func (ptr *QStyleOptionSlider) UpsideDown() bool {
	if ptr.Pointer() != nil {
		return int8(C.QStyleOptionSlider_UpsideDown(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QStyleOptionSlider) SetUpsideDown(vbo bool) {
	if ptr.Pointer() != nil {
		C.QStyleOptionSlider_SetUpsideDown(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

//go:generate stringer -type=QStyleOptionSpinBox__StyleOptionType
//QStyleOptionSpinBox::StyleOptionType
type QStyleOptionSpinBox__StyleOptionType int64

var (
	QStyleOptionSpinBox__Type QStyleOptionSpinBox__StyleOptionType = QStyleOptionSpinBox__StyleOptionType(QStyleOption__SO_SpinBox)
)

//go:generate stringer -type=QStyleOptionSpinBox__StyleOptionVersion
//QStyleOptionSpinBox::StyleOptionVersion
type QStyleOptionSpinBox__StyleOptionVersion int64

var (
	QStyleOptionSpinBox__Version QStyleOptionSpinBox__StyleOptionVersion = QStyleOptionSpinBox__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleOptionTab__CornerWidget
//QStyleOptionTab::CornerWidget
type QStyleOptionTab__CornerWidget int64

const (
	QStyleOptionTab__NoCornerWidgets   QStyleOptionTab__CornerWidget = QStyleOptionTab__CornerWidget(0x00)
	QStyleOptionTab__LeftCornerWidget  QStyleOptionTab__CornerWidget = QStyleOptionTab__CornerWidget(0x01)
	QStyleOptionTab__RightCornerWidget QStyleOptionTab__CornerWidget = QStyleOptionTab__CornerWidget(0x02)
)

//go:generate stringer -type=QStyleOptionTab__SelectedPosition
//QStyleOptionTab::SelectedPosition
type QStyleOptionTab__SelectedPosition int64

const (
	QStyleOptionTab__NotAdjacent        QStyleOptionTab__SelectedPosition = QStyleOptionTab__SelectedPosition(0)
	QStyleOptionTab__NextIsSelected     QStyleOptionTab__SelectedPosition = QStyleOptionTab__SelectedPosition(1)
	QStyleOptionTab__PreviousIsSelected QStyleOptionTab__SelectedPosition = QStyleOptionTab__SelectedPosition(2)
)

//go:generate stringer -type=QStyleOptionTab__StyleOptionType
//QStyleOptionTab::StyleOptionType
type QStyleOptionTab__StyleOptionType int64

var (
	QStyleOptionTab__Type QStyleOptionTab__StyleOptionType = QStyleOptionTab__StyleOptionType(QStyleOption__SO_Tab)
)

//go:generate stringer -type=QStyleOptionTab__StyleOptionVersion
//QStyleOptionTab::StyleOptionVersion
type QStyleOptionTab__StyleOptionVersion int64

var (
	QStyleOptionTab__Version QStyleOptionTab__StyleOptionVersion = QStyleOptionTab__StyleOptionVersion(3)
)

//go:generate stringer -type=QStyleOptionTab__TabFeature
//QStyleOptionTab::TabFeature
type QStyleOptionTab__TabFeature int64

const (
	QStyleOptionTab__None     QStyleOptionTab__TabFeature = QStyleOptionTab__TabFeature(0x00)
	QStyleOptionTab__HasFrame QStyleOptionTab__TabFeature = QStyleOptionTab__TabFeature(0x01)
)

//go:generate stringer -type=QStyleOptionTab__TabPosition
//QStyleOptionTab::TabPosition
type QStyleOptionTab__TabPosition int64

const (
	QStyleOptionTab__Beginning  QStyleOptionTab__TabPosition = QStyleOptionTab__TabPosition(0)
	QStyleOptionTab__Middle     QStyleOptionTab__TabPosition = QStyleOptionTab__TabPosition(1)
	QStyleOptionTab__End        QStyleOptionTab__TabPosition = QStyleOptionTab__TabPosition(2)
	QStyleOptionTab__OnlyOneTab QStyleOptionTab__TabPosition = QStyleOptionTab__TabPosition(3)
)

//go:generate stringer -type=QStyleOptionTabBarBase__StyleOptionType
//QStyleOptionTabBarBase::StyleOptionType
type QStyleOptionTabBarBase__StyleOptionType int64

var (
	QStyleOptionTabBarBase__Type QStyleOptionTabBarBase__StyleOptionType = QStyleOptionTabBarBase__StyleOptionType(QStyleOption__SO_TabBarBase)
)

//go:generate stringer -type=QStyleOptionTabBarBase__StyleOptionVersion
//QStyleOptionTabBarBase::StyleOptionVersion
type QStyleOptionTabBarBase__StyleOptionVersion int64

var (
	QStyleOptionTabBarBase__Version QStyleOptionTabBarBase__StyleOptionVersion = QStyleOptionTabBarBase__StyleOptionVersion(2)
)

//go:generate stringer -type=QStyleOptionTabWidgetFrame__StyleOptionType
//QStyleOptionTabWidgetFrame::StyleOptionType
type QStyleOptionTabWidgetFrame__StyleOptionType int64

var (
	QStyleOptionTabWidgetFrame__Type QStyleOptionTabWidgetFrame__StyleOptionType = QStyleOptionTabWidgetFrame__StyleOptionType(QStyleOption__SO_TabWidgetFrame)
)

//go:generate stringer -type=QStyleOptionTabWidgetFrame__StyleOptionVersion
//QStyleOptionTabWidgetFrame::StyleOptionVersion
type QStyleOptionTabWidgetFrame__StyleOptionVersion int64

var (
	QStyleOptionTabWidgetFrame__Version QStyleOptionTabWidgetFrame__StyleOptionVersion = QStyleOptionTabWidgetFrame__StyleOptionVersion(2)
)

//go:generate stringer -type=QStyleOptionTitleBar__StyleOptionType
//QStyleOptionTitleBar::StyleOptionType
type QStyleOptionTitleBar__StyleOptionType int64

var (
	QStyleOptionTitleBar__Type QStyleOptionTitleBar__StyleOptionType = QStyleOptionTitleBar__StyleOptionType(QStyleOption__SO_TitleBar)
)

//go:generate stringer -type=QStyleOptionTitleBar__StyleOptionVersion
//QStyleOptionTitleBar::StyleOptionVersion
type QStyleOptionTitleBar__StyleOptionVersion int64

var (
	QStyleOptionTitleBar__Version QStyleOptionTitleBar__StyleOptionVersion = QStyleOptionTitleBar__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleOptionToolBar__StyleOptionType
//QStyleOptionToolBar::StyleOptionType
type QStyleOptionToolBar__StyleOptionType int64

var (
	QStyleOptionToolBar__Type QStyleOptionToolBar__StyleOptionType = QStyleOptionToolBar__StyleOptionType(QStyleOption__SO_ToolBar)
)

//go:generate stringer -type=QStyleOptionToolBar__StyleOptionVersion
//QStyleOptionToolBar::StyleOptionVersion
type QStyleOptionToolBar__StyleOptionVersion int64

var (
	QStyleOptionToolBar__Version QStyleOptionToolBar__StyleOptionVersion = QStyleOptionToolBar__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleOptionToolBar__ToolBarFeature
//QStyleOptionToolBar::ToolBarFeature
type QStyleOptionToolBar__ToolBarFeature int64

const (
	QStyleOptionToolBar__None    QStyleOptionToolBar__ToolBarFeature = QStyleOptionToolBar__ToolBarFeature(0x0)
	QStyleOptionToolBar__Movable QStyleOptionToolBar__ToolBarFeature = QStyleOptionToolBar__ToolBarFeature(0x1)
)

//go:generate stringer -type=QStyleOptionToolBar__ToolBarPosition
//QStyleOptionToolBar::ToolBarPosition
type QStyleOptionToolBar__ToolBarPosition int64

const (
	QStyleOptionToolBar__Beginning QStyleOptionToolBar__ToolBarPosition = QStyleOptionToolBar__ToolBarPosition(0)
	QStyleOptionToolBar__Middle    QStyleOptionToolBar__ToolBarPosition = QStyleOptionToolBar__ToolBarPosition(1)
	QStyleOptionToolBar__End       QStyleOptionToolBar__ToolBarPosition = QStyleOptionToolBar__ToolBarPosition(2)
	QStyleOptionToolBar__OnlyOne   QStyleOptionToolBar__ToolBarPosition = QStyleOptionToolBar__ToolBarPosition(3)
)

//go:generate stringer -type=QStyleOptionToolBox__SelectedPosition
//QStyleOptionToolBox::SelectedPosition
type QStyleOptionToolBox__SelectedPosition int64

const (
	QStyleOptionToolBox__NotAdjacent        QStyleOptionToolBox__SelectedPosition = QStyleOptionToolBox__SelectedPosition(0)
	QStyleOptionToolBox__NextIsSelected     QStyleOptionToolBox__SelectedPosition = QStyleOptionToolBox__SelectedPosition(1)
	QStyleOptionToolBox__PreviousIsSelected QStyleOptionToolBox__SelectedPosition = QStyleOptionToolBox__SelectedPosition(2)
)

//go:generate stringer -type=QStyleOptionToolBox__StyleOptionType
//QStyleOptionToolBox::StyleOptionType
type QStyleOptionToolBox__StyleOptionType int64

var (
	QStyleOptionToolBox__Type QStyleOptionToolBox__StyleOptionType = QStyleOptionToolBox__StyleOptionType(QStyleOption__SO_ToolBox)
)

//go:generate stringer -type=QStyleOptionToolBox__StyleOptionVersion
//QStyleOptionToolBox::StyleOptionVersion
type QStyleOptionToolBox__StyleOptionVersion int64

var (
	QStyleOptionToolBox__Version QStyleOptionToolBox__StyleOptionVersion = QStyleOptionToolBox__StyleOptionVersion(2)
)

//go:generate stringer -type=QStyleOptionToolBox__TabPosition
//QStyleOptionToolBox::TabPosition
type QStyleOptionToolBox__TabPosition int64

const (
	QStyleOptionToolBox__Beginning  QStyleOptionToolBox__TabPosition = QStyleOptionToolBox__TabPosition(0)
	QStyleOptionToolBox__Middle     QStyleOptionToolBox__TabPosition = QStyleOptionToolBox__TabPosition(1)
	QStyleOptionToolBox__End        QStyleOptionToolBox__TabPosition = QStyleOptionToolBox__TabPosition(2)
	QStyleOptionToolBox__OnlyOneTab QStyleOptionToolBox__TabPosition = QStyleOptionToolBox__TabPosition(3)
)

//go:generate stringer -type=QStyleOptionToolButton__StyleOptionType
//QStyleOptionToolButton::StyleOptionType
type QStyleOptionToolButton__StyleOptionType int64

var (
	QStyleOptionToolButton__Type QStyleOptionToolButton__StyleOptionType = QStyleOptionToolButton__StyleOptionType(QStyleOption__SO_ToolButton)
)

//go:generate stringer -type=QStyleOptionToolButton__StyleOptionVersion
//QStyleOptionToolButton::StyleOptionVersion
type QStyleOptionToolButton__StyleOptionVersion int64

var (
	QStyleOptionToolButton__Version QStyleOptionToolButton__StyleOptionVersion = QStyleOptionToolButton__StyleOptionVersion(1)
)

//go:generate stringer -type=QStyleOptionToolButton__ToolButtonFeature
//QStyleOptionToolButton::ToolButtonFeature
type QStyleOptionToolButton__ToolButtonFeature int64

const (
	QStyleOptionToolButton__None            QStyleOptionToolButton__ToolButtonFeature = QStyleOptionToolButton__ToolButtonFeature(0x00)
	QStyleOptionToolButton__Arrow           QStyleOptionToolButton__ToolButtonFeature = QStyleOptionToolButton__ToolButtonFeature(0x01)
	QStyleOptionToolButton__Menu            QStyleOptionToolButton__ToolButtonFeature = QStyleOptionToolButton__ToolButtonFeature(0x04)
	QStyleOptionToolButton__MenuButtonPopup QStyleOptionToolButton__ToolButtonFeature = QStyleOptionToolButton__ToolButtonFeature(QStyleOptionToolButton__Menu)
	QStyleOptionToolButton__PopupDelay      QStyleOptionToolButton__ToolButtonFeature = QStyleOptionToolButton__ToolButtonFeature(0x08)
	QStyleOptionToolButton__HasMenu         QStyleOptionToolButton__ToolButtonFeature = QStyleOptionToolButton__ToolButtonFeature(0x10)
)

//go:generate stringer -type=QStyleOptionViewItem__Position
//QStyleOptionViewItem::Position
type QStyleOptionViewItem__Position int64

const (
	QStyleOptionViewItem__Left   QStyleOptionViewItem__Position = QStyleOptionViewItem__Position(0)
	QStyleOptionViewItem__Right  QStyleOptionViewItem__Position = QStyleOptionViewItem__Position(1)
	QStyleOptionViewItem__Top    QStyleOptionViewItem__Position = QStyleOptionViewItem__Position(2)
	QStyleOptionViewItem__Bottom QStyleOptionViewItem__Position = QStyleOptionViewItem__Position(3)
)

//go:generate stringer -type=QStyleOptionViewItem__StyleOptionType
//QStyleOptionViewItem::StyleOptionType
type QStyleOptionViewItem__StyleOptionType int64

var (
	QStyleOptionViewItem__Type QStyleOptionViewItem__StyleOptionType = QStyleOptionViewItem__StyleOptionType(QStyleOption__SO_ViewItem)
)

//go:generate stringer -type=QStyleOptionViewItem__StyleOptionVersion
//QStyleOptionViewItem::StyleOptionVersion
type QStyleOptionViewItem__StyleOptionVersion int64

var (
	QStyleOptionViewItem__Version QStyleOptionViewItem__StyleOptionVersion = QStyleOptionViewItem__StyleOptionVersion(4)
)

//go:generate stringer -type=QStyleOptionViewItem__ViewItemFeature
//QStyleOptionViewItem::ViewItemFeature
type QStyleOptionViewItem__ViewItemFeature int64

const (
	QStyleOptionViewItem__None              QStyleOptionViewItem__ViewItemFeature = QStyleOptionViewItem__ViewItemFeature(0x00)
	QStyleOptionViewItem__WrapText          QStyleOptionViewItem__ViewItemFeature = QStyleOptionViewItem__ViewItemFeature(0x01)
	QStyleOptionViewItem__Alternate         QStyleOptionViewItem__ViewItemFeature = QStyleOptionViewItem__ViewItemFeature(0x02)
	QStyleOptionViewItem__HasCheckIndicator QStyleOptionViewItem__ViewItemFeature = QStyleOptionViewItem__ViewItemFeature(0x04)
	QStyleOptionViewItem__HasDisplay        QStyleOptionViewItem__ViewItemFeature = QStyleOptionViewItem__ViewItemFeature(0x08)
	QStyleOptionViewItem__HasDecoration     QStyleOptionViewItem__ViewItemFeature = QStyleOptionViewItem__ViewItemFeature(0x10)
)

//go:generate stringer -type=QStyleOptionViewItem__ViewItemPosition
//QStyleOptionViewItem::ViewItemPosition
type QStyleOptionViewItem__ViewItemPosition int64

const (
	QStyleOptionViewItem__Invalid   QStyleOptionViewItem__ViewItemPosition = QStyleOptionViewItem__ViewItemPosition(0)
	QStyleOptionViewItem__Beginning QStyleOptionViewItem__ViewItemPosition = QStyleOptionViewItem__ViewItemPosition(1)
	QStyleOptionViewItem__Middle    QStyleOptionViewItem__ViewItemPosition = QStyleOptionViewItem__ViewItemPosition(2)
	QStyleOptionViewItem__End       QStyleOptionViewItem__ViewItemPosition = QStyleOptionViewItem__ViewItemPosition(3)
	QStyleOptionViewItem__OnlyOne   QStyleOptionViewItem__ViewItemPosition = QStyleOptionViewItem__ViewItemPosition(4)
)

//go:generate stringer -type=QSwipeGesture__SwipeDirection
//QSwipeGesture::SwipeDirection
type QSwipeGesture__SwipeDirection int64

const (
	QSwipeGesture__NoDirection QSwipeGesture__SwipeDirection = QSwipeGesture__SwipeDirection(0)
	QSwipeGesture__Left        QSwipeGesture__SwipeDirection = QSwipeGesture__SwipeDirection(1)
	QSwipeGesture__Right       QSwipeGesture__SwipeDirection = QSwipeGesture__SwipeDirection(2)
	QSwipeGesture__Up          QSwipeGesture__SwipeDirection = QSwipeGesture__SwipeDirection(3)
	QSwipeGesture__Down        QSwipeGesture__SwipeDirection = QSwipeGesture__SwipeDirection(4)
)

//go:generate stringer -type=QSystemTrayIcon__ActivationReason
//QSystemTrayIcon::ActivationReason
type QSystemTrayIcon__ActivationReason int64

const (
	QSystemTrayIcon__Unknown     QSystemTrayIcon__ActivationReason = QSystemTrayIcon__ActivationReason(0)
	QSystemTrayIcon__Context     QSystemTrayIcon__ActivationReason = QSystemTrayIcon__ActivationReason(1)
	QSystemTrayIcon__DoubleClick QSystemTrayIcon__ActivationReason = QSystemTrayIcon__ActivationReason(2)
	QSystemTrayIcon__Trigger     QSystemTrayIcon__ActivationReason = QSystemTrayIcon__ActivationReason(3)
	QSystemTrayIcon__MiddleClick QSystemTrayIcon__ActivationReason = QSystemTrayIcon__ActivationReason(4)
)

//go:generate stringer -type=QSystemTrayIcon__MessageIcon
//QSystemTrayIcon::MessageIcon
type QSystemTrayIcon__MessageIcon int64

const (
	QSystemTrayIcon__NoIcon      QSystemTrayIcon__MessageIcon = QSystemTrayIcon__MessageIcon(0)
	QSystemTrayIcon__Information QSystemTrayIcon__MessageIcon = QSystemTrayIcon__MessageIcon(1)
	QSystemTrayIcon__Warning     QSystemTrayIcon__MessageIcon = QSystemTrayIcon__MessageIcon(2)
	QSystemTrayIcon__Critical    QSystemTrayIcon__MessageIcon = QSystemTrayIcon__MessageIcon(3)
)

//go:generate stringer -type=QTabBar__ButtonPosition
//QTabBar::ButtonPosition
type QTabBar__ButtonPosition int64

const (
	QTabBar__LeftSide  QTabBar__ButtonPosition = QTabBar__ButtonPosition(0)
	QTabBar__RightSide QTabBar__ButtonPosition = QTabBar__ButtonPosition(1)
)

//go:generate stringer -type=QTabBar__SelectionBehavior
//QTabBar::SelectionBehavior
type QTabBar__SelectionBehavior int64

const (
	QTabBar__SelectLeftTab     QTabBar__SelectionBehavior = QTabBar__SelectionBehavior(0)
	QTabBar__SelectRightTab    QTabBar__SelectionBehavior = QTabBar__SelectionBehavior(1)
	QTabBar__SelectPreviousTab QTabBar__SelectionBehavior = QTabBar__SelectionBehavior(2)
)

//go:generate stringer -type=QTabBar__Shape
//QTabBar::Shape
type QTabBar__Shape int64

const (
	QTabBar__RoundedNorth    QTabBar__Shape = QTabBar__Shape(0)
	QTabBar__RoundedSouth    QTabBar__Shape = QTabBar__Shape(1)
	QTabBar__RoundedWest     QTabBar__Shape = QTabBar__Shape(2)
	QTabBar__RoundedEast     QTabBar__Shape = QTabBar__Shape(3)
	QTabBar__TriangularNorth QTabBar__Shape = QTabBar__Shape(4)
	QTabBar__TriangularSouth QTabBar__Shape = QTabBar__Shape(5)
	QTabBar__TriangularWest  QTabBar__Shape = QTabBar__Shape(6)
	QTabBar__TriangularEast  QTabBar__Shape = QTabBar__Shape(7)
)

//go:generate stringer -type=QTabWidget__TabPosition
//QTabWidget::TabPosition
type QTabWidget__TabPosition int64

const (
	QTabWidget__North QTabWidget__TabPosition = QTabWidget__TabPosition(0)
	QTabWidget__South QTabWidget__TabPosition = QTabWidget__TabPosition(1)
	QTabWidget__West  QTabWidget__TabPosition = QTabWidget__TabPosition(2)
	QTabWidget__East  QTabWidget__TabPosition = QTabWidget__TabPosition(3)
)

//go:generate stringer -type=QTabWidget__TabShape
//QTabWidget::TabShape
type QTabWidget__TabShape int64

const (
	QTabWidget__Rounded    QTabWidget__TabShape = QTabWidget__TabShape(0)
	QTabWidget__Triangular QTabWidget__TabShape = QTabWidget__TabShape(1)
)

//go:generate stringer -type=QTableWidgetItem__ItemType
//QTableWidgetItem::ItemType
type QTableWidgetItem__ItemType int64

const (
	QTableWidgetItem__Type     QTableWidgetItem__ItemType = QTableWidgetItem__ItemType(0)
	QTableWidgetItem__UserType QTableWidgetItem__ItemType = QTableWidgetItem__ItemType(1000)
)

//go:generate stringer -type=QTextEdit__AutoFormattingFlag
//QTextEdit::AutoFormattingFlag
type QTextEdit__AutoFormattingFlag int64

const (
	QTextEdit__AutoNone       QTextEdit__AutoFormattingFlag = QTextEdit__AutoFormattingFlag(0)
	QTextEdit__AutoBulletList QTextEdit__AutoFormattingFlag = QTextEdit__AutoFormattingFlag(0x00000001)
	QTextEdit__AutoAll        QTextEdit__AutoFormattingFlag = QTextEdit__AutoFormattingFlag(0xffffffff)
)

//go:generate stringer -type=QTextEdit__LineWrapMode
//QTextEdit::LineWrapMode
type QTextEdit__LineWrapMode int64

const (
	QTextEdit__NoWrap           QTextEdit__LineWrapMode = QTextEdit__LineWrapMode(0)
	QTextEdit__WidgetWidth      QTextEdit__LineWrapMode = QTextEdit__LineWrapMode(1)
	QTextEdit__FixedPixelWidth  QTextEdit__LineWrapMode = QTextEdit__LineWrapMode(2)
	QTextEdit__FixedColumnWidth QTextEdit__LineWrapMode = QTextEdit__LineWrapMode(3)
)

//go:generate stringer -type=QToolButton__ToolButtonPopupMode
//QToolButton::ToolButtonPopupMode
type QToolButton__ToolButtonPopupMode int64

const (
	QToolButton__DelayedPopup    QToolButton__ToolButtonPopupMode = QToolButton__ToolButtonPopupMode(0)
	QToolButton__MenuButtonPopup QToolButton__ToolButtonPopupMode = QToolButton__ToolButtonPopupMode(1)
	QToolButton__InstantPopup    QToolButton__ToolButtonPopupMode = QToolButton__ToolButtonPopupMode(2)
)

//go:generate stringer -type=QTreeWidgetItem__ChildIndicatorPolicy
//QTreeWidgetItem::ChildIndicatorPolicy
type QTreeWidgetItem__ChildIndicatorPolicy int64

const (
	QTreeWidgetItem__ShowIndicator                  QTreeWidgetItem__ChildIndicatorPolicy = QTreeWidgetItem__ChildIndicatorPolicy(0)
	QTreeWidgetItem__DontShowIndicator              QTreeWidgetItem__ChildIndicatorPolicy = QTreeWidgetItem__ChildIndicatorPolicy(1)
	QTreeWidgetItem__DontShowIndicatorWhenChildless QTreeWidgetItem__ChildIndicatorPolicy = QTreeWidgetItem__ChildIndicatorPolicy(2)
)

//go:generate stringer -type=QTreeWidgetItem__ItemType
//QTreeWidgetItem::ItemType
type QTreeWidgetItem__ItemType int64

const (
	QTreeWidgetItem__Type     QTreeWidgetItem__ItemType = QTreeWidgetItem__ItemType(0)
	QTreeWidgetItem__UserType QTreeWidgetItem__ItemType = QTreeWidgetItem__ItemType(1000)
)

//go:generate stringer -type=QTreeWidgetItemIterator__IteratorFlag
//QTreeWidgetItemIterator::IteratorFlag
type QTreeWidgetItemIterator__IteratorFlag int64

const (
	QTreeWidgetItemIterator__All           QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000000)
	QTreeWidgetItemIterator__Hidden        QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000001)
	QTreeWidgetItemIterator__NotHidden     QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000002)
	QTreeWidgetItemIterator__Selected      QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000004)
	QTreeWidgetItemIterator__Unselected    QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000008)
	QTreeWidgetItemIterator__Selectable    QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000010)
	QTreeWidgetItemIterator__NotSelectable QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000020)
	QTreeWidgetItemIterator__DragEnabled   QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000040)
	QTreeWidgetItemIterator__DragDisabled  QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000080)
	QTreeWidgetItemIterator__DropEnabled   QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000100)
	QTreeWidgetItemIterator__DropDisabled  QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000200)
	QTreeWidgetItemIterator__HasChildren   QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000400)
	QTreeWidgetItemIterator__NoChildren    QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00000800)
	QTreeWidgetItemIterator__Checked       QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00001000)
	QTreeWidgetItemIterator__NotChecked    QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00002000)
	QTreeWidgetItemIterator__Enabled       QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00004000)
	QTreeWidgetItemIterator__Disabled      QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00008000)
	QTreeWidgetItemIterator__Editable      QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00010000)
	QTreeWidgetItemIterator__NotEditable   QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x00020000)
	QTreeWidgetItemIterator__UserFlag      QTreeWidgetItemIterator__IteratorFlag = QTreeWidgetItemIterator__IteratorFlag(0x01000000)
)

type QWidget struct {
	core.QObject
	gui.QPaintDevice
}

type QWidget_ITF interface {
	core.QObject_ITF
	gui.QPaintDevice_ITF
	QWidget_PTR() *QWidget
}

func (ptr *QWidget) QWidget_PTR() *QWidget {
	return ptr
}

func (ptr *QWidget) Pointer() unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func (ptr *QWidget) SetPointer(p unsafe.Pointer) {
	if ptr != nil {
		ptr.QObject_PTR().SetPointer(p)
		ptr.QPaintDevice_PTR().SetPointer(p)
	}
}

func PointerFromQWidget(ptr QWidget_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWidget_PTR().Pointer()
	}
	return nil
}

func NewQWidgetFromPointer(ptr unsafe.Pointer) (n *QWidget) {
	n = new(QWidget)
	n.SetPointer(ptr)
	return
}

//go:generate stringer -type=QWidget__RenderFlag
//QWidget::RenderFlag
type QWidget__RenderFlag int64

const (
	QWidget__DrawWindowBackground QWidget__RenderFlag = QWidget__RenderFlag(0x1)
	QWidget__DrawChildren         QWidget__RenderFlag = QWidget__RenderFlag(0x2)
	QWidget__IgnoreMask           QWidget__RenderFlag = QWidget__RenderFlag(0x4)
)

func (ptr *QWidget) Grab(rectangle core.QRect_ITF) *gui.QPixmap {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQPixmapFromPointer(C.QWidget_Grab(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*gui.QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func QWidget_Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QWidget_QWidget_Tr(sC, cC, C.int(int32(n))))
}

func (ptr *QWidget) Tr(s string, c string, n int) string {
	var sC *C.char
	if s != "" {
		sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
	}
	var cC *C.char
	if c != "" {
		cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
	}
	return cGoUnpackString(C.QWidget_QWidget_Tr(sC, cC, C.int(int32(n))))
}

func QWidget_CreateWindowContainer(window gui.QWindow_ITF, parent QWidget_ITF, flags core.Qt__WindowType) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_CreateWindowContainer(gui.PointerFromQWindow(window), PointerFromQWidget(parent), C.longlong(flags)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QWidget) CreateWindowContainer(window gui.QWindow_ITF, parent QWidget_ITF, flags core.Qt__WindowType) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_CreateWindowContainer(gui.PointerFromQWindow(window), PointerFromQWidget(parent), C.longlong(flags)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QWidget_Find(id uintptr) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_Find(C.uintptr_t(id)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QWidget) Find(id uintptr) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_Find(C.uintptr_t(id)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QWidget_KeyboardGrabber() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_KeyboardGrabber())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QWidget) KeyboardGrabber() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_KeyboardGrabber())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QWidget_MouseGrabber() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_MouseGrabber())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QWidget) MouseGrabber() *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_QWidget_MouseGrabber())
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQWidget(parent QWidget_ITF, ff core.Qt__WindowType) *QWidget {
	tmpValue := NewQWidgetFromPointer(C.QWidget_NewQWidget(PointerFromQWidget(parent), C.longlong(ff)))
	if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQWidget_Close
func callbackQWidget_Close(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWidgetFromPointer(ptr).CloseDefault())))
}

func (ptr *QWidget) ConnectClose(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "close"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "close", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "close", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "close")
	}
}

func (ptr *QWidget) Close() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_Close(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) CloseDefault() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_CloseDefault(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQWidget_Event
func callbackQWidget_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QEvent) bool)(signal))(core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWidgetFromPointer(ptr).EventDefault(core.NewQEventFromPointer(event)))))
}

func (ptr *QWidget) ConnectEvent(f func(event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "event"); signal != nil {
			f := func(event *core.QEvent) bool {
				(*(*func(*core.QEvent) bool)(signal))(event)
				return f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "event", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "event", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "event")
	}
}

func (ptr *QWidget) Event(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_Event(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QWidget) EventDefault(event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_EventDefault(ptr.Pointer(), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QWidget) FocusNextChild() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_FocusNextChild(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQWidget_FocusNextPrevChild
func callbackQWidget_FocusNextPrevChild(ptr unsafe.Pointer, next C.char) C.char {
	if signal := qt.GetSignal(ptr, "focusNextPrevChild"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(bool) bool)(signal))(int8(next) != 0))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWidgetFromPointer(ptr).FocusNextPrevChildDefault(int8(next) != 0))))
}

func (ptr *QWidget) ConnectFocusNextPrevChild(f func(next bool) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusNextPrevChild"); signal != nil {
			f := func(next bool) bool {
				(*(*func(bool) bool)(signal))(next)
				return f(next)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusNextPrevChild", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusNextPrevChild", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectFocusNextPrevChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusNextPrevChild")
	}
}

func (ptr *QWidget) FocusNextPrevChild(next bool) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_FocusNextPrevChild(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next))))) != 0
	}
	return false
}

func (ptr *QWidget) FocusNextPrevChildDefault(next bool) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_FocusNextPrevChildDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(next))))) != 0
	}
	return false
}

func (ptr *QWidget) FocusPreviousChild() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_FocusPreviousChild(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQWidget_NativeEvent
func callbackQWidget_NativeEvent(ptr unsafe.Pointer, eventType unsafe.Pointer, message unsafe.Pointer, result *C.long) C.char {
	var resultR int
	if result != nil {
		resultR = int(int32(*result))
		defer func() { *result = C.long(int32(resultR)) }()
	}
	if signal := qt.GetSignal(ptr, "nativeEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QByteArray, unsafe.Pointer, *int) bool)(signal))(core.NewQByteArrayFromPointer(eventType), message, &resultR))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWidgetFromPointer(ptr).NativeEventDefault(core.NewQByteArrayFromPointer(eventType), message, &resultR))))
}

func (ptr *QWidget) ConnectNativeEvent(f func(eventType *core.QByteArray, message unsafe.Pointer, result *int) bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "nativeEvent"); signal != nil {
			f := func(eventType *core.QByteArray, message unsafe.Pointer, result *int) bool {
				(*(*func(*core.QByteArray, unsafe.Pointer, *int) bool)(signal))(eventType, message, result)
				return f(eventType, message, result)
			}
			qt.ConnectSignal(ptr.Pointer(), "nativeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "nativeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectNativeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "nativeEvent")
	}
}

func (ptr *QWidget) NativeEvent(eventType core.QByteArray_ITF, message unsafe.Pointer, result *int) bool {
	if ptr.Pointer() != nil {
		var resultC C.long
		if result != nil {
			resultC = C.long(int32(*result))
			defer func() { *result = int(int32(resultC)) }()
		}
		return int8(C.QWidget_NativeEvent(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, &resultC)) != 0
	}
	return false
}

func (ptr *QWidget) NativeEventDefault(eventType core.QByteArray_ITF, message unsafe.Pointer, result *int) bool {
	if ptr.Pointer() != nil {
		var resultC C.long
		if result != nil {
			resultC = C.long(int32(*result))
			defer func() { *result = int(int32(resultC)) }()
		}
		return int8(C.QWidget_NativeEventDefault(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, &resultC)) != 0
	}
	return false
}

func (ptr *QWidget) RestoreGeometry(geometry core.QByteArray_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_RestoreGeometry(ptr.Pointer(), core.PointerFromQByteArray(geometry))) != 0
	}
	return false
}

func (ptr *QWidget) GrabShortcut(key gui.QKeySequence_ITF, context core.Qt__ShortcutContext) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_GrabShortcut(ptr.Pointer(), gui.PointerFromQKeySequence(key), C.longlong(context))))
	}
	return 0
}

//export callbackQWidget_ActionEvent
func callbackQWidget_ActionEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "actionEvent"); signal != nil {
		(*(*func(*gui.QActionEvent))(signal))(gui.NewQActionEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).ActionEventDefault(gui.NewQActionEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectActionEvent(f func(event *gui.QActionEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "actionEvent"); signal != nil {
			f := func(event *gui.QActionEvent) {
				(*(*func(*gui.QActionEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "actionEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "actionEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectActionEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "actionEvent")
	}
}

func (ptr *QWidget) ActionEvent(event gui.QActionEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ActionEvent(ptr.Pointer(), gui.PointerFromQActionEvent(event))
	}
}

func (ptr *QWidget) ActionEventDefault(event gui.QActionEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ActionEventDefault(ptr.Pointer(), gui.PointerFromQActionEvent(event))
	}
}

func (ptr *QWidget) ActivateWindow() {
	if ptr.Pointer() != nil {
		C.QWidget_ActivateWindow(ptr.Pointer())
	}
}

func (ptr *QWidget) AddAction(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_AddAction(ptr.Pointer(), PointerFromQAction(action))
	}
}

func (ptr *QWidget) AddActions(actions []*QAction) {
	if ptr.Pointer() != nil {
		C.QWidget_AddActions(ptr.Pointer(), func() unsafe.Pointer {
			tmpList := NewQWidgetFromPointer(NewQWidgetFromPointer(nil).__addActions_actions_newList())
			for _, v := range actions {
				tmpList.__addActions_actions_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

func (ptr *QWidget) AdjustSize() {
	if ptr.Pointer() != nil {
		C.QWidget_AdjustSize(ptr.Pointer())
	}
}

//export callbackQWidget_ChangeEvent
func callbackQWidget_ChangeEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "changeEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).ChangeEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectChangeEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "changeEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "changeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "changeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectChangeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "changeEvent")
	}
}

func (ptr *QWidget) ChangeEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ChangeEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWidget) ChangeEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ChangeEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWidget) ClearFocus() {
	if ptr.Pointer() != nil {
		C.QWidget_ClearFocus(ptr.Pointer())
	}
}

func (ptr *QWidget) ClearMask() {
	if ptr.Pointer() != nil {
		C.QWidget_ClearMask(ptr.Pointer())
	}
}

//export callbackQWidget_CloseEvent
func callbackQWidget_CloseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "closeEvent"); signal != nil {
		(*(*func(*gui.QCloseEvent))(signal))(gui.NewQCloseEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).CloseEventDefault(gui.NewQCloseEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectCloseEvent(f func(event *gui.QCloseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "closeEvent"); signal != nil {
			f := func(event *gui.QCloseEvent) {
				(*(*func(*gui.QCloseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "closeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "closeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectCloseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "closeEvent")
	}
}

func (ptr *QWidget) CloseEvent(event gui.QCloseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_CloseEvent(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

func (ptr *QWidget) CloseEventDefault(event gui.QCloseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_CloseEventDefault(ptr.Pointer(), gui.PointerFromQCloseEvent(event))
	}
}

//export callbackQWidget_ContextMenuEvent
func callbackQWidget_ContextMenuEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "contextMenuEvent"); signal != nil {
		(*(*func(*gui.QContextMenuEvent))(signal))(gui.NewQContextMenuEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).ContextMenuEventDefault(gui.NewQContextMenuEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectContextMenuEvent(f func(event *gui.QContextMenuEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "contextMenuEvent"); signal != nil {
			f := func(event *gui.QContextMenuEvent) {
				(*(*func(*gui.QContextMenuEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "contextMenuEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "contextMenuEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectContextMenuEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "contextMenuEvent")
	}
}

func (ptr *QWidget) ContextMenuEvent(event gui.QContextMenuEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ContextMenuEvent(ptr.Pointer(), gui.PointerFromQContextMenuEvent(event))
	}
}

func (ptr *QWidget) ContextMenuEventDefault(event gui.QContextMenuEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ContextMenuEventDefault(ptr.Pointer(), gui.PointerFromQContextMenuEvent(event))
	}
}

func (ptr *QWidget) Create(window uintptr, initializeWindow bool, destroyOldWindow bool) {
	if ptr.Pointer() != nil {
		C.QWidget_Create(ptr.Pointer(), C.uintptr_t(window), C.char(int8(qt.GoBoolToInt(initializeWindow))), C.char(int8(qt.GoBoolToInt(destroyOldWindow))))
	}
}

//export callbackQWidget_CustomContextMenuRequested
func callbackQWidget_CustomContextMenuRequested(ptr unsafe.Pointer, pos unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customContextMenuRequested"); signal != nil {
		(*(*func(*core.QPoint))(signal))(core.NewQPointFromPointer(pos))
	}

}

func (ptr *QWidget) ConnectCustomContextMenuRequested(f func(pos *core.QPoint)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "customContextMenuRequested") {
			C.QWidget_ConnectCustomContextMenuRequested(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "customContextMenuRequested")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "customContextMenuRequested"); signal != nil {
			f := func(pos *core.QPoint) {
				(*(*func(*core.QPoint))(signal))(pos)
				f(pos)
			}
			qt.ConnectSignal(ptr.Pointer(), "customContextMenuRequested", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "customContextMenuRequested", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectCustomContextMenuRequested() {
	if ptr.Pointer() != nil {
		C.QWidget_DisconnectCustomContextMenuRequested(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "customContextMenuRequested")
	}
}

func (ptr *QWidget) CustomContextMenuRequested(pos core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_CustomContextMenuRequested(ptr.Pointer(), core.PointerFromQPoint(pos))
	}
}

func (ptr *QWidget) Destroy(destroyWindow bool, destroySubWindows bool) {
	if ptr.Pointer() != nil {
		C.QWidget_Destroy(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(destroyWindow))), C.char(int8(qt.GoBoolToInt(destroySubWindows))))
	}
}

//export callbackQWidget_DragEnterEvent
func callbackQWidget_DragEnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragEnterEvent"); signal != nil {
		(*(*func(*gui.QDragEnterEvent))(signal))(gui.NewQDragEnterEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).DragEnterEventDefault(gui.NewQDragEnterEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectDragEnterEvent(f func(event *gui.QDragEnterEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragEnterEvent"); signal != nil {
			f := func(event *gui.QDragEnterEvent) {
				(*(*func(*gui.QDragEnterEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragEnterEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragEnterEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectDragEnterEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragEnterEvent")
	}
}

func (ptr *QWidget) DragEnterEvent(event gui.QDragEnterEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DragEnterEvent(ptr.Pointer(), gui.PointerFromQDragEnterEvent(event))
	}
}

func (ptr *QWidget) DragEnterEventDefault(event gui.QDragEnterEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DragEnterEventDefault(ptr.Pointer(), gui.PointerFromQDragEnterEvent(event))
	}
}

//export callbackQWidget_DragLeaveEvent
func callbackQWidget_DragLeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragLeaveEvent"); signal != nil {
		(*(*func(*gui.QDragLeaveEvent))(signal))(gui.NewQDragLeaveEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).DragLeaveEventDefault(gui.NewQDragLeaveEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectDragLeaveEvent(f func(event *gui.QDragLeaveEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragLeaveEvent"); signal != nil {
			f := func(event *gui.QDragLeaveEvent) {
				(*(*func(*gui.QDragLeaveEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragLeaveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragLeaveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectDragLeaveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragLeaveEvent")
	}
}

func (ptr *QWidget) DragLeaveEvent(event gui.QDragLeaveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DragLeaveEvent(ptr.Pointer(), gui.PointerFromQDragLeaveEvent(event))
	}
}

func (ptr *QWidget) DragLeaveEventDefault(event gui.QDragLeaveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DragLeaveEventDefault(ptr.Pointer(), gui.PointerFromQDragLeaveEvent(event))
	}
}

//export callbackQWidget_DragMoveEvent
func callbackQWidget_DragMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dragMoveEvent"); signal != nil {
		(*(*func(*gui.QDragMoveEvent))(signal))(gui.NewQDragMoveEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).DragMoveEventDefault(gui.NewQDragMoveEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectDragMoveEvent(f func(event *gui.QDragMoveEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dragMoveEvent"); signal != nil {
			f := func(event *gui.QDragMoveEvent) {
				(*(*func(*gui.QDragMoveEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dragMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dragMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectDragMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dragMoveEvent")
	}
}

func (ptr *QWidget) DragMoveEvent(event gui.QDragMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DragMoveEvent(ptr.Pointer(), gui.PointerFromQDragMoveEvent(event))
	}
}

func (ptr *QWidget) DragMoveEventDefault(event gui.QDragMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DragMoveEventDefault(ptr.Pointer(), gui.PointerFromQDragMoveEvent(event))
	}
}

//export callbackQWidget_DropEvent
func callbackQWidget_DropEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "dropEvent"); signal != nil {
		(*(*func(*gui.QDropEvent))(signal))(gui.NewQDropEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).DropEventDefault(gui.NewQDropEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectDropEvent(f func(event *gui.QDropEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "dropEvent"); signal != nil {
			f := func(event *gui.QDropEvent) {
				(*(*func(*gui.QDropEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "dropEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "dropEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectDropEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "dropEvent")
	}
}

func (ptr *QWidget) DropEvent(event gui.QDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DropEvent(ptr.Pointer(), gui.PointerFromQDropEvent(event))
	}
}

func (ptr *QWidget) DropEventDefault(event gui.QDropEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DropEventDefault(ptr.Pointer(), gui.PointerFromQDropEvent(event))
	}
}

//export callbackQWidget_EnterEvent
func callbackQWidget_EnterEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "enterEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).EnterEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectEnterEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "enterEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "enterEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "enterEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectEnterEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "enterEvent")
	}
}

func (ptr *QWidget) EnterEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_EnterEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWidget) EnterEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_EnterEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQWidget_FocusInEvent
func callbackQWidget_FocusInEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusInEvent"); signal != nil {
		(*(*func(*gui.QFocusEvent))(signal))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).FocusInEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectFocusInEvent(f func(event *gui.QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusInEvent"); signal != nil {
			f := func(event *gui.QFocusEvent) {
				(*(*func(*gui.QFocusEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusInEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusInEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectFocusInEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusInEvent")
	}
}

func (ptr *QWidget) FocusInEvent(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_FocusInEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QWidget) FocusInEventDefault(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_FocusInEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

//export callbackQWidget_FocusOutEvent
func callbackQWidget_FocusOutEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "focusOutEvent"); signal != nil {
		(*(*func(*gui.QFocusEvent))(signal))(gui.NewQFocusEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).FocusOutEventDefault(gui.NewQFocusEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectFocusOutEvent(f func(event *gui.QFocusEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "focusOutEvent"); signal != nil {
			f := func(event *gui.QFocusEvent) {
				(*(*func(*gui.QFocusEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "focusOutEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "focusOutEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectFocusOutEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "focusOutEvent")
	}
}

func (ptr *QWidget) FocusOutEvent(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_FocusOutEvent(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QWidget) FocusOutEventDefault(event gui.QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_FocusOutEventDefault(ptr.Pointer(), gui.PointerFromQFocusEvent(event))
	}
}

func (ptr *QWidget) GrabGesture(gesture core.Qt__GestureType, flags core.Qt__GestureFlag) {
	if ptr.Pointer() != nil {
		C.QWidget_GrabGesture(ptr.Pointer(), C.longlong(gesture), C.longlong(flags))
	}
}

func (ptr *QWidget) GrabKeyboard() {
	if ptr.Pointer() != nil {
		C.QWidget_GrabKeyboard(ptr.Pointer())
	}
}

func (ptr *QWidget) GrabMouse() {
	if ptr.Pointer() != nil {
		C.QWidget_GrabMouse(ptr.Pointer())
	}
}

func (ptr *QWidget) GrabMouse2(cursor gui.QCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_GrabMouse2(ptr.Pointer(), gui.PointerFromQCursor(cursor))
	}
}

//export callbackQWidget_Hide
func callbackQWidget_Hide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hide"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).HideDefault()
	}
}

func (ptr *QWidget) ConnectHide(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hide"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "hide", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hide", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectHide() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hide")
	}
}

func (ptr *QWidget) Hide() {
	if ptr.Pointer() != nil {
		C.QWidget_Hide(ptr.Pointer())
	}
}

func (ptr *QWidget) HideDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_HideDefault(ptr.Pointer())
	}
}

//export callbackQWidget_HideEvent
func callbackQWidget_HideEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "hideEvent"); signal != nil {
		(*(*func(*gui.QHideEvent))(signal))(gui.NewQHideEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).HideEventDefault(gui.NewQHideEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectHideEvent(f func(event *gui.QHideEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hideEvent"); signal != nil {
			f := func(event *gui.QHideEvent) {
				(*(*func(*gui.QHideEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "hideEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hideEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectHideEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hideEvent")
	}
}

func (ptr *QWidget) HideEvent(event gui.QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_HideEvent(ptr.Pointer(), gui.PointerFromQHideEvent(event))
	}
}

func (ptr *QWidget) HideEventDefault(event gui.QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_HideEventDefault(ptr.Pointer(), gui.PointerFromQHideEvent(event))
	}
}

//export callbackQWidget_InputMethodEvent
func callbackQWidget_InputMethodEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "inputMethodEvent"); signal != nil {
		(*(*func(*gui.QInputMethodEvent))(signal))(gui.NewQInputMethodEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).InputMethodEventDefault(gui.NewQInputMethodEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectInputMethodEvent(f func(event *gui.QInputMethodEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "inputMethodEvent"); signal != nil {
			f := func(event *gui.QInputMethodEvent) {
				(*(*func(*gui.QInputMethodEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "inputMethodEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "inputMethodEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectInputMethodEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "inputMethodEvent")
	}
}

func (ptr *QWidget) InputMethodEvent(event gui.QInputMethodEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_InputMethodEvent(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QWidget) InputMethodEventDefault(event gui.QInputMethodEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_InputMethodEventDefault(ptr.Pointer(), gui.PointerFromQInputMethodEvent(event))
	}
}

func (ptr *QWidget) InsertAction(before QAction_ITF, action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_InsertAction(ptr.Pointer(), PointerFromQAction(before), PointerFromQAction(action))
	}
}

func (ptr *QWidget) InsertActions(before QAction_ITF, actions []*QAction) {
	if ptr.Pointer() != nil {
		C.QWidget_InsertActions(ptr.Pointer(), PointerFromQAction(before), func() unsafe.Pointer {
			tmpList := NewQWidgetFromPointer(NewQWidgetFromPointer(nil).__insertActions_actions_newList())
			for _, v := range actions {
				tmpList.__insertActions_actions_setList(v)
			}
			return tmpList.Pointer()
		}())
	}
}

//export callbackQWidget_KeyPressEvent
func callbackQWidget_KeyPressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "keyPressEvent"); signal != nil {
		(*(*func(*gui.QKeyEvent))(signal))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).KeyPressEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectKeyPressEvent(f func(event *gui.QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "keyPressEvent"); signal != nil {
			f := func(event *gui.QKeyEvent) {
				(*(*func(*gui.QKeyEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "keyPressEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "keyPressEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectKeyPressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "keyPressEvent")
	}
}

func (ptr *QWidget) KeyPressEvent(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_KeyPressEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QWidget) KeyPressEventDefault(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_KeyPressEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQWidget_KeyReleaseEvent
func callbackQWidget_KeyReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "keyReleaseEvent"); signal != nil {
		(*(*func(*gui.QKeyEvent))(signal))(gui.NewQKeyEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).KeyReleaseEventDefault(gui.NewQKeyEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectKeyReleaseEvent(f func(event *gui.QKeyEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "keyReleaseEvent"); signal != nil {
			f := func(event *gui.QKeyEvent) {
				(*(*func(*gui.QKeyEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "keyReleaseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "keyReleaseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectKeyReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "keyReleaseEvent")
	}
}

func (ptr *QWidget) KeyReleaseEvent(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_KeyReleaseEvent(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

func (ptr *QWidget) KeyReleaseEventDefault(event gui.QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_KeyReleaseEventDefault(ptr.Pointer(), gui.PointerFromQKeyEvent(event))
	}
}

//export callbackQWidget_LeaveEvent
func callbackQWidget_LeaveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "leaveEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).LeaveEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectLeaveEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "leaveEvent"); signal != nil {
			f := func(event *core.QEvent) {
				(*(*func(*core.QEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "leaveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "leaveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectLeaveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "leaveEvent")
	}
}

func (ptr *QWidget) LeaveEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_LeaveEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWidget) LeaveEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_LeaveEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQWidget_Lower
func callbackQWidget_Lower(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "lower"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).LowerDefault()
	}
}

func (ptr *QWidget) ConnectLower(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "lower"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "lower", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "lower", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectLower() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "lower")
	}
}

func (ptr *QWidget) Lower() {
	if ptr.Pointer() != nil {
		C.QWidget_Lower(ptr.Pointer())
	}
}

func (ptr *QWidget) LowerDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_LowerDefault(ptr.Pointer())
	}
}

//export callbackQWidget_MouseDoubleClickEvent
func callbackQWidget_MouseDoubleClickEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseDoubleClickEvent"); signal != nil {
		(*(*func(*gui.QMouseEvent))(signal))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).MouseDoubleClickEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectMouseDoubleClickEvent(f func(event *gui.QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseDoubleClickEvent"); signal != nil {
			f := func(event *gui.QMouseEvent) {
				(*(*func(*gui.QMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseDoubleClickEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseDoubleClickEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMouseDoubleClickEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseDoubleClickEvent")
	}
}

func (ptr *QWidget) MouseDoubleClickEvent(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MouseDoubleClickEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QWidget) MouseDoubleClickEventDefault(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MouseDoubleClickEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQWidget_MouseMoveEvent
func callbackQWidget_MouseMoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseMoveEvent"); signal != nil {
		(*(*func(*gui.QMouseEvent))(signal))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).MouseMoveEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectMouseMoveEvent(f func(event *gui.QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseMoveEvent"); signal != nil {
			f := func(event *gui.QMouseEvent) {
				(*(*func(*gui.QMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseMoveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseMoveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMouseMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseMoveEvent")
	}
}

func (ptr *QWidget) MouseMoveEvent(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MouseMoveEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QWidget) MouseMoveEventDefault(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MouseMoveEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQWidget_MousePressEvent
func callbackQWidget_MousePressEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mousePressEvent"); signal != nil {
		(*(*func(*gui.QMouseEvent))(signal))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).MousePressEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectMousePressEvent(f func(event *gui.QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mousePressEvent"); signal != nil {
			f := func(event *gui.QMouseEvent) {
				(*(*func(*gui.QMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mousePressEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mousePressEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMousePressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mousePressEvent")
	}
}

func (ptr *QWidget) MousePressEvent(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MousePressEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QWidget) MousePressEventDefault(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MousePressEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

//export callbackQWidget_MouseReleaseEvent
func callbackQWidget_MouseReleaseEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "mouseReleaseEvent"); signal != nil {
		(*(*func(*gui.QMouseEvent))(signal))(gui.NewQMouseEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).MouseReleaseEventDefault(gui.NewQMouseEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectMouseReleaseEvent(f func(event *gui.QMouseEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "mouseReleaseEvent"); signal != nil {
			f := func(event *gui.QMouseEvent) {
				(*(*func(*gui.QMouseEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "mouseReleaseEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "mouseReleaseEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMouseReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "mouseReleaseEvent")
	}
}

func (ptr *QWidget) MouseReleaseEvent(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MouseReleaseEvent(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QWidget) MouseReleaseEventDefault(event gui.QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MouseReleaseEventDefault(ptr.Pointer(), gui.PointerFromQMouseEvent(event))
	}
}

func (ptr *QWidget) Move(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_Move(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

func (ptr *QWidget) Move2(x int, y int) {
	if ptr.Pointer() != nil {
		C.QWidget_Move2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))
	}
}

//export callbackQWidget_MoveEvent
func callbackQWidget_MoveEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "moveEvent"); signal != nil {
		(*(*func(*gui.QMoveEvent))(signal))(gui.NewQMoveEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).MoveEventDefault(gui.NewQMoveEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectMoveEvent(f func(event *gui.QMoveEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "moveEvent"); signal != nil {
			f := func(event *gui.QMoveEvent) {
				(*(*func(*gui.QMoveEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "moveEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "moveEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "moveEvent")
	}
}

func (ptr *QWidget) MoveEvent(event gui.QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MoveEvent(ptr.Pointer(), gui.PointerFromQMoveEvent(event))
	}
}

func (ptr *QWidget) MoveEventDefault(event gui.QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_MoveEventDefault(ptr.Pointer(), gui.PointerFromQMoveEvent(event))
	}
}

func (ptr *QWidget) OverrideWindowFlags(flags core.Qt__WindowType) {
	if ptr.Pointer() != nil {
		C.QWidget_OverrideWindowFlags(ptr.Pointer(), C.longlong(flags))
	}
}

//export callbackQWidget_PaintEvent
func callbackQWidget_PaintEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "paintEvent"); signal != nil {
		(*(*func(*gui.QPaintEvent))(signal))(gui.NewQPaintEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).PaintEventDefault(gui.NewQPaintEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectPaintEvent(f func(event *gui.QPaintEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paintEvent"); signal != nil {
			f := func(event *gui.QPaintEvent) {
				(*(*func(*gui.QPaintEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "paintEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paintEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectPaintEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paintEvent")
	}
}

func (ptr *QWidget) PaintEvent(event gui.QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_PaintEvent(ptr.Pointer(), gui.PointerFromQPaintEvent(event))
	}
}

func (ptr *QWidget) PaintEventDefault(event gui.QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_PaintEventDefault(ptr.Pointer(), gui.PointerFromQPaintEvent(event))
	}
}

//export callbackQWidget_Raise
func callbackQWidget_Raise(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "raise"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).RaiseDefault()
	}
}

func (ptr *QWidget) ConnectRaise(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "raise"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "raise", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "raise", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectRaise() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "raise")
	}
}

func (ptr *QWidget) Raise() {
	if ptr.Pointer() != nil {
		C.QWidget_Raise(ptr.Pointer())
	}
}

func (ptr *QWidget) RaiseDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_RaiseDefault(ptr.Pointer())
	}
}

func (ptr *QWidget) ReleaseKeyboard() {
	if ptr.Pointer() != nil {
		C.QWidget_ReleaseKeyboard(ptr.Pointer())
	}
}

func (ptr *QWidget) ReleaseMouse() {
	if ptr.Pointer() != nil {
		C.QWidget_ReleaseMouse(ptr.Pointer())
	}
}

func (ptr *QWidget) ReleaseShortcut(id int) {
	if ptr.Pointer() != nil {
		C.QWidget_ReleaseShortcut(ptr.Pointer(), C.int(int32(id)))
	}
}

func (ptr *QWidget) RemoveAction(action QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_RemoveAction(ptr.Pointer(), PointerFromQAction(action))
	}
}

func (ptr *QWidget) Render(target gui.QPaintDevice_ITF, targetOffset core.QPoint_ITF, sourceRegion gui.QRegion_ITF, renderFlags QWidget__RenderFlag) {
	if ptr.Pointer() != nil {
		C.QWidget_Render(ptr.Pointer(), gui.PointerFromQPaintDevice(target), core.PointerFromQPoint(targetOffset), gui.PointerFromQRegion(sourceRegion), C.longlong(renderFlags))
	}
}

func (ptr *QWidget) Render2(painter gui.QPainter_ITF, targetOffset core.QPoint_ITF, sourceRegion gui.QRegion_ITF, renderFlags QWidget__RenderFlag) {
	if ptr.Pointer() != nil {
		C.QWidget_Render2(ptr.Pointer(), gui.PointerFromQPainter(painter), core.PointerFromQPoint(targetOffset), gui.PointerFromQRegion(sourceRegion), C.longlong(renderFlags))
	}
}

//export callbackQWidget_Repaint
func callbackQWidget_Repaint(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "repaint"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).RepaintDefault()
	}
}

func (ptr *QWidget) ConnectRepaint(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "repaint"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "repaint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "repaint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectRepaint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "repaint")
	}
}

func (ptr *QWidget) Repaint() {
	if ptr.Pointer() != nil {
		C.QWidget_Repaint(ptr.Pointer())
	}
}

func (ptr *QWidget) RepaintDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_RepaintDefault(ptr.Pointer())
	}
}

func (ptr *QWidget) Repaint3(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_Repaint3(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QWidget) Repaint4(rgn gui.QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_Repaint4(ptr.Pointer(), gui.PointerFromQRegion(rgn))
	}
}

func (ptr *QWidget) Repaint2(x int, y int, w int, h int) {
	if ptr.Pointer() != nil {
		C.QWidget_Repaint2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)))
	}
}

func (ptr *QWidget) Resize(vqs core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_Resize(ptr.Pointer(), core.PointerFromQSize(vqs))
	}
}

func (ptr *QWidget) Resize2(w int, h int) {
	if ptr.Pointer() != nil {
		C.QWidget_Resize2(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)))
	}
}

//export callbackQWidget_ResizeEvent
func callbackQWidget_ResizeEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "resizeEvent"); signal != nil {
		(*(*func(*gui.QResizeEvent))(signal))(gui.NewQResizeEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).ResizeEventDefault(gui.NewQResizeEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectResizeEvent(f func(event *gui.QResizeEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "resizeEvent"); signal != nil {
			f := func(event *gui.QResizeEvent) {
				(*(*func(*gui.QResizeEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "resizeEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "resizeEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectResizeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "resizeEvent")
	}
}

func (ptr *QWidget) ResizeEvent(event gui.QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ResizeEvent(ptr.Pointer(), gui.PointerFromQResizeEvent(event))
	}
}

func (ptr *QWidget) ResizeEventDefault(event gui.QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ResizeEventDefault(ptr.Pointer(), gui.PointerFromQResizeEvent(event))
	}
}

func (ptr *QWidget) Scroll(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QWidget_Scroll(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QWidget) Scroll2(dx int, dy int, r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_Scroll2(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)), core.PointerFromQRect(r))
	}
}

func (ptr *QWidget) SetAcceptDrops(on bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetAcceptDrops(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QWidget) SetAccessibleDescription(description string) {
	if ptr.Pointer() != nil {
		var descriptionC *C.char
		if description != "" {
			descriptionC = C.CString(description)
			defer C.free(unsafe.Pointer(descriptionC))
		}
		C.QWidget_SetAccessibleDescription(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: descriptionC, len: C.longlong(len(description))})
	}
}

func (ptr *QWidget) SetAccessibleName(name string) {
	if ptr.Pointer() != nil {
		var nameC *C.char
		if name != "" {
			nameC = C.CString(name)
			defer C.free(unsafe.Pointer(nameC))
		}
		C.QWidget_SetAccessibleName(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: nameC, len: C.longlong(len(name))})
	}
}

func (ptr *QWidget) SetAttribute(attribute core.Qt__WidgetAttribute, on bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetAttribute(ptr.Pointer(), C.longlong(attribute), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QWidget) SetAutoFillBackground(enabled bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetAutoFillBackground(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QWidget) SetBackgroundRole(role gui.QPalette__ColorRole) {
	if ptr.Pointer() != nil {
		C.QWidget_SetBackgroundRole(ptr.Pointer(), C.longlong(role))
	}
}

func (ptr *QWidget) SetBaseSize(vqs core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetBaseSize(ptr.Pointer(), core.PointerFromQSize(vqs))
	}
}

func (ptr *QWidget) SetBaseSize2(basew int, baseh int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetBaseSize2(ptr.Pointer(), C.int(int32(basew)), C.int(int32(baseh)))
	}
}

func (ptr *QWidget) SetContentsMargins2(margins core.QMargins_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetContentsMargins2(ptr.Pointer(), core.PointerFromQMargins(margins))
	}
}

func (ptr *QWidget) SetContentsMargins(left int, top int, right int, bottom int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetContentsMargins(ptr.Pointer(), C.int(int32(left)), C.int(int32(top)), C.int(int32(right)), C.int(int32(bottom)))
	}
}

func (ptr *QWidget) SetContextMenuPolicy(policy core.Qt__ContextMenuPolicy) {
	if ptr.Pointer() != nil {
		C.QWidget_SetContextMenuPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QWidget) SetCursor(vqc gui.QCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetCursor(ptr.Pointer(), gui.PointerFromQCursor(vqc))
	}
}

//export callbackQWidget_SetDisabled
func callbackQWidget_SetDisabled(ptr unsafe.Pointer, disable C.char) {
	if signal := qt.GetSignal(ptr, "setDisabled"); signal != nil {
		(*(*func(bool))(signal))(int8(disable) != 0)
	} else {
		NewQWidgetFromPointer(ptr).SetDisabledDefault(int8(disable) != 0)
	}
}

func (ptr *QWidget) ConnectSetDisabled(f func(disable bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setDisabled"); signal != nil {
			f := func(disable bool) {
				(*(*func(bool))(signal))(disable)
				f(disable)
			}
			qt.ConnectSignal(ptr.Pointer(), "setDisabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setDisabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetDisabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setDisabled")
	}
}

func (ptr *QWidget) SetDisabled(disable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetDisabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(disable))))
	}
}

func (ptr *QWidget) SetDisabledDefault(disable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetDisabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(disable))))
	}
}

func (ptr *QWidget) SetEditFocus(enable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetEditFocus(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

//export callbackQWidget_SetEnabled
func callbackQWidget_SetEnabled(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setEnabled"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQWidgetFromPointer(ptr).SetEnabledDefault(int8(vbo) != 0)
	}
}

func (ptr *QWidget) ConnectSetEnabled(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setEnabled"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setEnabled", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetEnabled() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setEnabled")
	}
}

func (ptr *QWidget) SetEnabled(vbo bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QWidget) SetEnabledDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetEnabledDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QWidget) SetFixedHeight(h int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFixedHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QWidget) SetFixedSize(s core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFixedSize(ptr.Pointer(), core.PointerFromQSize(s))
	}
}

func (ptr *QWidget) SetFixedSize2(w int, h int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFixedSize2(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)))
	}
}

func (ptr *QWidget) SetFixedWidth(w int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFixedWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

//export callbackQWidget_SetFocus2
func callbackQWidget_SetFocus2(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "setFocus2"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).SetFocus2Default()
	}
}

func (ptr *QWidget) ConnectSetFocus2(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setFocus2"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "setFocus2", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setFocus2", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetFocus2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setFocus2")
	}
}

func (ptr *QWidget) SetFocus2() {
	if ptr.Pointer() != nil {
		C.QWidget_SetFocus2(ptr.Pointer())
	}
}

func (ptr *QWidget) SetFocus2Default() {
	if ptr.Pointer() != nil {
		C.QWidget_SetFocus2Default(ptr.Pointer())
	}
}

func (ptr *QWidget) SetFocus(reason core.Qt__FocusReason) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFocus(ptr.Pointer(), C.longlong(reason))
	}
}

func (ptr *QWidget) SetFocusPolicy(policy core.Qt__FocusPolicy) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFocusPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QWidget) SetFocusProxy(w QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFocusProxy(ptr.Pointer(), PointerFromQWidget(w))
	}
}

func (ptr *QWidget) SetFont(vqf gui.QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetFont(ptr.Pointer(), gui.PointerFromQFont(vqf))
	}
}

func (ptr *QWidget) SetForegroundRole(role gui.QPalette__ColorRole) {
	if ptr.Pointer() != nil {
		C.QWidget_SetForegroundRole(ptr.Pointer(), C.longlong(role))
	}
}

func (ptr *QWidget) SetGeometry(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetGeometry(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

func (ptr *QWidget) SetGeometry2(x int, y int, w int, h int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetGeometry2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)))
	}
}

func (ptr *QWidget) SetGraphicsEffect(effect QGraphicsEffect_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetGraphicsEffect(ptr.Pointer(), PointerFromQGraphicsEffect(effect))
	}
}

//export callbackQWidget_SetHidden
func callbackQWidget_SetHidden(ptr unsafe.Pointer, hidden C.char) {
	if signal := qt.GetSignal(ptr, "setHidden"); signal != nil {
		(*(*func(bool))(signal))(int8(hidden) != 0)
	} else {
		NewQWidgetFromPointer(ptr).SetHiddenDefault(int8(hidden) != 0)
	}
}

func (ptr *QWidget) ConnectSetHidden(f func(hidden bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setHidden"); signal != nil {
			f := func(hidden bool) {
				(*(*func(bool))(signal))(hidden)
				f(hidden)
			}
			qt.ConnectSignal(ptr.Pointer(), "setHidden", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setHidden", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetHidden() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setHidden")
	}
}

func (ptr *QWidget) SetHidden(hidden bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetHidden(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(hidden))))
	}
}

func (ptr *QWidget) SetHiddenDefault(hidden bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetHiddenDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(hidden))))
	}
}

func (ptr *QWidget) SetInputMethodHints(hints core.Qt__InputMethodHint) {
	if ptr.Pointer() != nil {
		C.QWidget_SetInputMethodHints(ptr.Pointer(), C.longlong(hints))
	}
}

func (ptr *QWidget) SetLayout(layout QLayout_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetLayout(ptr.Pointer(), PointerFromQLayout(layout))
	}
}

func (ptr *QWidget) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QWidget_SetLayoutDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QWidget) SetLocale(locale core.QLocale_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetLocale(ptr.Pointer(), core.PointerFromQLocale(locale))
	}
}

func (ptr *QWidget) SetMask(bitmap gui.QBitmap_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMask(ptr.Pointer(), gui.PointerFromQBitmap(bitmap))
	}
}

func (ptr *QWidget) SetMask2(region gui.QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMask2(ptr.Pointer(), gui.PointerFromQRegion(region))
	}
}

func (ptr *QWidget) SetMaximumHeight(maxh int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMaximumHeight(ptr.Pointer(), C.int(int32(maxh)))
	}
}

func (ptr *QWidget) SetMaximumSize(vqs core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMaximumSize(ptr.Pointer(), core.PointerFromQSize(vqs))
	}
}

func (ptr *QWidget) SetMaximumSize2(maxw int, maxh int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMaximumSize2(ptr.Pointer(), C.int(int32(maxw)), C.int(int32(maxh)))
	}
}

func (ptr *QWidget) SetMaximumWidth(maxw int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMaximumWidth(ptr.Pointer(), C.int(int32(maxw)))
	}
}

func (ptr *QWidget) SetMinimumHeight(minh int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMinimumHeight(ptr.Pointer(), C.int(int32(minh)))
	}
}

func (ptr *QWidget) SetMinimumSize(vqs core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMinimumSize(ptr.Pointer(), core.PointerFromQSize(vqs))
	}
}

func (ptr *QWidget) SetMinimumSize2(minw int, minh int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMinimumSize2(ptr.Pointer(), C.int(int32(minw)), C.int(int32(minh)))
	}
}

func (ptr *QWidget) SetMinimumWidth(minw int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMinimumWidth(ptr.Pointer(), C.int(int32(minw)))
	}
}

func (ptr *QWidget) SetMouseTracking(enable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetMouseTracking(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QWidget) SetPalette(vqp gui.QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetPalette(ptr.Pointer(), gui.PointerFromQPalette(vqp))
	}
}

func (ptr *QWidget) SetParent(parent QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetParent(ptr.Pointer(), PointerFromQWidget(parent))
	}
}

func (ptr *QWidget) SetParent2(parent QWidget_ITF, ff core.Qt__WindowType) {
	if ptr.Pointer() != nil {
		C.QWidget_SetParent2(ptr.Pointer(), PointerFromQWidget(parent), C.longlong(ff))
	}
}

func (ptr *QWidget) SetShortcutAutoRepeat(id int, enable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetShortcutAutoRepeat(ptr.Pointer(), C.int(int32(id)), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QWidget) SetShortcutEnabled(id int, enable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetShortcutEnabled(ptr.Pointer(), C.int(int32(id)), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QWidget) SetSizeIncrement(vqs core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetSizeIncrement(ptr.Pointer(), core.PointerFromQSize(vqs))
	}
}

func (ptr *QWidget) SetSizeIncrement2(w int, h int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetSizeIncrement2(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)))
	}
}

func (ptr *QWidget) SetSizePolicy(vqs QSizePolicy_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetSizePolicy(ptr.Pointer(), PointerFromQSizePolicy(vqs))
	}
}

func (ptr *QWidget) SetSizePolicy2(horizontal QSizePolicy__Policy, vertical QSizePolicy__Policy) {
	if ptr.Pointer() != nil {
		C.QWidget_SetSizePolicy2(ptr.Pointer(), C.longlong(horizontal), C.longlong(vertical))
	}
}

func (ptr *QWidget) SetStatusTip(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWidget_SetStatusTip(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QWidget) SetStyle(style QStyle_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetStyle(ptr.Pointer(), PointerFromQStyle(style))
	}
}

//export callbackQWidget_SetStyleSheet
func callbackQWidget_SetStyleSheet(ptr unsafe.Pointer, styleSheet C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "setStyleSheet"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(styleSheet))
	} else {
		NewQWidgetFromPointer(ptr).SetStyleSheetDefault(cGoUnpackString(styleSheet))
	}
}

func (ptr *QWidget) ConnectSetStyleSheet(f func(styleSheet string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setStyleSheet"); signal != nil {
			f := func(styleSheet string) {
				(*(*func(string))(signal))(styleSheet)
				f(styleSheet)
			}
			qt.ConnectSignal(ptr.Pointer(), "setStyleSheet", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setStyleSheet", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetStyleSheet() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setStyleSheet")
	}
}

func (ptr *QWidget) SetStyleSheet(styleSheet string) {
	if ptr.Pointer() != nil {
		var styleSheetC *C.char
		if styleSheet != "" {
			styleSheetC = C.CString(styleSheet)
			defer C.free(unsafe.Pointer(styleSheetC))
		}
		C.QWidget_SetStyleSheet(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: styleSheetC, len: C.longlong(len(styleSheet))})
	}
}

func (ptr *QWidget) SetStyleSheetDefault(styleSheet string) {
	if ptr.Pointer() != nil {
		var styleSheetC *C.char
		if styleSheet != "" {
			styleSheetC = C.CString(styleSheet)
			defer C.free(unsafe.Pointer(styleSheetC))
		}
		C.QWidget_SetStyleSheetDefault(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: styleSheetC, len: C.longlong(len(styleSheet))})
	}
}

func QWidget_SetTabOrder(first QWidget_ITF, second QWidget_ITF) {
	C.QWidget_QWidget_SetTabOrder(PointerFromQWidget(first), PointerFromQWidget(second))
}

func (ptr *QWidget) SetTabOrder(first QWidget_ITF, second QWidget_ITF) {
	C.QWidget_QWidget_SetTabOrder(PointerFromQWidget(first), PointerFromQWidget(second))
}

func (ptr *QWidget) SetTabletTracking(enable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetTabletTracking(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QWidget) SetToolTip(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWidget_SetToolTip(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QWidget) SetToolTipDuration(msec int) {
	if ptr.Pointer() != nil {
		C.QWidget_SetToolTipDuration(ptr.Pointer(), C.int(int32(msec)))
	}
}

func (ptr *QWidget) SetUpdatesEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetUpdatesEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

//export callbackQWidget_SetVisible
func callbackQWidget_SetVisible(ptr unsafe.Pointer, visible C.char) {
	if signal := qt.GetSignal(ptr, "setVisible"); signal != nil {
		(*(*func(bool))(signal))(int8(visible) != 0)
	} else {
		NewQWidgetFromPointer(ptr).SetVisibleDefault(int8(visible) != 0)
	}
}

func (ptr *QWidget) ConnectSetVisible(f func(visible bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setVisible"); signal != nil {
			f := func(visible bool) {
				(*(*func(bool))(signal))(visible)
				f(visible)
			}
			qt.ConnectSignal(ptr.Pointer(), "setVisible", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setVisible", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetVisible() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setVisible")
	}
}

func (ptr *QWidget) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QWidget) SetVisibleDefault(visible bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QWidget) SetWhatsThis(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWidget_SetWhatsThis(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QWidget) SetWindowFilePath(filePath string) {
	if ptr.Pointer() != nil {
		var filePathC *C.char
		if filePath != "" {
			filePathC = C.CString(filePath)
			defer C.free(unsafe.Pointer(filePathC))
		}
		C.QWidget_SetWindowFilePath(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: filePathC, len: C.longlong(len(filePath))})
	}
}

func (ptr *QWidget) SetWindowFlag(flag core.Qt__WindowType, on bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowFlag(ptr.Pointer(), C.longlong(flag), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QWidget) SetWindowFlags(ty core.Qt__WindowType) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowFlags(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QWidget) SetWindowIcon(icon gui.QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowIcon(ptr.Pointer(), gui.PointerFromQIcon(icon))
	}
}

func (ptr *QWidget) SetWindowIconText(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWidget_SetWindowIconText(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QWidget) SetWindowModality(windowModality core.Qt__WindowModality) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowModality(ptr.Pointer(), C.longlong(windowModality))
	}
}

//export callbackQWidget_SetWindowModified
func callbackQWidget_SetWindowModified(ptr unsafe.Pointer, vbo C.char) {
	if signal := qt.GetSignal(ptr, "setWindowModified"); signal != nil {
		(*(*func(bool))(signal))(int8(vbo) != 0)
	} else {
		NewQWidgetFromPointer(ptr).SetWindowModifiedDefault(int8(vbo) != 0)
	}
}

func (ptr *QWidget) ConnectSetWindowModified(f func(vbo bool)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setWindowModified"); signal != nil {
			f := func(vbo bool) {
				(*(*func(bool))(signal))(vbo)
				f(vbo)
			}
			qt.ConnectSignal(ptr.Pointer(), "setWindowModified", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setWindowModified", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetWindowModified() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setWindowModified")
	}
}

func (ptr *QWidget) SetWindowModified(vbo bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowModified(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QWidget) SetWindowModifiedDefault(vbo bool) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowModifiedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QWidget) SetWindowOpacity(level float64) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowOpacity(ptr.Pointer(), C.double(level))
	}
}

func (ptr *QWidget) SetWindowRole(role string) {
	if ptr.Pointer() != nil {
		var roleC *C.char
		if role != "" {
			roleC = C.CString(role)
			defer C.free(unsafe.Pointer(roleC))
		}
		C.QWidget_SetWindowRole(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: roleC, len: C.longlong(len(role))})
	}
}

func (ptr *QWidget) SetWindowState(windowState core.Qt__WindowState) {
	if ptr.Pointer() != nil {
		C.QWidget_SetWindowState(ptr.Pointer(), C.longlong(windowState))
	}
}

//export callbackQWidget_SetWindowTitle
func callbackQWidget_SetWindowTitle(ptr unsafe.Pointer, vqs C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "setWindowTitle"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(vqs))
	} else {
		NewQWidgetFromPointer(ptr).SetWindowTitleDefault(cGoUnpackString(vqs))
	}
}

func (ptr *QWidget) ConnectSetWindowTitle(f func(vqs string)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "setWindowTitle"); signal != nil {
			f := func(vqs string) {
				(*(*func(string))(signal))(vqs)
				f(vqs)
			}
			qt.ConnectSignal(ptr.Pointer(), "setWindowTitle", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "setWindowTitle", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSetWindowTitle() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "setWindowTitle")
	}
}

func (ptr *QWidget) SetWindowTitle(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWidget_SetWindowTitle(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QWidget) SetWindowTitleDefault(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC *C.char
		if vqs != "" {
			vqsC = C.CString(vqs)
			defer C.free(unsafe.Pointer(vqsC))
		}
		C.QWidget_SetWindowTitleDefault(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: vqsC, len: C.longlong(len(vqs))})
	}
}

func (ptr *QWidget) SetupUi(widget QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_SetupUi(ptr.Pointer(), PointerFromQWidget(widget))
	}
}

//export callbackQWidget_Show
func callbackQWidget_Show(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "show"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).ShowDefault()
	}
}

func (ptr *QWidget) ConnectShow(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "show"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "show", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "show", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectShow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "show")
	}
}

func (ptr *QWidget) Show() {
	if ptr.Pointer() != nil {
		C.QWidget_Show(ptr.Pointer())
	}
}

func (ptr *QWidget) ShowDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowDefault(ptr.Pointer())
	}
}

//export callbackQWidget_ShowEvent
func callbackQWidget_ShowEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "showEvent"); signal != nil {
		(*(*func(*gui.QShowEvent))(signal))(gui.NewQShowEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).ShowEventDefault(gui.NewQShowEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectShowEvent(f func(event *gui.QShowEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "showEvent"); signal != nil {
			f := func(event *gui.QShowEvent) {
				(*(*func(*gui.QShowEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "showEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "showEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectShowEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "showEvent")
	}
}

func (ptr *QWidget) ShowEvent(event gui.QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ShowEvent(ptr.Pointer(), gui.PointerFromQShowEvent(event))
	}
}

func (ptr *QWidget) ShowEventDefault(event gui.QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ShowEventDefault(ptr.Pointer(), gui.PointerFromQShowEvent(event))
	}
}

//export callbackQWidget_ShowFullScreen
func callbackQWidget_ShowFullScreen(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "showFullScreen"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).ShowFullScreenDefault()
	}
}

func (ptr *QWidget) ConnectShowFullScreen(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "showFullScreen"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "showFullScreen", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "showFullScreen", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectShowFullScreen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "showFullScreen")
	}
}

func (ptr *QWidget) ShowFullScreen() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowFullScreen(ptr.Pointer())
	}
}

func (ptr *QWidget) ShowFullScreenDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowFullScreenDefault(ptr.Pointer())
	}
}

//export callbackQWidget_ShowMaximized
func callbackQWidget_ShowMaximized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "showMaximized"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).ShowMaximizedDefault()
	}
}

func (ptr *QWidget) ConnectShowMaximized(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "showMaximized"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "showMaximized", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "showMaximized", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectShowMaximized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "showMaximized")
	}
}

func (ptr *QWidget) ShowMaximized() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowMaximized(ptr.Pointer())
	}
}

func (ptr *QWidget) ShowMaximizedDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowMaximizedDefault(ptr.Pointer())
	}
}

//export callbackQWidget_ShowMinimized
func callbackQWidget_ShowMinimized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "showMinimized"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).ShowMinimizedDefault()
	}
}

func (ptr *QWidget) ConnectShowMinimized(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "showMinimized"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "showMinimized", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "showMinimized", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectShowMinimized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "showMinimized")
	}
}

func (ptr *QWidget) ShowMinimized() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowMinimized(ptr.Pointer())
	}
}

func (ptr *QWidget) ShowMinimizedDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowMinimizedDefault(ptr.Pointer())
	}
}

//export callbackQWidget_ShowNormal
func callbackQWidget_ShowNormal(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "showNormal"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).ShowNormalDefault()
	}
}

func (ptr *QWidget) ConnectShowNormal(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "showNormal"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "showNormal", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "showNormal", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectShowNormal() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "showNormal")
	}
}

func (ptr *QWidget) ShowNormal() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowNormal(ptr.Pointer())
	}
}

func (ptr *QWidget) ShowNormalDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_ShowNormalDefault(ptr.Pointer())
	}
}

func (ptr *QWidget) StackUnder(w QWidget_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_StackUnder(ptr.Pointer(), PointerFromQWidget(w))
	}
}

//export callbackQWidget_TabletEvent
func callbackQWidget_TabletEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "tabletEvent"); signal != nil {
		(*(*func(*gui.QTabletEvent))(signal))(gui.NewQTabletEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).TabletEventDefault(gui.NewQTabletEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectTabletEvent(f func(event *gui.QTabletEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "tabletEvent"); signal != nil {
			f := func(event *gui.QTabletEvent) {
				(*(*func(*gui.QTabletEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "tabletEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "tabletEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectTabletEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "tabletEvent")
	}
}

func (ptr *QWidget) TabletEvent(event gui.QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_TabletEvent(ptr.Pointer(), gui.PointerFromQTabletEvent(event))
	}
}

func (ptr *QWidget) TabletEventDefault(event gui.QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_TabletEventDefault(ptr.Pointer(), gui.PointerFromQTabletEvent(event))
	}
}

func (ptr *QWidget) UngrabGesture(gesture core.Qt__GestureType) {
	if ptr.Pointer() != nil {
		C.QWidget_UngrabGesture(ptr.Pointer(), C.longlong(gesture))
	}
}

func (ptr *QWidget) UnsetCursor() {
	if ptr.Pointer() != nil {
		C.QWidget_UnsetCursor(ptr.Pointer())
	}
}

func (ptr *QWidget) UnsetLayoutDirection() {
	if ptr.Pointer() != nil {
		C.QWidget_UnsetLayoutDirection(ptr.Pointer())
	}
}

func (ptr *QWidget) UnsetLocale() {
	if ptr.Pointer() != nil {
		C.QWidget_UnsetLocale(ptr.Pointer())
	}
}

//export callbackQWidget_Update
func callbackQWidget_Update(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "update"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).UpdateDefault()
	}
}

func (ptr *QWidget) ConnectUpdate(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "update"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "update", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "update")
	}
}

func (ptr *QWidget) Update() {
	if ptr.Pointer() != nil {
		C.QWidget_Update(ptr.Pointer())
	}
}

func (ptr *QWidget) UpdateDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_UpdateDefault(ptr.Pointer())
	}
}

func (ptr *QWidget) Update3(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_Update3(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QWidget) Update4(rgn gui.QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_Update4(ptr.Pointer(), gui.PointerFromQRegion(rgn))
	}
}

func (ptr *QWidget) Update2(x int, y int, w int, h int) {
	if ptr.Pointer() != nil {
		C.QWidget_Update2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)))
	}
}

func (ptr *QWidget) UpdateGeometry() {
	if ptr.Pointer() != nil {
		C.QWidget_UpdateGeometry(ptr.Pointer())
	}
}

//export callbackQWidget_UpdateMicroFocus
func callbackQWidget_UpdateMicroFocus(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "updateMicroFocus"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).UpdateMicroFocusDefault()
	}
}

func (ptr *QWidget) ConnectUpdateMicroFocus(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "updateMicroFocus"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "updateMicroFocus", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "updateMicroFocus", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectUpdateMicroFocus() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "updateMicroFocus")
	}
}

func (ptr *QWidget) UpdateMicroFocus() {
	if ptr.Pointer() != nil {
		C.QWidget_UpdateMicroFocus(ptr.Pointer())
	}
}

func (ptr *QWidget) UpdateMicroFocusDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_UpdateMicroFocusDefault(ptr.Pointer())
	}
}

//export callbackQWidget_WheelEvent
func callbackQWidget_WheelEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "wheelEvent"); signal != nil {
		(*(*func(*gui.QWheelEvent))(signal))(gui.NewQWheelEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).WheelEventDefault(gui.NewQWheelEventFromPointer(event))
	}
}

func (ptr *QWidget) ConnectWheelEvent(f func(event *gui.QWheelEvent)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "wheelEvent"); signal != nil {
			f := func(event *gui.QWheelEvent) {
				(*(*func(*gui.QWheelEvent))(signal))(event)
				f(event)
			}
			qt.ConnectSignal(ptr.Pointer(), "wheelEvent", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "wheelEvent", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "wheelEvent")
	}
}

func (ptr *QWidget) WheelEvent(event gui.QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_WheelEvent(ptr.Pointer(), gui.PointerFromQWheelEvent(event))
	}
}

func (ptr *QWidget) WheelEventDefault(event gui.QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_WheelEventDefault(ptr.Pointer(), gui.PointerFromQWheelEvent(event))
	}
}

//export callbackQWidget_WindowIconChanged
func callbackQWidget_WindowIconChanged(ptr unsafe.Pointer, icon unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "windowIconChanged"); signal != nil {
		(*(*func(*gui.QIcon))(signal))(gui.NewQIconFromPointer(icon))
	}

}

func (ptr *QWidget) ConnectWindowIconChanged(f func(icon *gui.QIcon)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "windowIconChanged") {
			C.QWidget_ConnectWindowIconChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "windowIconChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "windowIconChanged"); signal != nil {
			f := func(icon *gui.QIcon) {
				(*(*func(*gui.QIcon))(signal))(icon)
				f(icon)
			}
			qt.ConnectSignal(ptr.Pointer(), "windowIconChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "windowIconChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectWindowIconChanged() {
	if ptr.Pointer() != nil {
		C.QWidget_DisconnectWindowIconChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "windowIconChanged")
	}
}

func (ptr *QWidget) WindowIconChanged(icon gui.QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_WindowIconChanged(ptr.Pointer(), gui.PointerFromQIcon(icon))
	}
}

//export callbackQWidget_WindowTitleChanged
func callbackQWidget_WindowTitleChanged(ptr unsafe.Pointer, title C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "windowTitleChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(title))
	}

}

func (ptr *QWidget) ConnectWindowTitleChanged(f func(title string)) {
	if ptr.Pointer() != nil {

		if !qt.ExistsSignal(ptr.Pointer(), "windowTitleChanged") {
			C.QWidget_ConnectWindowTitleChanged(ptr.Pointer(), C.longlong(qt.ConnectionType(ptr.Pointer(), "windowTitleChanged")))
		}

		if signal := qt.LendSignal(ptr.Pointer(), "windowTitleChanged"); signal != nil {
			f := func(title string) {
				(*(*func(string))(signal))(title)
				f(title)
			}
			qt.ConnectSignal(ptr.Pointer(), "windowTitleChanged", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "windowTitleChanged", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectWindowTitleChanged() {
	if ptr.Pointer() != nil {
		C.QWidget_DisconnectWindowTitleChanged(ptr.Pointer())
		qt.DisconnectSignal(ptr.Pointer(), "windowTitleChanged")
	}
}

func (ptr *QWidget) WindowTitleChanged(title string) {
	if ptr.Pointer() != nil {
		var titleC *C.char
		if title != "" {
			titleC = C.CString(title)
			defer C.free(unsafe.Pointer(titleC))
		}
		C.QWidget_WindowTitleChanged(ptr.Pointer(), C.struct_QtWidgets_PackedString{data: titleC, len: C.longlong(len(title))})
	}
}

//export callbackQWidget_DestroyQWidget
func callbackQWidget_DestroyQWidget(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "~QWidget"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).DestroyQWidgetDefault()
	}
}

func (ptr *QWidget) ConnectDestroyQWidget(f func()) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "~QWidget"); signal != nil {
			f := func() {
				(*(*func())(signal))()
				f()
			}
			qt.ConnectSignal(ptr.Pointer(), "~QWidget", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "~QWidget", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectDestroyQWidget() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "~QWidget")
	}
}

func (ptr *QWidget) DestroyQWidget() {
	if ptr.Pointer() != nil {
		C.QWidget_DestroyQWidget(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QWidget) DestroyQWidgetDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_DestroyQWidgetDefault(ptr.Pointer())
		ptr.SetPointer(nil)
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QWidget) BackingStore() *gui.QBackingStore {
	if ptr.Pointer() != nil {
		return gui.NewQBackingStoreFromPointer(C.QWidget_BackingStore(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWidget) SaveGeometry() *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QWidget_SaveGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Cursor() *gui.QCursor {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQCursorFromPointer(C.QWidget_Cursor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QCursor).DestroyQCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) FontInfo() *gui.QFontInfo {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontInfoFromPointer(C.QWidget_FontInfo(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFontInfo).DestroyQFontInfo)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) FontMetrics() *gui.QFontMetrics {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQFontMetricsFromPointer(C.QWidget_FontMetrics(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QFontMetrics).DestroyQFontMetrics)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) GraphicsEffect() *QGraphicsEffect {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsEffectFromPointer(C.QWidget_GraphicsEffect(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) GraphicsProxyWidget() *QGraphicsProxyWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQGraphicsProxyWidgetFromPointer(C.QWidget_GraphicsProxyWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) WindowIcon() *gui.QIcon {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQIconFromPointer(C.QWidget_WindowIcon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Layout() *QLayout {
	if ptr.Pointer() != nil {
		tmpValue := NewQLayoutFromPointer(C.QWidget_Layout(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Actions() []*QAction {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtWidgets_PackedList) []*QAction {
			out := make([]*QAction, int(l.len))
			tmpList := NewQWidgetFromPointer(l.data)
			for i := 0; i < len(out); i++ {
				out[i] = tmpList.__actions_atList(i)
			}
			return out
		}(C.QWidget_Actions(ptr.Pointer()))
	}
	return make([]*QAction, 0)
}

func (ptr *QWidget) Locale() *core.QLocale {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQLocaleFromPointer(C.QWidget_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ContentsMargins() *core.QMargins {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQMarginsFromPointer(C.QWidget_ContentsMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

//export callbackQWidget_PaintEngine
func callbackQWidget_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "paintEngine"); signal != nil {
		return gui.PointerFromQPaintEngine((*(*func() *gui.QPaintEngine)(signal))())
	}

	return gui.PointerFromQPaintEngine(NewQWidgetFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QWidget) ConnectPaintEngine(f func() *gui.QPaintEngine) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "paintEngine"); signal != nil {
			f := func() *gui.QPaintEngine {
				(*(*func() *gui.QPaintEngine)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "paintEngine", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "paintEngine", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "paintEngine")
	}
}

func (ptr *QWidget) PaintEngine() *gui.QPaintEngine {
	if ptr.Pointer() != nil {
		return gui.NewQPaintEngineFromPointer(C.QWidget_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWidget) PaintEngineDefault() *gui.QPaintEngine {
	if ptr.Pointer() != nil {
		return gui.NewQPaintEngineFromPointer(C.QWidget_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWidget) BackgroundRole() gui.QPalette__ColorRole {
	if ptr.Pointer() != nil {
		return gui.QPalette__ColorRole(C.QWidget_BackgroundRole(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) ForegroundRole() gui.QPalette__ColorRole {
	if ptr.Pointer() != nil {
		return gui.QPalette__ColorRole(C.QWidget_ForegroundRole(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) MapFrom(parent QWidget_ITF, pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QWidget_MapFrom(ptr.Pointer(), PointerFromQWidget(parent), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MapFromGlobal(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QWidget_MapFromGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MapFromParent(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QWidget_MapFromParent(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MapTo(parent QWidget_ITF, pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QWidget_MapTo(ptr.Pointer(), PointerFromQWidget(parent), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MapToGlobal(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QWidget_MapToGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MapToParent(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QWidget_MapToParent(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQPointFromPointer(C.QWidget_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ChildrenRect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QWidget_ChildrenRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ContentsRect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QWidget_ContentsRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) FrameGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QWidget_FrameGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) NormalGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QWidget_NormalGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQRectFromPointer(C.QWidget_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ChildrenRegion() *gui.QRegion {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQRegionFromPointer(C.QWidget_ChildrenRegion(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Mask() *gui.QRegion {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQRegionFromPointer(C.QWidget_Mask(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) VisibleRegion() *gui.QRegion {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQRegionFromPointer(C.QWidget_VisibleRegion(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*gui.QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) BaseSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_BaseSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) FrameSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_FrameSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MaximumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MinimumSize() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQWidget_MinimumSizeHint
func callbackQWidget_MinimumSizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "minimumSizeHint"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQWidgetFromPointer(ptr).MinimumSizeHintDefault())
}

func (ptr *QWidget) ConnectMinimumSizeHint(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "minimumSizeHint"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "minimumSizeHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "minimumSizeHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMinimumSizeHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "minimumSizeHint")
	}
}

func (ptr *QWidget) MinimumSizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_MinimumSizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) MinimumSizeHintDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_MinimumSizeHintDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Size() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQWidget_SizeHint
func callbackQWidget_SizeHint(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "sizeHint"); signal != nil {
		return core.PointerFromQSize((*(*func() *core.QSize)(signal))())
	}

	return core.PointerFromQSize(NewQWidgetFromPointer(ptr).SizeHintDefault())
}

func (ptr *QWidget) ConnectSizeHint(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "sizeHint"); signal != nil {
			f := func() *core.QSize {
				(*(*func() *core.QSize)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "sizeHint", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectSizeHint() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "sizeHint")
	}
}

func (ptr *QWidget) SizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) SizeHintDefault() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_SizeHintDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) SizeIncrement() *core.QSize {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQSizeFromPointer(C.QWidget_SizeIncrement(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) SizePolicy() *QSizePolicy {
	if ptr.Pointer() != nil {
		tmpValue := NewQSizePolicyFromPointer(C.QWidget_SizePolicy(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizePolicy).DestroyQSizePolicy)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) AccessibleDescription() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_AccessibleDescription(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) AccessibleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_AccessibleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) StatusTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_StatusTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) StyleSheet() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_StyleSheet(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) ToolTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_ToolTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) WhatsThis() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_WhatsThis(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) WindowFilePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_WindowFilePath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) WindowIconText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_WindowIconText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) WindowRole() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_WindowRole(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) WindowTitle() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWidget_WindowTitle(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWidget) Style() *QStyle {
	if ptr.Pointer() != nil {
		tmpValue := NewQStyleFromPointer(C.QWidget_Style(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQWidget_InputMethodQuery
func callbackQWidget_InputMethodQuery(ptr unsafe.Pointer, query C.longlong) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "inputMethodQuery"); signal != nil {
		return core.PointerFromQVariant((*(*func(core.Qt__InputMethodQuery) *core.QVariant)(signal))(core.Qt__InputMethodQuery(query)))
	}

	return core.PointerFromQVariant(NewQWidgetFromPointer(ptr).InputMethodQueryDefault(core.Qt__InputMethodQuery(query)))
}

func (ptr *QWidget) ConnectInputMethodQuery(f func(query core.Qt__InputMethodQuery) *core.QVariant) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "inputMethodQuery"); signal != nil {
			f := func(query core.Qt__InputMethodQuery) *core.QVariant {
				(*(*func(core.Qt__InputMethodQuery) *core.QVariant)(signal))(query)
				return f(query)
			}
			qt.ConnectSignal(ptr.Pointer(), "inputMethodQuery", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "inputMethodQuery", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectInputMethodQuery() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "inputMethodQuery")
	}
}

func (ptr *QWidget) InputMethodQuery(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QWidget_InputMethodQuery(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) InputMethodQueryDefault(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQVariantFromPointer(C.QWidget_InputMethodQueryDefault(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ChildAt2(p core.QPoint_ITF) *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_ChildAt2(ptr.Pointer(), core.PointerFromQPoint(p)))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ChildAt(x int, y int) *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_ChildAt(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) FocusProxy() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_FocusProxy(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) FocusWidget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_FocusWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) NativeParentWidget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_NativeParentWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) NextInFocusChain() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_NextInFocusChain(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ParentWidget() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_ParentWidget(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) PreviousInFocusChain() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_PreviousInFocusChain(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) Window() *QWidget {
	if ptr.Pointer() != nil {
		tmpValue := NewQWidgetFromPointer(C.QWidget_Window(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) WindowHandle() *gui.QWindow {
	if ptr.Pointer() != nil {
		tmpValue := gui.NewQWindowFromPointer(C.QWidget_WindowHandle(ptr.Pointer()))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) ContextMenuPolicy() core.Qt__ContextMenuPolicy {
	if ptr.Pointer() != nil {
		return core.Qt__ContextMenuPolicy(C.QWidget_ContextMenuPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) FocusPolicy() core.Qt__FocusPolicy {
	if ptr.Pointer() != nil {
		return core.Qt__FocusPolicy(C.QWidget_FocusPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) InputMethodHints() core.Qt__InputMethodHint {
	if ptr.Pointer() != nil {
		return core.Qt__InputMethodHint(C.QWidget_InputMethodHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) LayoutDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QWidget_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) WindowFlags() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWidget_WindowFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) WindowModality() core.Qt__WindowModality {
	if ptr.Pointer() != nil {
		return core.Qt__WindowModality(C.QWidget_WindowModality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) WindowState() core.Qt__WindowState {
	if ptr.Pointer() != nil {
		return core.Qt__WindowState(C.QWidget_WindowState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) WindowType() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWidget_WindowType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) EffectiveWinId() uintptr {
	if ptr.Pointer() != nil {
		return uintptr(C.QWidget_EffectiveWinId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) WinId() uintptr {
	if ptr.Pointer() != nil {
		return uintptr(C.QWidget_WinId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) AcceptDrops() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_AcceptDrops(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) AutoFillBackground() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_AutoFillBackground(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) HasEditFocus() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_HasEditFocus(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) HasFocus() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_HasFocus(ptr.Pointer())) != 0
	}
	return false
}

//export callbackQWidget_HasHeightForWidth
func callbackQWidget_HasHeightForWidth(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "hasHeightForWidth"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func() bool)(signal))())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWidgetFromPointer(ptr).HasHeightForWidthDefault())))
}

func (ptr *QWidget) ConnectHasHeightForWidth(f func() bool) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "hasHeightForWidth"); signal != nil {
			f := func() bool {
				(*(*func() bool)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "hasHeightForWidth", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "hasHeightForWidth", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectHasHeightForWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "hasHeightForWidth")
	}
}

func (ptr *QWidget) HasHeightForWidth() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_HasHeightForWidth(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) HasHeightForWidthDefault() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_HasHeightForWidthDefault(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) HasMouseTracking() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_HasMouseTracking(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) HasTabletTracking() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_HasTabletTracking(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsActiveWindow() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsActiveWindow(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsAncestorOf(child QWidget_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsAncestorOf(ptr.Pointer(), PointerFromQWidget(child))) != 0
	}
	return false
}

func (ptr *QWidget) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsEnabledTo(ancestor QWidget_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsEnabledTo(ptr.Pointer(), PointerFromQWidget(ancestor))) != 0
	}
	return false
}

func (ptr *QWidget) IsFullScreen() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsFullScreen(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsHidden() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsHidden(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsMaximized() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsMaximized(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsMinimized() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsMinimized(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsModal() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsModal(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsVisible() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsVisible(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsVisibleTo(ancestor QWidget_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsVisibleTo(ptr.Pointer(), PointerFromQWidget(ancestor))) != 0
	}
	return false
}

func (ptr *QWidget) IsWindow() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsWindow(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) IsWindowModified() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_IsWindowModified(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) TestAttribute(attribute core.Qt__WidgetAttribute) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_TestAttribute(ptr.Pointer(), C.longlong(attribute))) != 0
	}
	return false
}

func (ptr *QWidget) UnderMouse() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_UnderMouse(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) UpdatesEnabled() bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_UpdatesEnabled(ptr.Pointer())) != 0
	}
	return false
}

func (ptr *QWidget) Font() *gui.QFont {
	if ptr.Pointer() != nil {
		return gui.NewQFontFromPointer(C.QWidget_Font(ptr.Pointer()))
	}
	return nil
}

//export callbackQWidget_MetaObject
func callbackQWidget_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {
	if signal := qt.GetSignal(ptr, "metaObject"); signal != nil {
		return core.PointerFromQMetaObject((*(*func() *core.QMetaObject)(signal))())
	}

	return core.PointerFromQMetaObject(NewQWidgetFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QWidget) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "metaObject"); signal != nil {
			f := func() *core.QMetaObject {
				(*(*func() *core.QMetaObject)(signal))()
				return f()
			}
			qt.ConnectSignal(ptr.Pointer(), "metaObject", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "metaObject", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "metaObject")
	}
}

func (ptr *QWidget) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWidget_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWidget) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWidget_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWidget) Palette() *gui.QPalette {
	if ptr.Pointer() != nil {
		return gui.NewQPaletteFromPointer(C.QWidget_Palette(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWidget) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QWidget_Geometry(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWidget) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_Height(ptr.Pointer())))
	}
	return 0
}

//export callbackQWidget_HeightForWidth
func callbackQWidget_HeightForWidth(ptr unsafe.Pointer, w C.int) C.int {
	if signal := qt.GetSignal(ptr, "heightForWidth"); signal != nil {
		return C.int(int32((*(*func(int) int)(signal))(int(int32(w)))))
	}

	return C.int(int32(NewQWidgetFromPointer(ptr).HeightForWidthDefault(int(int32(w)))))
}

func (ptr *QWidget) ConnectHeightForWidth(f func(w int) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "heightForWidth"); signal != nil {
			f := func(w int) int {
				(*(*func(int) int)(signal))(w)
				return f(w)
			}
			qt.ConnectSignal(ptr.Pointer(), "heightForWidth", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "heightForWidth", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectHeightForWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "heightForWidth")
	}
}

func (ptr *QWidget) HeightForWidth(w int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_HeightForWidth(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

func (ptr *QWidget) HeightForWidthDefault(w int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_HeightForWidthDefault(ptr.Pointer(), C.int(int32(w)))))
	}
	return 0
}

func (ptr *QWidget) MaximumHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_MaximumHeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWidget) MaximumWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_MaximumWidth(ptr.Pointer())))
	}
	return 0
}

//export callbackQWidget_Metric
func callbackQWidget_Metric(ptr unsafe.Pointer, m C.longlong) C.int {
	if signal := qt.GetSignal(ptr, "metric"); signal != nil {
		return C.int(int32((*(*func(gui.QPaintDevice__PaintDeviceMetric) int)(signal))(gui.QPaintDevice__PaintDeviceMetric(m))))
	}

	return C.int(int32(NewQWidgetFromPointer(ptr).MetricDefault(gui.QPaintDevice__PaintDeviceMetric(m))))
}

func (ptr *QWidget) ConnectMetric(f func(m gui.QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "metric"); signal != nil {
			f := func(m gui.QPaintDevice__PaintDeviceMetric) int {
				(*(*func(gui.QPaintDevice__PaintDeviceMetric) int)(signal))(m)
				return f(m)
			}
			qt.ConnectSignal(ptr.Pointer(), "metric", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "metric", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "metric")
	}
}

func (ptr *QWidget) Metric(m gui.QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_Metric(ptr.Pointer(), C.longlong(m))))
	}
	return 0
}

func (ptr *QWidget) MetricDefault(m gui.QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_MetricDefault(ptr.Pointer(), C.longlong(m))))
	}
	return 0
}

func (ptr *QWidget) MinimumHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_MinimumHeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWidget) MinimumWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_MinimumWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWidget) ToolTipDuration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_ToolTipDuration(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWidget) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWidget) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWidget) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWidget_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWidget) WindowOpacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QWidget_WindowOpacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWidget) EnsurePolished() {
	if ptr.Pointer() != nil {
		C.QWidget_EnsurePolished(ptr.Pointer())
	}
}

func (ptr *QWidget) GetContentsMargins(left int, top int, right int, bottom int) {
	if ptr.Pointer() != nil {
		C.QWidget_GetContentsMargins(ptr.Pointer(), C.int(int32(left)), C.int(int32(top)), C.int(int32(right)), C.int(int32(bottom)))
	}
}

//export callbackQWidget_InitPainter
func callbackQWidget_InitPainter(ptr unsafe.Pointer, painter unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "initPainter"); signal != nil {
		(*(*func(*gui.QPainter))(signal))(gui.NewQPainterFromPointer(painter))
	} else {
		NewQWidgetFromPointer(ptr).InitPainterDefault(gui.NewQPainterFromPointer(painter))
	}
}

func (ptr *QWidget) ConnectInitPainter(f func(painter *gui.QPainter)) {
	if ptr.Pointer() != nil {

		if signal := qt.LendSignal(ptr.Pointer(), "initPainter"); signal != nil {
			f := func(painter *gui.QPainter) {
				(*(*func(*gui.QPainter))(signal))(painter)
				f(painter)
			}
			qt.ConnectSignal(ptr.Pointer(), "initPainter", unsafe.Pointer(&f))
		} else {
			qt.ConnectSignal(ptr.Pointer(), "initPainter", unsafe.Pointer(&f))
		}
	}
}

func (ptr *QWidget) DisconnectInitPainter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(ptr.Pointer(), "initPainter")
	}
}

func (ptr *QWidget) InitPainter(painter gui.QPainter_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_InitPainter(ptr.Pointer(), gui.PointerFromQPainter(painter))
	}
}

func (ptr *QWidget) InitPainterDefault(painter gui.QPainter_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_InitPainterDefault(ptr.Pointer(), gui.PointerFromQPainter(painter))
	}
}

func (ptr *QWidget) __addActions_actions_atList(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QWidget___addActions_actions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __addActions_actions_setList(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___addActions_actions_setList(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QWidget) __addActions_actions_newList() unsafe.Pointer {
	return C.QWidget___addActions_actions_newList(ptr.Pointer())
}

func (ptr *QWidget) __insertActions_actions_atList(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QWidget___insertActions_actions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __insertActions_actions_setList(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___insertActions_actions_setList(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QWidget) __insertActions_actions_newList() unsafe.Pointer {
	return C.QWidget___insertActions_actions_newList(ptr.Pointer())
}

func (ptr *QWidget) __actions_atList(i int) *QAction {
	if ptr.Pointer() != nil {
		tmpValue := NewQActionFromPointer(C.QWidget___actions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __actions_setList(i QAction_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___actions_setList(ptr.Pointer(), PointerFromQAction(i))
	}
}

func (ptr *QWidget) __actions_newList() unsafe.Pointer {
	return C.QWidget___actions_newList(ptr.Pointer())
}

func (ptr *QWidget) __dynamicPropertyNames_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQByteArrayFromPointer(C.QWidget___dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __dynamicPropertyNames_setList(i core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___dynamicPropertyNames_setList(ptr.Pointer(), core.PointerFromQByteArray(i))
	}
}

func (ptr *QWidget) __dynamicPropertyNames_newList() unsafe.Pointer {
	return C.QWidget___dynamicPropertyNames_newList(ptr.Pointer())
}

func (ptr *QWidget) __findChildren_atList2(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QWidget___findChildren_atList2(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __findChildren_setList2(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___findChildren_setList2(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWidget) __findChildren_newList2() unsafe.Pointer {
	return C.QWidget___findChildren_newList2(ptr.Pointer())
}

func (ptr *QWidget) __findChildren_atList3(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QWidget___findChildren_atList3(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __findChildren_setList3(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___findChildren_setList3(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWidget) __findChildren_newList3() unsafe.Pointer {
	return C.QWidget___findChildren_newList3(ptr.Pointer())
}

func (ptr *QWidget) __findChildren_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QWidget___findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __findChildren_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___findChildren_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWidget) __findChildren_newList() unsafe.Pointer {
	return C.QWidget___findChildren_newList(ptr.Pointer())
}

func (ptr *QWidget) __children_atList(i int) *core.QObject {
	if ptr.Pointer() != nil {
		tmpValue := core.NewQObjectFromPointer(C.QWidget___children_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(tmpValue.Pointer(), "destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWidget) __children_setList(i core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget___children_setList(ptr.Pointer(), core.PointerFromQObject(i))
	}
}

func (ptr *QWidget) __children_newList() unsafe.Pointer {
	return C.QWidget___children_newList(ptr.Pointer())
}

//export callbackQWidget_EventFilter
func callbackQWidget_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {
	if signal := qt.GetSignal(ptr, "eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt((*(*func(*core.QObject, *core.QEvent) bool)(signal))(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWidgetFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QWidget) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

func (ptr *QWidget) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return int8(C.QWidget_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event))) != 0
	}
	return false
}

//export callbackQWidget_ChildEvent
func callbackQWidget_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "childEvent"); signal != nil {
		(*(*func(*core.QChildEvent))(signal))(core.NewQChildEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QWidget) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QWidget) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQWidget_ConnectNotify
func callbackQWidget_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "connectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWidgetFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWidget) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWidget) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWidget_CustomEvent
func callbackQWidget_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "customEvent"); signal != nil {
		(*(*func(*core.QEvent))(signal))(core.NewQEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QWidget) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWidget) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQWidget_DeleteLater
func callbackQWidget_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "deleteLater"); signal != nil {
		(*(*func())(signal))()
	} else {
		NewQWidgetFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QWidget) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QWidget_DeleteLater(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

func (ptr *QWidget) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QWidget_DeleteLaterDefault(ptr.Pointer())
		runtime.SetFinalizer(ptr, nil)
	}
}

//export callbackQWidget_Destroyed
func callbackQWidget_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "destroyed"); signal != nil {
		(*(*func(*core.QObject))(signal))(core.NewQObjectFromPointer(obj))
	}

}

//export callbackQWidget_DisconnectNotify
func callbackQWidget_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "disconnectNotify"); signal != nil {
		(*(*func(*core.QMetaMethod))(signal))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWidgetFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWidget) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWidget) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWidget_ObjectNameChanged
func callbackQWidget_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtWidgets_PackedString) {
	if signal := qt.GetSignal(ptr, "objectNameChanged"); signal != nil {
		(*(*func(string))(signal))(cGoUnpackString(objectName))
	}

}

//export callbackQWidget_TimerEvent
func callbackQWidget_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {
	if signal := qt.GetSignal(ptr, "timerEvent"); signal != nil {
		(*(*func(*core.QTimerEvent))(signal))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQWidgetFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QWidget) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QWidget) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWidget_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//go:generate stringer -type=QWizard__WizardButton
//QWizard::WizardButton
type QWizard__WizardButton int64

const (
	QWizard__BackButton       QWizard__WizardButton = QWizard__WizardButton(0)
	QWizard__NextButton       QWizard__WizardButton = QWizard__WizardButton(1)
	QWizard__CommitButton     QWizard__WizardButton = QWizard__WizardButton(2)
	QWizard__FinishButton     QWizard__WizardButton = QWizard__WizardButton(3)
	QWizard__CancelButton     QWizard__WizardButton = QWizard__WizardButton(4)
	QWizard__HelpButton       QWizard__WizardButton = QWizard__WizardButton(5)
	QWizard__CustomButton1    QWizard__WizardButton = QWizard__WizardButton(6)
	QWizard__CustomButton2    QWizard__WizardButton = QWizard__WizardButton(7)
	QWizard__CustomButton3    QWizard__WizardButton = QWizard__WizardButton(8)
	QWizard__Stretch          QWizard__WizardButton = QWizard__WizardButton(9)
	QWizard__NoButton         QWizard__WizardButton = QWizard__WizardButton(-1)
	QWizard__NStandardButtons QWizard__WizardButton = QWizard__WizardButton(6)
	QWizard__NButtons         QWizard__WizardButton = QWizard__WizardButton(9)
)

//go:generate stringer -type=QWizard__WizardOption
//QWizard::WizardOption
type QWizard__WizardOption int64

const (
	QWizard__IndependentPages             QWizard__WizardOption = QWizard__WizardOption(0x00000001)
	QWizard__IgnoreSubTitles              QWizard__WizardOption = QWizard__WizardOption(0x00000002)
	QWizard__ExtendedWatermarkPixmap      QWizard__WizardOption = QWizard__WizardOption(0x00000004)
	QWizard__NoDefaultButton              QWizard__WizardOption = QWizard__WizardOption(0x00000008)
	QWizard__NoBackButtonOnStartPage      QWizard__WizardOption = QWizard__WizardOption(0x00000010)
	QWizard__NoBackButtonOnLastPage       QWizard__WizardOption = QWizard__WizardOption(0x00000020)
	QWizard__DisabledBackButtonOnLastPage QWizard__WizardOption = QWizard__WizardOption(0x00000040)
	QWizard__HaveNextButtonOnLastPage     QWizard__WizardOption = QWizard__WizardOption(0x00000080)
	QWizard__HaveFinishButtonOnEarlyPages QWizard__WizardOption = QWizard__WizardOption(0x00000100)
	QWizard__NoCancelButton               QWizard__WizardOption = QWizard__WizardOption(0x00000200)
	QWizard__CancelButtonOnLeft           QWizard__WizardOption = QWizard__WizardOption(0x00000400)
	QWizard__HaveHelpButton               QWizard__WizardOption = QWizard__WizardOption(0x00000800)
	QWizard__HelpButtonOnRight            QWizard__WizardOption = QWizard__WizardOption(0x00001000)
	QWizard__HaveCustomButton1            QWizard__WizardOption = QWizard__WizardOption(0x00002000)
	QWizard__HaveCustomButton2            QWizard__WizardOption = QWizard__WizardOption(0x00004000)
	QWizard__HaveCustomButton3            QWizard__WizardOption = QWizard__WizardOption(0x00008000)
	QWizard__NoCancelButtonOnLastPage     QWizard__WizardOption = QWizard__WizardOption(0x00010000)
)

//go:generate stringer -type=QWizard__WizardPixmap
//QWizard::WizardPixmap
type QWizard__WizardPixmap int64

const (
	QWizard__WatermarkPixmap  QWizard__WizardPixmap = QWizard__WizardPixmap(0)
	QWizard__LogoPixmap       QWizard__WizardPixmap = QWizard__WizardPixmap(1)
	QWizard__BannerPixmap     QWizard__WizardPixmap = QWizard__WizardPixmap(2)
	QWizard__BackgroundPixmap QWizard__WizardPixmap = QWizard__WizardPixmap(3)
	QWizard__NPixmaps         QWizard__WizardPixmap = QWizard__WizardPixmap(4)
)

//go:generate stringer -type=QWizard__WizardStyle
//QWizard::WizardStyle
type QWizard__WizardStyle int64

var (
	QWizard__ClassicStyle QWizard__WizardStyle = QWizard__WizardStyle(0)
	QWizard__ModernStyle  QWizard__WizardStyle = QWizard__WizardStyle(1)
	QWizard__MacStyle     QWizard__WizardStyle = QWizard__WizardStyle(2)
	QWizard__AeroStyle    QWizard__WizardStyle = QWizard__WizardStyle(3)
	QWizard__NStyles      QWizard__WizardStyle = QWizard__WizardStyle(4)
)
