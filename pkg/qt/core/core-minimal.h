// +build minimal

#pragma once

#ifndef GO_QTCORE_H
#define GO_QTCORE_H

#include <stdint.h>

#ifdef __cplusplus
int QAbstractEventDispatcher_QAbstractEventDispatcher_QRegisterMetaType();
int QAbstractItemModel_QAbstractItemModel_QRegisterMetaType();
int QAbstractNativeEventFilter_QAbstractNativeEventFilter_QRegisterMetaType();
int QChildEvent_QChildEvent_QRegisterMetaType();
int QCoreApplication_QCoreApplication_QRegisterMetaType();
int QEvent_QEvent_QRegisterMetaType();
int QIODevice_QIODevice_QRegisterMetaType();
int QMimeData_QMimeData_QRegisterMetaType();
int QObject_QObject_QRegisterMetaType();
int QSocketNotifier_QSocketNotifier_QRegisterMetaType();
int QThread_QThread_QRegisterMetaType();
int QTimerEvent_QTimerEvent_QRegisterMetaType();
int QTranslator_QTranslator_QRegisterMetaType();
extern "C" {
#endif

struct QtCore_PackedString { char* data; long long len; };
struct QtCore_PackedList { void* data; long long len; };
void* QAbstractEventDispatcher_QAbstractEventDispatcher_Instance(void* thread);
char QAbstractEventDispatcher_FilterNativeEvent(void* ptr, void* eventType, void* message, long* result);
char QAbstractEventDispatcher_ProcessEvents(void* ptr, long long flags);
char QAbstractEventDispatcher_RegisterEventNotifier(void* ptr, void* notifier);
char QAbstractEventDispatcher_UnregisterTimer(void* ptr, int timerId);
char QAbstractEventDispatcher_UnregisterTimers(void* ptr, void* object);
int QAbstractEventDispatcher_RegisterTimer(void* ptr, int interval, long long timerType, void* object);
int QAbstractEventDispatcher_RemainingTime(void* ptr, int timerId);
void QAbstractEventDispatcher_ConnectAboutToBlock(void* ptr, long long t);
void QAbstractEventDispatcher_DisconnectAboutToBlock(void* ptr);
void QAbstractEventDispatcher_AboutToBlock(void* ptr);
void QAbstractEventDispatcher_ConnectAwake(void* ptr, long long t);
void QAbstractEventDispatcher_DisconnectAwake(void* ptr);
void QAbstractEventDispatcher_Awake(void* ptr);
void QAbstractEventDispatcher_InstallNativeEventFilter(void* ptr, void* filterObj);
void QAbstractEventDispatcher_Interrupt(void* ptr);
void QAbstractEventDispatcher_RegisterSocketNotifier(void* ptr, void* notifier);
void QAbstractEventDispatcher_RegisterTimer4(void* ptr, int timerId, int interval, long long timerType, void* object);
void QAbstractEventDispatcher_RemoveNativeEventFilter(void* ptr, void* filter);
void QAbstractEventDispatcher_UnregisterEventNotifier(void* ptr, void* notifier);
void QAbstractEventDispatcher_UnregisterSocketNotifier(void* ptr, void* notifier);
void QAbstractEventDispatcher_WakeUp(void* ptr);
void QAbstractEventDispatcher_DestroyQAbstractEventDispatcher(void* ptr);
void QAbstractEventDispatcher_DestroyQAbstractEventDispatcherDefault(void* ptr);
void* QAbstractItemModel_NewQAbstractItemModel(void* parent);
char QAbstractItemModel_BeginMoveColumns(void* ptr, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationChild);
char QAbstractItemModel_BeginMoveRows(void* ptr, void* sourceParent, int sourceFirst, int sourceLast, void* destinationParent, int destinationChild);
char QAbstractItemModel_DropMimeData(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_DropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_InsertColumn(void* ptr, int column, void* parent);
char QAbstractItemModel_InsertColumns(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_InsertColumnsDefault(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_InsertRow(void* ptr, int row, void* parent);
char QAbstractItemModel_InsertRows(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_InsertRowsDefault(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_MoveColumn(void* ptr, void* sourceParent, int sourceColumn, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveColumns(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveColumnsDefault(void* ptr, void* sourceParent, int sourceColumn, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveRow(void* ptr, void* sourceParent, int sourceRow, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveRows(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_MoveRowsDefault(void* ptr, void* sourceParent, int sourceRow, int count, void* destinationParent, int destinationChild);
char QAbstractItemModel_RemoveColumn(void* ptr, int column, void* parent);
char QAbstractItemModel_RemoveColumns(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_RemoveColumnsDefault(void* ptr, int column, int count, void* parent);
char QAbstractItemModel_RemoveRow(void* ptr, int row, void* parent);
char QAbstractItemModel_RemoveRows(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_RemoveRowsDefault(void* ptr, int row, int count, void* parent);
char QAbstractItemModel_SetData(void* ptr, void* index, void* value, int role);
char QAbstractItemModel_SetDataDefault(void* ptr, void* index, void* value, int role);
char QAbstractItemModel_SetHeaderData(void* ptr, int section, long long orientation, void* value, int role);
char QAbstractItemModel_SetHeaderDataDefault(void* ptr, int section, long long orientation, void* value, int role);
char QAbstractItemModel_SetItemData(void* ptr, void* index, void* roles);
char QAbstractItemModel_SetItemDataDefault(void* ptr, void* index, void* roles);
char QAbstractItemModel_Submit(void* ptr);
char QAbstractItemModel_SubmitDefault(void* ptr);
void QAbstractItemModel_BeginInsertColumns(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginInsertRows(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginRemoveColumns(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginRemoveRows(void* ptr, void* parent, int first, int last);
void QAbstractItemModel_BeginResetModel(void* ptr);
void QAbstractItemModel_ChangePersistentIndex(void* ptr, void* from, void* to);
void QAbstractItemModel_ChangePersistentIndexList(void* ptr, void* from, void* to);
void QAbstractItemModel_ConnectColumnsAboutToBeInserted(void* ptr, long long t);
void QAbstractItemModel_DisconnectColumnsAboutToBeInserted(void* ptr);
void QAbstractItemModel_ConnectColumnsAboutToBeMoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectColumnsAboutToBeMoved(void* ptr);
void QAbstractItemModel_ConnectColumnsAboutToBeRemoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectColumnsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_ConnectColumnsInserted(void* ptr, long long t);
void QAbstractItemModel_DisconnectColumnsInserted(void* ptr);
void QAbstractItemModel_ConnectColumnsMoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectColumnsMoved(void* ptr);
void QAbstractItemModel_ConnectColumnsRemoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectColumnsRemoved(void* ptr);
void QAbstractItemModel_ConnectDataChanged(void* ptr, long long t);
void QAbstractItemModel_DisconnectDataChanged(void* ptr);
void QAbstractItemModel_DataChanged(void* ptr, void* topLeft, void* bottomRight, void* roles);
void QAbstractItemModel_EndInsertColumns(void* ptr);
void QAbstractItemModel_EndInsertRows(void* ptr);
void QAbstractItemModel_EndMoveColumns(void* ptr);
void QAbstractItemModel_EndMoveRows(void* ptr);
void QAbstractItemModel_EndRemoveColumns(void* ptr);
void QAbstractItemModel_EndRemoveRows(void* ptr);
void QAbstractItemModel_EndResetModel(void* ptr);
void QAbstractItemModel_FetchMore(void* ptr, void* parent);
void QAbstractItemModel_FetchMoreDefault(void* ptr, void* parent);
void QAbstractItemModel_ConnectHeaderDataChanged(void* ptr, long long t);
void QAbstractItemModel_DisconnectHeaderDataChanged(void* ptr);
void QAbstractItemModel_HeaderDataChanged(void* ptr, long long orientation, int first, int last);
void QAbstractItemModel_ConnectLayoutAboutToBeChanged(void* ptr, long long t);
void QAbstractItemModel_DisconnectLayoutAboutToBeChanged(void* ptr);
void QAbstractItemModel_LayoutAboutToBeChanged(void* ptr, void* parents, long long hint);
void QAbstractItemModel_ConnectLayoutChanged(void* ptr, long long t);
void QAbstractItemModel_DisconnectLayoutChanged(void* ptr);
void QAbstractItemModel_LayoutChanged(void* ptr, void* parents, long long hint);
void QAbstractItemModel_ConnectModelAboutToBeReset(void* ptr, long long t);
void QAbstractItemModel_DisconnectModelAboutToBeReset(void* ptr);
void QAbstractItemModel_ConnectModelReset(void* ptr, long long t);
void QAbstractItemModel_DisconnectModelReset(void* ptr);
void QAbstractItemModel_ResetInternalData(void* ptr);
void QAbstractItemModel_ResetInternalDataDefault(void* ptr);
void QAbstractItemModel_Revert(void* ptr);
void QAbstractItemModel_RevertDefault(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeInserted(void* ptr, long long t);
void QAbstractItemModel_DisconnectRowsAboutToBeInserted(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeMoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectRowsAboutToBeMoved(void* ptr);
void QAbstractItemModel_ConnectRowsAboutToBeRemoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectRowsAboutToBeRemoved(void* ptr);
void QAbstractItemModel_ConnectRowsInserted(void* ptr, long long t);
void QAbstractItemModel_DisconnectRowsInserted(void* ptr);
void QAbstractItemModel_ConnectRowsMoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectRowsMoved(void* ptr);
void QAbstractItemModel_ConnectRowsRemoved(void* ptr, long long t);
void QAbstractItemModel_DisconnectRowsRemoved(void* ptr);
void QAbstractItemModel_Sort(void* ptr, int column, long long order);
void QAbstractItemModel_SortDefault(void* ptr, int column, long long order);
void QAbstractItemModel_DestroyQAbstractItemModel(void* ptr);
void QAbstractItemModel_DestroyQAbstractItemModelDefault(void* ptr);
struct QtCore_PackedList QAbstractItemModel_RoleNames(void* ptr);
struct QtCore_PackedList QAbstractItemModel_RoleNamesDefault(void* ptr);
struct QtCore_PackedList QAbstractItemModel_ItemData(void* ptr, void* index);
struct QtCore_PackedList QAbstractItemModel_ItemDataDefault(void* ptr, void* index);
void* QAbstractItemModel_MimeData(void* ptr, void* indexes);
void* QAbstractItemModel_MimeDataDefault(void* ptr, void* indexes);
void* QAbstractItemModel_Buddy(void* ptr, void* index);
void* QAbstractItemModel_BuddyDefault(void* ptr, void* index);
void* QAbstractItemModel_CreateIndex2(void* ptr, int row, int column, uintptr_t id);
void* QAbstractItemModel_CreateIndex(void* ptr, int row, int column, void* p);
void* QAbstractItemModel_Index(void* ptr, int row, int column, void* parent);
void* QAbstractItemModel_Parent(void* ptr, void* index);
void* QAbstractItemModel_Sibling(void* ptr, int row, int column, void* index);
void* QAbstractItemModel_SiblingDefault(void* ptr, int row, int column, void* index);
struct QtCore_PackedList QAbstractItemModel_Match(void* ptr, void* start, int role, void* value, int hits, long long flags);
struct QtCore_PackedList QAbstractItemModel_MatchDefault(void* ptr, void* start, int role, void* value, int hits, long long flags);
struct QtCore_PackedList QAbstractItemModel_PersistentIndexList(void* ptr);
void* QAbstractItemModel_Span(void* ptr, void* index);
void* QAbstractItemModel_SpanDefault(void* ptr, void* index);
struct QtCore_PackedString QAbstractItemModel_MimeTypes(void* ptr);
struct QtCore_PackedString QAbstractItemModel_MimeTypesDefault(void* ptr);
void* QAbstractItemModel_Data(void* ptr, void* index, int role);
void* QAbstractItemModel_HeaderData(void* ptr, int section, long long orientation, int role);
void* QAbstractItemModel_HeaderDataDefault(void* ptr, int section, long long orientation, int role);
long long QAbstractItemModel_SupportedDragActions(void* ptr);
long long QAbstractItemModel_SupportedDragActionsDefault(void* ptr);
long long QAbstractItemModel_SupportedDropActions(void* ptr);
long long QAbstractItemModel_SupportedDropActionsDefault(void* ptr);
long long QAbstractItemModel_Flags(void* ptr, void* index);
long long QAbstractItemModel_FlagsDefault(void* ptr, void* index);
char QAbstractItemModel_CanDropMimeData(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_CanDropMimeDataDefault(void* ptr, void* data, long long action, int row, int column, void* parent);
char QAbstractItemModel_CanFetchMore(void* ptr, void* parent);
char QAbstractItemModel_CanFetchMoreDefault(void* ptr, void* parent);
char QAbstractItemModel_CheckIndex(void* ptr, void* index, long long options);
char QAbstractItemModel_HasChildren(void* ptr, void* parent);
char QAbstractItemModel_HasChildrenDefault(void* ptr, void* parent);
char QAbstractItemModel_HasIndex(void* ptr, int row, int column, void* parent);
int QAbstractItemModel_ColumnCount(void* ptr, void* parent);
int QAbstractItemModel_RowCount(void* ptr, void* parent);
void* QAbstractItemModel___setItemData_roles_atList(void* ptr, int v, int i);
void QAbstractItemModel___setItemData_roles_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___setItemData_roles_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___setItemData_roles_keyList(void* ptr);
void* QAbstractItemModel___changePersistentIndexList_from_atList(void* ptr, int i);
void QAbstractItemModel___changePersistentIndexList_from_setList(void* ptr, void* i);
void* QAbstractItemModel___changePersistentIndexList_from_newList(void* ptr);
void* QAbstractItemModel___changePersistentIndexList_to_atList(void* ptr, int i);
void QAbstractItemModel___changePersistentIndexList_to_setList(void* ptr, void* i);
void* QAbstractItemModel___changePersistentIndexList_to_newList(void* ptr);
int QAbstractItemModel___dataChanged_roles_atList(void* ptr, int i);
void QAbstractItemModel___dataChanged_roles_setList(void* ptr, int i);
void* QAbstractItemModel___dataChanged_roles_newList(void* ptr);
void* QAbstractItemModel___doSetRoleNames_roleNames_atList(void* ptr, int v, int i);
void QAbstractItemModel___doSetRoleNames_roleNames_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___doSetRoleNames_roleNames_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___doSetRoleNames_roleNames_keyList(void* ptr);
void* QAbstractItemModel___layoutAboutToBeChanged_parents_atList(void* ptr, int i);
void QAbstractItemModel___layoutAboutToBeChanged_parents_setList(void* ptr, void* i);
void* QAbstractItemModel___layoutAboutToBeChanged_parents_newList(void* ptr);
void* QAbstractItemModel___layoutChanged_parents_atList(void* ptr, int i);
void QAbstractItemModel___layoutChanged_parents_setList(void* ptr, void* i);
void* QAbstractItemModel___layoutChanged_parents_newList(void* ptr);
void* QAbstractItemModel___setRoleNames_roleNames_atList(void* ptr, int v, int i);
void QAbstractItemModel___setRoleNames_roleNames_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___setRoleNames_roleNames_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___setRoleNames_roleNames_keyList(void* ptr);
void* QAbstractItemModel___roleNames_atList(void* ptr, int v, int i);
void QAbstractItemModel___roleNames_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___roleNames_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___roleNames_keyList(void* ptr);
void* QAbstractItemModel___itemData_atList(void* ptr, int v, int i);
void QAbstractItemModel___itemData_setList(void* ptr, int key, void* i);
void* QAbstractItemModel___itemData_newList(void* ptr);
struct QtCore_PackedList QAbstractItemModel___itemData_keyList(void* ptr);
void* QAbstractItemModel___mimeData_indexes_atList(void* ptr, int i);
void QAbstractItemModel___mimeData_indexes_setList(void* ptr, void* i);
void* QAbstractItemModel___mimeData_indexes_newList(void* ptr);
void* QAbstractItemModel___match_atList(void* ptr, int i);
void QAbstractItemModel___match_setList(void* ptr, void* i);
void* QAbstractItemModel___match_newList(void* ptr);
void* QAbstractItemModel___persistentIndexList_atList(void* ptr, int i);
void QAbstractItemModel___persistentIndexList_setList(void* ptr, void* i);
void* QAbstractItemModel___persistentIndexList_newList(void* ptr);
void* QAbstractItemModel___encodeData_indexes_atList(void* ptr, int i);
void QAbstractItemModel___encodeData_indexes_setList(void* ptr, void* i);
void* QAbstractItemModel___encodeData_indexes_newList(void* ptr);
int QAbstractItemModel_____setItemData_roles_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____setItemData_roles_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____setItemData_roles_keyList_newList(void* ptr);
int QAbstractItemModel_____doSetRoleNames_roleNames_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____doSetRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____doSetRoleNames_roleNames_keyList_newList(void* ptr);
int QAbstractItemModel_____setRoleNames_roleNames_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____setRoleNames_roleNames_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____setRoleNames_roleNames_keyList_newList(void* ptr);
int QAbstractItemModel_____roleNames_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____roleNames_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____roleNames_keyList_newList(void* ptr);
int QAbstractItemModel_____itemData_keyList_atList(void* ptr, int i);
void QAbstractItemModel_____itemData_keyList_setList(void* ptr, int i);
void* QAbstractItemModel_____itemData_keyList_newList(void* ptr);
void* QAbstractNativeEventFilter_NewQAbstractNativeEventFilter();
char QAbstractNativeEventFilter_NativeEventFilter(void* ptr, void* eventType, void* message, long* result);
void QAbstractNativeEventFilter_DestroyQAbstractNativeEventFilter(void* ptr);
void QAbstractNativeEventFilter_DestroyQAbstractNativeEventFilterDefault(void* ptr);
void* QBitArray_NewQBitArray();
void* QBitArray_NewQBitArray4(void* other);
void* QBitArray_NewQBitArray3(void* other);
void* QBitArray_NewQBitArray2(int size, char value);
char QBitArray_Fill(void* ptr, char value, int size);
char QBitArray_ToggleBit(void* ptr, int i);
void QBitArray_Clear(void* ptr);
void QBitArray_ClearBit(void* ptr, int i);
void QBitArray_Fill2(void* ptr, char value, int begin, int end);
void QBitArray_Resize(void* ptr, int size);
void QBitArray_SetBit(void* ptr, int i);
void QBitArray_SetBit2(void* ptr, int i, char value);
void QBitArray_Swap(void* ptr, void* other);
void QBitArray_Truncate(void* ptr, int pos);
char QBitArray_At(void* ptr, int i);
char QBitArray_IsEmpty(void* ptr);
char QBitArray_IsNull(void* ptr);
char QBitArray_TestBit(void* ptr, int i);
struct QtCore_PackedString QBitArray_Bits(void* ptr);
int QBitArray_Count(void* ptr);
int QBitArray_Count2(void* ptr, char on);
int QBitArray_Size(void* ptr);
void* QByteArray_Append5(void* ptr, char* ch);
void* QByteArray_Append(void* ptr, void* ba);
void* QByteArray_Append6(void* ptr, struct QtCore_PackedString str);
void* QByteArray_Append3(void* ptr, char* str);
void* QByteArray_Append4(void* ptr, char* str, int l);
void* QByteArray_Append2(void* ptr, int count, char* ch);
void* QByteArray_Fill(void* ptr, char* ch, int size);
void* QByteArray_Insert5(void* ptr, int i, char* ch);
void* QByteArray_Insert(void* ptr, int i, void* ba);
void* QByteArray_Insert6(void* ptr, int i, struct QtCore_PackedString str);
void* QByteArray_Insert3(void* ptr, int i, char* str);
void* QByteArray_Insert4(void* ptr, int i, char* str, int l);
void* QByteArray_Insert2(void* ptr, int i, int count, char* ch);
void* QByteArray_Prepend5(void* ptr, char* ch);
void* QByteArray_Prepend(void* ptr, void* ba);
void* QByteArray_Prepend3(void* ptr, char* str);
void* QByteArray_Prepend4(void* ptr, char* str, int l);
void* QByteArray_Prepend2(void* ptr, int count, char* ch);
void* QByteArray_Remove(void* ptr, int pos, int l);
void* QByteArray_Replace11(void* ptr, char* before, char* after);
void* QByteArray_Replace5(void* ptr, char* before, void* after);
void* QByteArray_Replace13(void* ptr, char* before, struct QtCore_PackedString after);
void* QByteArray_Replace4(void* ptr, char* before, char* after);
void* QByteArray_Replace8(void* ptr, void* before, void* after);
void* QByteArray_Replace9(void* ptr, void* before, char* after);
void* QByteArray_Replace14(void* ptr, struct QtCore_PackedString before, void* after);
void* QByteArray_Replace12(void* ptr, struct QtCore_PackedString before, char* after);
void* QByteArray_Replace10(void* ptr, char* before, void* after);
void* QByteArray_Replace6(void* ptr, char* before, char* after);
void* QByteArray_Replace7(void* ptr, char* before, int bsize, char* after, int asize);
void* QByteArray_Replace(void* ptr, int pos, int l, void* after);
void* QByteArray_Replace3(void* ptr, int pos, int l, char* after);
void* QByteArray_Replace2(void* ptr, int pos, int l, char* after, int alen);
void* QByteArray_SetNum8(void* ptr, double n, char* ff, int prec);
void* QByteArray_SetNum7(void* ptr, float n, char* ff, int prec);
void* QByteArray_SetNum(void* ptr, int n, int base);
void* QByteArray_SetNum5(void* ptr, long long n, int base);
void* QByteArray_SetNum6(void* ptr, unsigned long long n, int base);
void* QByteArray_SetNum3(void* ptr, short n, int base);
void* QByteArray_SetNum4(void* ptr, unsigned int n, int base);
void* QByteArray_SetNum2(void* ptr, unsigned short n, int base);
void* QByteArray_SetRawData(void* ptr, char* data, unsigned int size);
void* QByteArray_QByteArray_FromBase64(void* base64);
void* QByteArray_QByteArray_FromBase642(void* base64, long long options);
void* QByteArray_QByteArray_FromHex(void* hexEncoded);
void* QByteArray_QByteArray_FromPercentEncoding(void* input, char* percent);
void* QByteArray_QByteArray_FromRawData(char* data, int size);
void* QByteArray_QByteArray_Number5(double n, char* ff, int prec);
void* QByteArray_QByteArray_Number(int n, int base);
void* QByteArray_QByteArray_Number3(long long n, int base);
void* QByteArray_QByteArray_Number4(unsigned long long n, int base);
void* QByteArray_QByteArray_Number2(unsigned int n, int base);
void* QByteArray_NewQByteArray();
void* QByteArray_NewQByteArray6(void* other);
void* QByteArray_NewQByteArray5(void* other);
void* QByteArray_NewQByteArray2(char* data, int size);
void* QByteArray_NewQByteArray3(int size, char* ch);
struct QtCore_PackedString QByteArray_Data(void* ptr);
void QByteArray_Chop(void* ptr, int n);
void QByteArray_Clear(void* ptr);
void QByteArray_Push_back3(void* ptr, char* ch);
void QByteArray_Push_back(void* ptr, void* other);
void QByteArray_Push_back2(void* ptr, char* str);
void QByteArray_Push_front3(void* ptr, char* ch);
void QByteArray_Push_front(void* ptr, void* other);
void QByteArray_Push_front2(void* ptr, char* str);
void QByteArray_Reserve(void* ptr, int size);
void QByteArray_Resize(void* ptr, int size);
void QByteArray_Shrink_to_fit(void* ptr);
void QByteArray_Squeeze(void* ptr);
void QByteArray_Swap(void* ptr, void* other);
void QByteArray_Truncate(void* ptr, int pos);
void QByteArray_DestroyQByteArray(void* ptr);
void* QByteArray_Chopped(void* ptr, int l);
void* QByteArray_Left(void* ptr, int l);
void* QByteArray_LeftJustified(void* ptr, int width, char* fill, char truncate);
void* QByteArray_Mid(void* ptr, int pos, int l);
void* QByteArray_Repeated(void* ptr, int times);
void* QByteArray_Right(void* ptr, int l);
void* QByteArray_RightJustified(void* ptr, int width, char* fill, char truncate);
void* QByteArray_Simplified(void* ptr);
void* QByteArray_ToBase64(void* ptr);
void* QByteArray_ToBase642(void* ptr, long long options);
void* QByteArray_ToHex(void* ptr);
void* QByteArray_ToHex2(void* ptr, char* separator);
void* QByteArray_ToLower(void* ptr);
void* QByteArray_ToPercentEncoding(void* ptr, void* exclude, void* include, char* percent);
void* QByteArray_ToUpper(void* ptr);
void* QByteArray_Trimmed(void* ptr);
struct QtCore_PackedList QByteArray_Split(void* ptr, char* sep);
char QByteArray_Contains3(void* ptr, char* ch);
char QByteArray_Contains(void* ptr, void* ba);
char QByteArray_Contains2(void* ptr, char* str);
char QByteArray_EndsWith2(void* ptr, char* ch);
char QByteArray_EndsWith(void* ptr, void* ba);
char QByteArray_EndsWith3(void* ptr, char* str);
char QByteArray_IsEmpty(void* ptr);
char QByteArray_IsLower(void* ptr);
char QByteArray_IsNull(void* ptr);
char QByteArray_IsUpper(void* ptr);
char QByteArray_StartsWith2(void* ptr, char* ch);
char QByteArray_StartsWith(void* ptr, void* ba);
char QByteArray_StartsWith3(void* ptr, char* str);
struct QtCore_PackedString QByteArray_At(void* ptr, int i);
struct QtCore_PackedString QByteArray_Back(void* ptr);
struct QtCore_PackedString QByteArray_Front(void* ptr);
struct QtCore_PackedString QByteArray_ConstData(void* ptr);
struct QtCore_PackedString QByteArray_Data2(void* ptr);
double QByteArray_ToDouble(void* ptr, char* ok);
float QByteArray_ToFloat(void* ptr, char* ok);
int QByteArray_Capacity(void* ptr);
int QByteArray_Compare2(void* ptr, void* a, long long cs);
int QByteArray_Compare(void* ptr, char* c, long long cs);
int QByteArray_Count4(void* ptr);
int QByteArray_Count3(void* ptr, char* ch);
int QByteArray_Count(void* ptr, void* ba);
int QByteArray_Count2(void* ptr, char* str);
int QByteArray_IndexOf3(void* ptr, char* ch, int from);
int QByteArray_IndexOf(void* ptr, void* ba, int from);
int QByteArray_IndexOf4(void* ptr, struct QtCore_PackedString str, int from);
int QByteArray_IndexOf2(void* ptr, char* str, int from);
int QByteArray_LastIndexOf3(void* ptr, char* ch, int from);
int QByteArray_LastIndexOf(void* ptr, void* ba, int from);
int QByteArray_LastIndexOf4(void* ptr, struct QtCore_PackedString str, int from);
int QByteArray_LastIndexOf2(void* ptr, char* str, int from);
int QByteArray_Length(void* ptr);
int QByteArray_Size(void* ptr);
int QByteArray_ToInt(void* ptr, char* ok, int base);
long QByteArray_ToLong(void* ptr, char* ok, int base);
long long QByteArray_ToLongLong(void* ptr, char* ok, int base);
unsigned long long QByteArray_ToULongLong(void* ptr, char* ok, int base);
short QByteArray_ToShort(void* ptr, char* ok, int base);
unsigned int QByteArray_ToUInt(void* ptr, char* ok, int base);
unsigned long QByteArray_ToULong(void* ptr, char* ok, int base);
unsigned short QByteArray_ToUShort(void* ptr, char* ok, int base);
void* QByteArray___split_atList(void* ptr, int i);
void QByteArray___split_setList(void* ptr, void* i);
void* QByteArray___split_newList(void* ptr);
void* QByteArrayList_Join(void* ptr);
void* QByteArrayList_Join3(void* ptr, char* separator);
void* QByteArrayList_Join2(void* ptr, void* separator);
int QCborValue_False_Type();
int QCborValue_True_Type();
int QCborValue_Null_Type();
int QCborValue_Undefined_Type();
void* QChar_QChar_FromLatin1(char* c);
void* QChar_NewQChar();
void* QChar_NewQChar7(long long ch);
void* QChar_NewQChar8(void* ch);
void* QChar_NewQChar11(char* ch);
void* QChar_NewQChar6(int code);
void* QChar_NewQChar4(short code);
void* QChar_NewQChar3(char* cell, char* row);
void* QChar_NewQChar12(char* ch);
void* QChar_NewQChar5(unsigned int code);
void* QChar_NewQChar2(unsigned short code);
long long QChar_QChar_Category2(unsigned int ucs4);
long long QChar_QChar_DecompositionTag2(unsigned int ucs4);
long long QChar_QChar_Direction2(unsigned int ucs4);
long long QChar_QChar_JoiningType2(unsigned int ucs4);
long long QChar_QChar_Script2(unsigned int ucs4);
long long QChar_QChar_CurrentUnicodeVersion();
long long QChar_QChar_UnicodeVersion2(unsigned int ucs4);
struct QtCore_PackedString QChar_QChar_Decomposition2(unsigned int ucs4);
char QChar_QChar_HasMirrored2(unsigned int ucs4);
char QChar_QChar_IsDigit2(unsigned int ucs4);
char QChar_QChar_IsHighSurrogate2(unsigned int ucs4);
char QChar_QChar_IsLetter2(unsigned int ucs4);
char QChar_QChar_IsLetterOrNumber2(unsigned int ucs4);
char QChar_QChar_IsLowSurrogate2(unsigned int ucs4);
char QChar_QChar_IsLower2(unsigned int ucs4);
char QChar_QChar_IsMark2(unsigned int ucs4);
char QChar_QChar_IsNonCharacter2(unsigned int ucs4);
char QChar_QChar_IsNumber2(unsigned int ucs4);
char QChar_QChar_IsPrint2(unsigned int ucs4);
char QChar_QChar_IsPunct2(unsigned int ucs4);
char QChar_QChar_IsSpace2(unsigned int ucs4);
char QChar_QChar_IsSurrogate2(unsigned int ucs4);
char QChar_QChar_IsSymbol2(unsigned int ucs4);
char QChar_QChar_IsTitleCase2(unsigned int ucs4);
char QChar_QChar_IsUpper2(unsigned int ucs4);
char QChar_QChar_RequiresSurrogates(unsigned int ucs4);
int QChar_QChar_DigitValue2(unsigned int ucs4);
unsigned int QChar_QChar_MirroredChar2(unsigned int ucs4);
unsigned int QChar_QChar_SurrogateToUcs42(void* high, void* low);
unsigned int QChar_QChar_SurrogateToUcs4(unsigned short high, unsigned short low);
unsigned int QChar_QChar_ToCaseFolded2(unsigned int ucs4);
unsigned int QChar_QChar_ToLower2(unsigned int ucs4);
unsigned int QChar_QChar_ToTitleCase2(unsigned int ucs4);
unsigned int QChar_QChar_ToUpper2(unsigned int ucs4);
unsigned short QChar_Unicode2(void* ptr);
unsigned short QChar_QChar_HighSurrogate(unsigned int ucs4);
unsigned short QChar_QChar_LowSurrogate(unsigned int ucs4);
void* QChar_MirroredChar(void* ptr);
void* QChar_ToCaseFolded(void* ptr);
void* QChar_ToLower(void* ptr);
void* QChar_ToTitleCase(void* ptr);
void* QChar_ToUpper(void* ptr);
long long QChar_Category(void* ptr);
long long QChar_DecompositionTag(void* ptr);
long long QChar_Direction(void* ptr);
long long QChar_JoiningType(void* ptr);
long long QChar_Script(void* ptr);
long long QChar_UnicodeVersion(void* ptr);
struct QtCore_PackedString QChar_Decomposition(void* ptr);
char QChar_HasMirrored(void* ptr);
char QChar_IsDigit(void* ptr);
char QChar_IsHighSurrogate(void* ptr);
char QChar_IsLetter(void* ptr);
char QChar_IsLetterOrNumber(void* ptr);
char QChar_IsLowSurrogate(void* ptr);
char QChar_IsLower(void* ptr);
char QChar_IsMark(void* ptr);
char QChar_IsNonCharacter(void* ptr);
char QChar_IsNull(void* ptr);
char QChar_IsNumber(void* ptr);
char QChar_IsPrint(void* ptr);
char QChar_IsPunct(void* ptr);
char QChar_IsSpace(void* ptr);
char QChar_IsSurrogate(void* ptr);
char QChar_IsSymbol(void* ptr);
char QChar_IsTitleCase(void* ptr);
char QChar_IsUpper(void* ptr);
struct QtCore_PackedString QChar_ToLatin1(void* ptr);
int QChar_DigitValue(void* ptr);
struct QtCore_PackedString QChar_Cell(void* ptr);
struct QtCore_PackedString QChar_Row(void* ptr);
unsigned short QChar_Unicode(void* ptr);
void* QChildEvent_NewQChildEvent(long long ty, void* child);
void* QChildEvent_Child(void* ptr);
char QChildEvent_Added(void* ptr);
char QChildEvent_Polished(void* ptr);
char QChildEvent_Removed(void* ptr);
void* QChildEvent_C(void* ptr);
void QChildEvent_SetC(void* ptr, void* vqo);
void* QCoreApplication_QCoreApplication_EventDispatcher();
void* QCoreApplication_QCoreApplication_Instance();
void* QCoreApplication_NewQCoreApplication(int argc, char* argv);
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationDirPath();
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationFilePath();
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationName();
struct QtCore_PackedString QCoreApplication_QCoreApplication_ApplicationVersion();
struct QtCore_PackedString QCoreApplication_QCoreApplication_OrganizationDomain();
struct QtCore_PackedString QCoreApplication_QCoreApplication_OrganizationName();
struct QtCore_PackedString QCoreApplication_QCoreApplication_Translate(char* context, char* sourceText, char* disambiguation, int n);
struct QtCore_PackedString QCoreApplication_QCoreApplication_Arguments();
struct QtCore_PackedString QCoreApplication_QCoreApplication_LibraryPaths();
char QCoreApplication_QCoreApplication_ClosingDown();
char QCoreApplication_QCoreApplication_InstallTranslator(void* translationFile);
char QCoreApplication_QCoreApplication_IsQuitLockEnabled();
char QCoreApplication_QCoreApplication_IsSetuidAllowed();
char QCoreApplication_QCoreApplication_RemoveTranslator(void* translationFile);
char QCoreApplication_QCoreApplication_SendEvent(void* receiver, void* event);
char QCoreApplication_QCoreApplication_StartingUp();
char QCoreApplication_QCoreApplication_TestAttribute(long long attribute);
int QCoreApplication_QCoreApplication_Exec();
long long QCoreApplication_QCoreApplication_ApplicationPid();
void QCoreApplication_ConnectAboutToQuit(void* ptr, long long t);
void QCoreApplication_DisconnectAboutToQuit(void* ptr);
void QCoreApplication_QCoreApplication_AddLibraryPath(struct QtCore_PackedString path);
void QCoreApplication_QCoreApplication_Exit(int returnCode);
void QCoreApplication_InstallNativeEventFilter(void* ptr, void* filterObj);
void QCoreApplication_QCoreApplication_PostEvent(void* receiver, void* event, int priority);
void QCoreApplication_QCoreApplication_ProcessEvents(long long flags);
void QCoreApplication_QCoreApplication_ProcessEvents2(long long flags, int maxtime);
void QCoreApplication_Quit(void* ptr);
void QCoreApplication_QuitDefault(void* ptr);
void QCoreApplication_QCoreApplication_RemoveLibraryPath(struct QtCore_PackedString path);
void QCoreApplication_RemoveNativeEventFilter(void* ptr, void* filterObject);
void QCoreApplication_QCoreApplication_RemovePostedEvents(void* receiver, int eventType);
void QCoreApplication_QCoreApplication_SendPostedEvents(void* receiver, int event_type);
void QCoreApplication_QCoreApplication_SetApplicationName(struct QtCore_PackedString application);
void QCoreApplication_QCoreApplication_SetApplicationVersion(struct QtCore_PackedString version);
void QCoreApplication_QCoreApplication_SetAttribute(long long attribute, char on);
void QCoreApplication_QCoreApplication_SetEventDispatcher(void* eventDispatcher);
void QCoreApplication_QCoreApplication_SetLibraryPaths(struct QtCore_PackedString paths);
void QCoreApplication_QCoreApplication_SetOrganizationDomain(struct QtCore_PackedString orgDomain);
void QCoreApplication_QCoreApplication_SetOrganizationName(struct QtCore_PackedString orgName);
void QCoreApplication_QCoreApplication_SetQuitLockEnabled(char enabled);
void QCoreApplication_QCoreApplication_SetSetuidAllowed(char allow);
void QCoreApplication_DestroyQCoreApplication(void* ptr);
void QCoreApplication_DestroyQCoreApplicationDefault(void* ptr);
void* QDataStream_NewQDataStream();
void* QDataStream_NewQDataStream3(void* a, long long mode);
void* QDataStream_NewQDataStream2(void* d);
void* QDataStream_NewQDataStream4(void* a);
char QDataStream_CommitTransaction(void* ptr);
int QDataStream_ReadRawData(void* ptr, char* s, int l);
int QDataStream_SkipRawData(void* ptr, int l);
int QDataStream_WriteRawData(void* ptr, char* s, int l);
void QDataStream_AbortTransaction(void* ptr);
void QDataStream_ResetStatus(void* ptr);
void QDataStream_RollbackTransaction(void* ptr);
void QDataStream_SetByteOrder(void* ptr, long long bo);
void QDataStream_SetDevice(void* ptr, void* d);
void QDataStream_SetFloatingPointPrecision(void* ptr, long long precision);
void QDataStream_SetStatus(void* ptr, long long status);
void QDataStream_SetVersion(void* ptr, int v);
void QDataStream_StartTransaction(void* ptr);
void QDataStream_DestroyQDataStream(void* ptr);
long long QDataStream_ByteOrder(void* ptr);
long long QDataStream_FloatingPointPrecision(void* ptr);
long long QDataStream_Status(void* ptr);
void* QDataStream_Device(void* ptr);
char QDataStream_AtEnd(void* ptr);
int QDataStream_Version(void* ptr);
void* QDate_QDate_CurrentDate();
void* QDate_QDate_FromJulianDay(long long jd);
void* QDate_QDate_FromString(struct QtCore_PackedString stri, long long format);
void* QDate_QDate_FromString2(struct QtCore_PackedString stri, struct QtCore_PackedString format);
void* QDate_NewQDate();
void* QDate_NewQDate3(int y, int m, int d);
char QDate_QDate_IsLeapYear(int year);
char QDate_QDate_IsValid2(int year, int month, int day);
char QDate_SetDate(void* ptr, int year, int month, int day);
void* QDate_AddDays(void* ptr, long long ndays);
void* QDate_AddMonths(void* ptr, int nmonths);
void* QDate_AddYears(void* ptr, int nyears);
struct QtCore_PackedString QDate_ToString3(void* ptr, void* format);
struct QtCore_PackedString QDate_ToString2(void* ptr, long long format);
struct QtCore_PackedString QDate_ToString(void* ptr, struct QtCore_PackedString format);
char QDate_IsNull(void* ptr);
char QDate_IsValid(void* ptr);
int QDate_Day(void* ptr);
int QDate_DayOfWeek(void* ptr);
int QDate_DayOfYear(void* ptr);
int QDate_DaysInMonth(void* ptr);
int QDate_DaysInYear(void* ptr);
int QDate_Month(void* ptr);
int QDate_WeekNumber(void* ptr, int yearNumber);
int QDate_Year(void* ptr);
long long QDate_DaysTo(void* ptr, void* d);
long long QDate_ToJulianDay(void* ptr);
void QDate_GetDate(void* ptr, int year, int month, int day);
void* QDateTime_QDateTime_CurrentDateTime();
void* QDateTime_QDateTime_CurrentDateTimeUtc();
void* QDateTime_QDateTime_FromMSecsSinceEpoch(long long msecs);
void* QDateTime_QDateTime_FromMSecsSinceEpoch2(long long msecs, long long spec, int offsetSeconds);
void* QDateTime_QDateTime_FromMSecsSinceEpoch3(long long msecs, void* timeZone);
void* QDateTime_QDateTime_FromSecsSinceEpoch(long long secs, long long spec, int offsetSeconds);
void* QDateTime_QDateTime_FromSecsSinceEpoch2(long long secs, void* timeZone);
void* QDateTime_QDateTime_FromString(struct QtCore_PackedString stri, long long format);
void* QDateTime_QDateTime_FromString2(struct QtCore_PackedString stri, struct QtCore_PackedString format);
void* QDateTime_NewQDateTime();
void* QDateTime_NewQDateTime7(void* other);
void* QDateTime_NewQDateTime2(void* date);
void* QDateTime_NewQDateTime3(void* date, void* ti, long long spec);
void* QDateTime_NewQDateTime4(void* date, void* ti, long long spec, int offsetSeconds);
void* QDateTime_NewQDateTime5(void* date, void* ti, void* timeZone);
void* QDateTime_NewQDateTime6(void* other);
long long QDateTime_QDateTime_CurrentMSecsSinceEpoch();
long long QDateTime_QDateTime_CurrentSecsSinceEpoch();
void QDateTime_SetDate(void* ptr, void* date);
void QDateTime_SetMSecsSinceEpoch(void* ptr, long long msecs);
void QDateTime_SetOffsetFromUtc(void* ptr, int offsetSeconds);
void QDateTime_SetSecsSinceEpoch(void* ptr, long long secs);
void QDateTime_SetTime(void* ptr, void* ti);
void QDateTime_SetTimeSpec(void* ptr, long long spec);
void QDateTime_SetTimeZone(void* ptr, void* toZone);
void QDateTime_Swap(void* ptr, void* other);
void QDateTime_DestroyQDateTime(void* ptr);
void* QDateTime_Date(void* ptr);
void* QDateTime_AddDays(void* ptr, long long ndays);
void* QDateTime_AddMSecs(void* ptr, long long msecs);
void* QDateTime_AddMonths(void* ptr, int nmonths);
void* QDateTime_AddSecs(void* ptr, long long s);
void* QDateTime_AddYears(void* ptr, int nyears);
void* QDateTime_ToLocalTime(void* ptr);
void* QDateTime_ToOffsetFromUtc(void* ptr, int offsetSeconds);
void* QDateTime_ToTimeSpec(void* ptr, long long spec);
void* QDateTime_ToTimeZone(void* ptr, void* timeZone);
void* QDateTime_ToUTC(void* ptr);
struct QtCore_PackedString QDateTime_TimeZoneAbbreviation(void* ptr);
struct QtCore_PackedString QDateTime_ToString3(void* ptr, void* format);
struct QtCore_PackedString QDateTime_ToString2(void* ptr, long long format);
struct QtCore_PackedString QDateTime_ToString(void* ptr, struct QtCore_PackedString format);
void* QDateTime_Time(void* ptr);
void* QDateTime_TimeZone(void* ptr);
long long QDateTime_TimeSpec(void* ptr);
char QDateTime_IsDaylightTime(void* ptr);
char QDateTime_IsNull(void* ptr);
char QDateTime_IsValid(void* ptr);
int QDateTime_OffsetFromUtc(void* ptr);
long long QDateTime_DaysTo(void* ptr, void* other);
long long QDateTime_MsecsTo(void* ptr, void* other);
long long QDateTime_SecsTo(void* ptr, void* other);
long long QDateTime_ToMSecsSinceEpoch(void* ptr);
long long QDateTime_ToSecsSinceEpoch(void* ptr);
void* QEasingCurve_NewQEasingCurve3(void* other);
void* QEasingCurve_NewQEasingCurve(long long ty);
void* QEasingCurve_NewQEasingCurve2(void* other);
void QEasingCurve_AddCubicBezierSegment(void* ptr, void* c1, void* c2, void* endPoint);
void QEasingCurve_AddTCBSegment(void* ptr, void* nextPoint, double t, double c, double b);
void QEasingCurve_SetAmplitude(void* ptr, double amplitude);
void QEasingCurve_SetOvershoot(void* ptr, double overshoot);
void QEasingCurve_SetPeriod(void* ptr, double period);
void QEasingCurve_SetType(void* ptr, long long ty);
void QEasingCurve_Swap(void* ptr, void* other);
void QEasingCurve_DestroyQEasingCurve(void* ptr);
long long QEasingCurve_Type(void* ptr);
struct QtCore_PackedList QEasingCurve_ToCubicSpline(void* ptr);
double QEasingCurve_Amplitude(void* ptr);
double QEasingCurve_Overshoot(void* ptr);
double QEasingCurve_Period(void* ptr);
double QEasingCurve_ValueForProgress(void* ptr, double progress);
void* QEasingCurve___cubicBezierSpline_atList(void* ptr, int i);
void QEasingCurve___cubicBezierSpline_setList(void* ptr, void* i);
void* QEasingCurve___cubicBezierSpline_newList(void* ptr);
void* QEasingCurve___toCubicSpline_atList(void* ptr, int i);
void QEasingCurve___toCubicSpline_setList(void* ptr, void* i);
void* QEasingCurve___toCubicSpline_newList(void* ptr);
void* QEvent_NewQEvent(long long ty);
int QEvent_QEvent_RegisterEventType(int hint);
void QEvent_Accept(void* ptr);
void QEvent_Ignore(void* ptr);
void QEvent_SetAccepted(void* ptr, char accepted);
void QEvent_DestroyQEvent(void* ptr);
void QEvent_DestroyQEventDefault(void* ptr);
long long QEvent_Type(void* ptr);
char QEvent_IsAccepted(void* ptr);
char QEvent_Spontaneous(void* ptr);
unsigned short QEvent_T(void* ptr);
void QEvent_SetT(void* ptr, unsigned short vus);
void* QGenericArgument_NewQGenericArgument(char* name, void* data);
struct QtCore_PackedString QGenericArgument_Name(void* ptr);
void* QGenericArgument_Data(void* ptr);
void* QGenericReturnArgument_NewQGenericReturnArgument(char* name, void* data);
void* QIODevice_Peek2(void* ptr, long long maxSize);
void* QIODevice_Read2(void* ptr, long long maxSize);
void* QIODevice_ReadAll(void* ptr);
void* QIODevice_ReadLine2(void* ptr, long long maxSize);
void* QIODevice_NewQIODevice();
void* QIODevice_NewQIODevice2(void* parent);
char QIODevice_GetChar(void* ptr, char* c);
char QIODevice_Open(void* ptr, long long mode);
char QIODevice_OpenDefault(void* ptr, long long mode);
char QIODevice_PutChar(void* ptr, char* c);
char QIODevice_Reset(void* ptr);
char QIODevice_ResetDefault(void* ptr);
char QIODevice_Seek(void* ptr, long long pos);
char QIODevice_SeekDefault(void* ptr, long long pos);
char QIODevice_WaitForBytesWritten(void* ptr, int msecs);
char QIODevice_WaitForBytesWrittenDefault(void* ptr, int msecs);
char QIODevice_WaitForReadyRead(void* ptr, int msecs);
char QIODevice_WaitForReadyReadDefault(void* ptr, int msecs);
long long QIODevice_Peek(void* ptr, char* data, long long maxSize);
long long QIODevice_Read(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadData(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLine(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLineData(void* ptr, char* data, long long maxSize);
long long QIODevice_ReadLineDataDefault(void* ptr, char* data, long long maxSize);
long long QIODevice_Skip(void* ptr, long long maxSize);
long long QIODevice_Write3(void* ptr, void* byteArray);
long long QIODevice_Write2(void* ptr, char* data);
long long QIODevice_Write(void* ptr, char* data, long long maxSize);
long long QIODevice_WriteData(void* ptr, char* data, long long maxSize);
void QIODevice_ConnectAboutToClose(void* ptr, long long t);
void QIODevice_DisconnectAboutToClose(void* ptr);
void QIODevice_AboutToClose(void* ptr);
void QIODevice_ConnectBytesWritten(void* ptr, long long t);
void QIODevice_DisconnectBytesWritten(void* ptr);
void QIODevice_BytesWritten(void* ptr, long long bytes);
void QIODevice_ConnectChannelBytesWritten(void* ptr, long long t);
void QIODevice_DisconnectChannelBytesWritten(void* ptr);
void QIODevice_ChannelBytesWritten(void* ptr, int channel, long long bytes);
void QIODevice_ConnectChannelReadyRead(void* ptr, long long t);
void QIODevice_DisconnectChannelReadyRead(void* ptr);
void QIODevice_ChannelReadyRead(void* ptr, int channel);
void QIODevice_Close(void* ptr);
void QIODevice_CloseDefault(void* ptr);
void QIODevice_CommitTransaction(void* ptr);
void QIODevice_ConnectReadChannelFinished(void* ptr, long long t);
void QIODevice_DisconnectReadChannelFinished(void* ptr);
void QIODevice_ReadChannelFinished(void* ptr);
void QIODevice_ConnectReadyRead(void* ptr, long long t);
void QIODevice_DisconnectReadyRead(void* ptr);
void QIODevice_ReadyRead(void* ptr);
void QIODevice_RollbackTransaction(void* ptr);
void QIODevice_SetCurrentReadChannel(void* ptr, int channel);
void QIODevice_SetCurrentWriteChannel(void* ptr, int channel);
void QIODevice_SetErrorString(void* ptr, struct QtCore_PackedString str);
void QIODevice_SetOpenMode(void* ptr, long long openMode);
void QIODevice_SetTextModeEnabled(void* ptr, char enabled);
void QIODevice_StartTransaction(void* ptr);
void QIODevice_UngetChar(void* ptr, char* c);
void QIODevice_DestroyQIODevice(void* ptr);
void QIODevice_DestroyQIODeviceDefault(void* ptr);
long long QIODevice_OpenMode(void* ptr);
struct QtCore_PackedString QIODevice_ErrorString(void* ptr);
char QIODevice_AtEnd(void* ptr);
char QIODevice_AtEndDefault(void* ptr);
char QIODevice_CanReadLine(void* ptr);
char QIODevice_CanReadLineDefault(void* ptr);
char QIODevice_IsOpen(void* ptr);
char QIODevice_IsReadable(void* ptr);
char QIODevice_IsSequential(void* ptr);
char QIODevice_IsSequentialDefault(void* ptr);
char QIODevice_IsTextModeEnabled(void* ptr);
char QIODevice_IsTransactionStarted(void* ptr);
char QIODevice_IsWritable(void* ptr);
int QIODevice_CurrentReadChannel(void* ptr);
int QIODevice_CurrentWriteChannel(void* ptr);
int QIODevice_ReadChannelCount(void* ptr);
int QIODevice_WriteChannelCount(void* ptr);
long long QIODevice_BytesAvailable(void* ptr);
long long QIODevice_BytesAvailableDefault(void* ptr);
long long QIODevice_BytesToWrite(void* ptr);
long long QIODevice_BytesToWriteDefault(void* ptr);
long long QIODevice_Pos(void* ptr);
long long QIODevice_PosDefault(void* ptr);
long long QIODevice_Size(void* ptr);
long long QIODevice_SizeDefault(void* ptr);
void* QJsonArray_QJsonArray_FromStringList(struct QtCore_PackedString list);
void* QJsonArray_QJsonArray_FromVariantList(void* list);
void* QJsonArray_NewQJsonArray();
void* QJsonArray_NewQJsonArray4(void* other);
void* QJsonArray_NewQJsonArray3(void* other);
void* QJsonArray_TakeAt(void* ptr, int i);
void QJsonArray_Append(void* ptr, void* value);
void QJsonArray_Insert(void* ptr, int i, void* value);
void QJsonArray_Pop_back(void* ptr);
void QJsonArray_Pop_front(void* ptr);
void QJsonArray_Prepend(void* ptr, void* value);
void QJsonArray_Push_back(void* ptr, void* value);
void QJsonArray_Push_front(void* ptr, void* value);
void QJsonArray_RemoveAt(void* ptr, int i);
void QJsonArray_RemoveFirst(void* ptr);
void QJsonArray_RemoveLast(void* ptr);
void QJsonArray_Replace(void* ptr, int i, void* value);
void QJsonArray_Swap(void* ptr, void* other);
void QJsonArray_DestroyQJsonArray(void* ptr);
void* QJsonArray_At(void* ptr, int i);
void* QJsonArray_First(void* ptr);
void* QJsonArray_Last(void* ptr);
struct QtCore_PackedList QJsonArray_ToVariantList(void* ptr);
char QJsonArray_Contains(void* ptr, void* value);
char QJsonArray_Empty(void* ptr);
char QJsonArray_IsEmpty(void* ptr);
int QJsonArray_Count(void* ptr);
int QJsonArray_Size(void* ptr);
void* QJsonArray___fromVariantList_list_atList(void* ptr, int i);
void QJsonArray___fromVariantList_list_setList(void* ptr, void* i);
void* QJsonArray___fromVariantList_list_newList(void* ptr);
void* QJsonArray___toVariantList_atList(void* ptr, int i);
void QJsonArray___toVariantList_setList(void* ptr, void* i);
void* QJsonArray___toVariantList_newList(void* ptr);
void* QJsonDocument_QJsonDocument_FromBinaryData(void* data, long long validation);
void* QJsonDocument_QJsonDocument_FromJson(void* json, void* error);
void* QJsonDocument_QJsonDocument_FromRawData(char* data, int size, long long validation);
void* QJsonDocument_QJsonDocument_FromVariant(void* variant);
void* QJsonDocument_NewQJsonDocument();
void* QJsonDocument_NewQJsonDocument5(void* other);
void* QJsonDocument_NewQJsonDocument3(void* array);
void* QJsonDocument_NewQJsonDocument4(void* other);
void* QJsonDocument_NewQJsonDocument2(void* object);
void QJsonDocument_SetArray(void* ptr, void* array);
void QJsonDocument_SetObject(void* ptr, void* object);
void QJsonDocument_Swap(void* ptr, void* other);
void QJsonDocument_DestroyQJsonDocument(void* ptr);
void* QJsonDocument_ToBinaryData(void* ptr);
void* QJsonDocument_ToJson(void* ptr);
void* QJsonDocument_ToJson2(void* ptr, long long format);
void* QJsonDocument_Array(void* ptr);
void* QJsonDocument_Object(void* ptr);
void* QJsonDocument_ToVariant(void* ptr);
char QJsonDocument_IsArray(void* ptr);
char QJsonDocument_IsEmpty(void* ptr);
char QJsonDocument_IsNull(void* ptr);
char QJsonDocument_IsObject(void* ptr);
struct QtCore_PackedString QJsonDocument_RawData(void* ptr, int size);
void* QJsonObject_QJsonObject_FromVariantHash(void* hash);
void* QJsonObject_NewQJsonObject();
void* QJsonObject_NewQJsonObject4(void* other);
void* QJsonObject_NewQJsonObject3(void* other);
void* QJsonObject_Take(void* ptr, struct QtCore_PackedString key);
void QJsonObject_Remove(void* ptr, struct QtCore_PackedString key);
void QJsonObject_Swap(void* ptr, void* other);
void QJsonObject_DestroyQJsonObject(void* ptr);
void* QJsonObject_Value2(void* ptr, void* key);
void* QJsonObject_Value(void* ptr, struct QtCore_PackedString key);
struct QtCore_PackedString QJsonObject_Keys(void* ptr);
struct QtCore_PackedList QJsonObject_ToVariantHash(void* ptr);
struct QtCore_PackedList QJsonObject_ToVariantMap(void* ptr);
char QJsonObject_Contains2(void* ptr, void* key);
char QJsonObject_Contains(void* ptr, struct QtCore_PackedString key);
char QJsonObject_Empty(void* ptr);
char QJsonObject_IsEmpty(void* ptr);
int QJsonObject_Count(void* ptr);
int QJsonObject_Length(void* ptr);
int QJsonObject_Size(void* ptr);
void* QJsonObject___fromVariantHash_hash_atList(void* ptr, struct QtCore_PackedString v, int i);
void QJsonObject___fromVariantHash_hash_setList(void* ptr, struct QtCore_PackedString key, void* i);
void* QJsonObject___fromVariantHash_hash_newList(void* ptr);
struct QtCore_PackedList QJsonObject___fromVariantHash_hash_keyList(void* ptr);
void* QJsonObject___toVariantHash_atList(void* ptr, struct QtCore_PackedString v, int i);
void QJsonObject___toVariantHash_setList(void* ptr, struct QtCore_PackedString key, void* i);
void* QJsonObject___toVariantHash_newList(void* ptr);
struct QtCore_PackedList QJsonObject___toVariantHash_keyList(void* ptr);
void* QJsonObject___toVariantMap_atList(void* ptr, struct QtCore_PackedString v, int i);
void QJsonObject___toVariantMap_setList(void* ptr, struct QtCore_PackedString key, void* i);
void* QJsonObject___toVariantMap_newList(void* ptr);
struct QtCore_PackedList QJsonObject___toVariantMap_keyList(void* ptr);
struct QtCore_PackedString QJsonObject_____fromVariantHash_hash_keyList_atList(void* ptr, int i);
void QJsonObject_____fromVariantHash_hash_keyList_setList(void* ptr, struct QtCore_PackedString i);
void* QJsonObject_____fromVariantHash_hash_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonObject_____fromVariantMap_map_keyList_atList(void* ptr, int i);
void QJsonObject_____fromVariantMap_map_keyList_setList(void* ptr, struct QtCore_PackedString i);
void* QJsonObject_____fromVariantMap_map_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonObject_____toVariantHash_keyList_atList(void* ptr, int i);
void QJsonObject_____toVariantHash_keyList_setList(void* ptr, struct QtCore_PackedString i);
void* QJsonObject_____toVariantHash_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonObject_____toVariantMap_keyList_atList(void* ptr, int i);
void QJsonObject_____toVariantMap_keyList_setList(void* ptr, struct QtCore_PackedString i);
void* QJsonObject_____toVariantMap_keyList_newList(void* ptr);
struct QtCore_PackedString QJsonParseError_ErrorString(void* ptr);
long long QJsonParseError_Error(void* ptr);
void QJsonParseError_SetError(void* ptr, long long vqj);
int QJsonParseError_Offset(void* ptr);
void QJsonParseError_SetOffset(void* ptr, int vin);
void* QJsonValue_QJsonValue_FromVariant(void* variant);
void* QJsonValue_NewQJsonValue12(void* other);
void* QJsonValue_NewQJsonValue(long long ty);
void* QJsonValue_NewQJsonValue7(void* s);
void* QJsonValue_NewQJsonValue2(char b);
void* QJsonValue_NewQJsonValue9(void* a);
void* QJsonValue_NewQJsonValue10(void* o);
void* QJsonValue_NewQJsonValue11(void* other);
void* QJsonValue_NewQJsonValue6(struct QtCore_PackedString s);
void* QJsonValue_NewQJsonValue8(char* s);
void* QJsonValue_NewQJsonValue3(double n);
void* QJsonValue_NewQJsonValue4(int n);
void* QJsonValue_NewQJsonValue5(long long n);
void QJsonValue_Swap(void* ptr, void* other);
void QJsonValue_DestroyQJsonValue(void* ptr);
void* QJsonValue_ToArray2(void* ptr);
void* QJsonValue_ToArray(void* ptr, void* defaultValue);
void* QJsonValue_ToObject2(void* ptr);
void* QJsonValue_ToObject(void* ptr, void* defaultValue);
long long QJsonValue_Type(void* ptr);
struct QtCore_PackedString QJsonValue_ToString(void* ptr);
struct QtCore_PackedString QJsonValue_ToString2(void* ptr, struct QtCore_PackedString defaultValue);
void* QJsonValue_ToVariant(void* ptr);
char QJsonValue_IsArray(void* ptr);
char QJsonValue_IsBool(void* ptr);
char QJsonValue_IsDouble(void* ptr);
char QJsonValue_IsNull(void* ptr);
char QJsonValue_IsObject(void* ptr);
char QJsonValue_IsString(void* ptr);
char QJsonValue_IsUndefined(void* ptr);
char QJsonValue_ToBool(void* ptr, char defaultValue);
double QJsonValue_ToDouble(void* ptr, double defaultValue);
int QJsonValue_ToInt(void* ptr, int defaultValue);
void* QLatin1Char_NewQLatin1Char(char* c);
struct QtCore_PackedString QLatin1Char_ToLatin1(void* ptr);
unsigned short QLatin1Char_Unicode(void* ptr);
void* QLatin1String_NewQLatin1String();
void* QLatin1String_NewQLatin1String5(void* str);
void* QLatin1String_NewQLatin1String3(char* first, char* last);
void* QLatin1String_NewQLatin1String2(char* str);
void* QLatin1String_NewQLatin1String4(char* str, int size);
void QLatin1String_Chop(void* ptr, int length);
void QLatin1String_Truncate(void* ptr, int length);
void* QLatin1String_Chopped(void* ptr, int length);
void* QLatin1String_Left(void* ptr, int length);
void* QLatin1String_Mid(void* ptr, int start);
void* QLatin1String_Mid2(void* ptr, int start, int length);
void* QLatin1String_Right(void* ptr, int length);
void* QLatin1String_Trimmed(void* ptr);
char QLatin1String_EndsWith3(void* ptr, void* ch);
char QLatin1String_EndsWith4(void* ptr, void* ch, long long cs);
char QLatin1String_EndsWith2(void* ptr, void* l1, long long cs);
char QLatin1String_EndsWith(void* ptr, void* str, long long cs);
char QLatin1String_IsEmpty(void* ptr);
char QLatin1String_IsNull(void* ptr);
char QLatin1String_StartsWith3(void* ptr, void* ch);
char QLatin1String_StartsWith4(void* ptr, void* ch, long long cs);
char QLatin1String_StartsWith2(void* ptr, void* l1, long long cs);
char QLatin1String_StartsWith(void* ptr, void* str, long long cs);
struct QtCore_PackedString QLatin1String_Data(void* ptr);
struct QtCore_PackedString QLatin1String_Latin1(void* ptr);
int QLatin1String_Size(void* ptr);
void* QLine_NewQLine();
void* QLine_NewQLine2(void* p1, void* p2);
void* QLine_NewQLine3(int x1, int y1, int x2, int y2);
void QLine_SetLine(void* ptr, int x1, int y1, int x2, int y2);
void QLine_SetP1(void* ptr, void* p1);
void QLine_SetP2(void* ptr, void* p2);
void QLine_SetPoints(void* ptr, void* p1, void* p2);
void QLine_Translate(void* ptr, void* offset);
void QLine_Translate2(void* ptr, int dx, int dy);
void* QLine_Translated(void* ptr, void* offset);
void* QLine_Translated2(void* ptr, int dx, int dy);
void* QLine_Center(void* ptr);
void* QLine_P1(void* ptr);
void* QLine_P2(void* ptr);
char QLine_IsNull(void* ptr);
int QLine_Dx(void* ptr);
int QLine_Dy(void* ptr);
int QLine_X1(void* ptr);
int QLine_X2(void* ptr);
int QLine_Y1(void* ptr);
int QLine_Y2(void* ptr);
void* QLineF_QLineF_FromPolar(double length, double angle);
void* QLineF_NewQLineF();
void* QLineF_NewQLineF4(void* line);
void* QLineF_NewQLineF2(void* p1, void* p2);
void* QLineF_NewQLineF3(double x1, double y1, double x2, double y2);
void QLineF_SetAngle(void* ptr, double angle);
void QLineF_SetLength(void* ptr, double length);
void QLineF_SetLine(void* ptr, double x1, double y1, double x2, double y2);
void QLineF_SetP1(void* ptr, void* p1);
void QLineF_SetP2(void* ptr, void* p2);
void QLineF_SetPoints(void* ptr, void* p1, void* p2);
void QLineF_Translate(void* ptr, void* offset);
void QLineF_Translate2(void* ptr, double dx, double dy);
void* QLineF_ToLine(void* ptr);
void* QLineF_NormalVector(void* ptr);
void* QLineF_Translated(void* ptr, void* offset);
void* QLineF_Translated2(void* ptr, double dx, double dy);
void* QLineF_UnitVector(void* ptr);
long long QLineF_Intersect(void* ptr, void* line, void* intersectionPoint);
void* QLineF_Center(void* ptr);
void* QLineF_P1(void* ptr);
void* QLineF_P2(void* ptr);
void* QLineF_PointAt(void* ptr, double t);
char QLineF_IsNull(void* ptr);
double QLineF_Angle(void* ptr);
double QLineF_AngleTo(void* ptr, void* line);
double QLineF_Dx(void* ptr);
double QLineF_Dy(void* ptr);
double QLineF_Length(void* ptr);
double QLineF_X1(void* ptr);
double QLineF_X2(void* ptr);
double QLineF_Y1(void* ptr);
double QLineF_Y2(void* ptr);
struct QtCore_PackedList QLocale_QLocale_MatchingLocales(long long language, long long scri, long long country);
void* QLocale_QLocale_C();
void* QLocale_QLocale_System();
void* QLocale_NewQLocale();
void* QLocale_NewQLocale3(long long language, long long country);
void* QLocale_NewQLocale4(long long language, long long scri, long long country);
void* QLocale_NewQLocale5(void* other);
void* QLocale_NewQLocale2(struct QtCore_PackedString name);
struct QtCore_PackedString QLocale_QLocale_CountryToString(long long country);
struct QtCore_PackedString QLocale_FormattedDataSize(void* ptr, long long bytes, int precision, long long format);
struct QtCore_PackedString QLocale_QLocale_LanguageToString(long long language);
struct QtCore_PackedString QLocale_QLocale_ScriptToString(long long scri);
void QLocale_QLocale_SetDefault(void* locale);
void QLocale_SetNumberOptions(void* ptr, long long options);
void QLocale_Swap(void* ptr, void* other);
void QLocale_DestroyQLocale(void* ptr);
void* QLocale_DecimalPoint(void* ptr);
void* QLocale_Exponential(void* ptr);
void* QLocale_GroupSeparator(void* ptr);
void* QLocale_NegativeSign(void* ptr);
void* QLocale_Percent(void* ptr);
void* QLocale_PositiveSign(void* ptr);
void* QLocale_ZeroDigit(void* ptr);
void* QLocale_ToDate(void* ptr, struct QtCore_PackedString stri, long long format);
void* QLocale_ToDate2(void* ptr, struct QtCore_PackedString stri, struct QtCore_PackedString format);
void* QLocale_ToDateTime(void* ptr, struct QtCore_PackedString stri, long long format);
void* QLocale_ToDateTime2(void* ptr, struct QtCore_PackedString stri, struct QtCore_PackedString format);
struct QtCore_PackedList QLocale_Weekdays(void* ptr);
long long QLocale_Country(void* ptr);
long long QLocale_Language(void* ptr);
long long QLocale_MeasurementSystem(void* ptr);
long long QLocale_NumberOptions(void* ptr);
long long QLocale_Script(void* ptr);
struct QtCore_PackedString QLocale_AmText(void* ptr);
struct QtCore_PackedString QLocale_Bcp47Name(void* ptr);
struct QtCore_PackedString QLocale_CreateSeparatedList(void* ptr, struct QtCore_PackedString list);
struct QtCore_PackedString QLocale_CurrencySymbol(void* ptr, long long format);
struct QtCore_PackedString QLocale_DateFormat(void* ptr, long long format);
struct QtCore_PackedString QLocale_DateTimeFormat(void* ptr, long long format);
struct QtCore_PackedString QLocale_DayName(void* ptr, int day, long long ty);
struct QtCore_PackedString QLocale_MonthName(void* ptr, int month, long long ty);
struct QtCore_PackedString QLocale_Name(void* ptr);
struct QtCore_PackedString QLocale_NativeCountryName(void* ptr);
struct QtCore_PackedString QLocale_NativeLanguageName(void* ptr);
struct QtCore_PackedString QLocale_PmText(void* ptr);
struct QtCore_PackedString QLocale_QuoteString(void* ptr, struct QtCore_PackedString str, long long style);
struct QtCore_PackedString QLocale_QuoteString2(void* ptr, void* str, long long style);
struct QtCore_PackedString QLocale_StandaloneDayName(void* ptr, int day, long long ty);
struct QtCore_PackedString QLocale_StandaloneMonthName(void* ptr, int month, long long ty);
struct QtCore_PackedString QLocale_TimeFormat(void* ptr, long long format);
struct QtCore_PackedString QLocale_ToCurrencyString7(void* ptr, double value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToCurrencyString8(void* ptr, double value, struct QtCore_PackedString symbol, int precision);
struct QtCore_PackedString QLocale_ToCurrencyString10(void* ptr, float i, struct QtCore_PackedString symbol, int precision);
struct QtCore_PackedString QLocale_ToCurrencyString9(void* ptr, float value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToCurrencyString5(void* ptr, int value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToCurrencyString(void* ptr, long long value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToCurrencyString2(void* ptr, unsigned long long value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToCurrencyString3(void* ptr, short value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToCurrencyString6(void* ptr, unsigned int value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToCurrencyString4(void* ptr, unsigned short value, struct QtCore_PackedString symbol);
struct QtCore_PackedString QLocale_ToLower(void* ptr, struct QtCore_PackedString str);
struct QtCore_PackedString QLocale_ToString15(void* ptr, void* date, long long format);
struct QtCore_PackedString QLocale_ToString12(void* ptr, void* date, void* format);
struct QtCore_PackedString QLocale_ToString9(void* ptr, void* date, struct QtCore_PackedString format);
struct QtCore_PackedString QLocale_ToString17(void* ptr, void* dateTime, long long format);
struct QtCore_PackedString QLocale_ToString14(void* ptr, void* dateTime, void* format);
struct QtCore_PackedString QLocale_ToString11(void* ptr, void* dateTime, struct QtCore_PackedString format);
struct QtCore_PackedString QLocale_ToString16(void* ptr, void* ti, long long format);
struct QtCore_PackedString QLocale_ToString13(void* ptr, void* ti, void* format);
struct QtCore_PackedString QLocale_ToString10(void* ptr, void* ti, struct QtCore_PackedString format);
struct QtCore_PackedString QLocale_ToString7(void* ptr, double i, char* ff, int prec);
struct QtCore_PackedString QLocale_ToString8(void* ptr, float i, char* ff, int prec);
struct QtCore_PackedString QLocale_ToString5(void* ptr, int i);
struct QtCore_PackedString QLocale_ToString(void* ptr, long long i);
struct QtCore_PackedString QLocale_ToString2(void* ptr, unsigned long long i);
struct QtCore_PackedString QLocale_ToString3(void* ptr, short i);
struct QtCore_PackedString QLocale_ToString6(void* ptr, unsigned int i);
struct QtCore_PackedString QLocale_ToString4(void* ptr, unsigned short i);
struct QtCore_PackedString QLocale_ToUpper(void* ptr, struct QtCore_PackedString str);
struct QtCore_PackedString QLocale_UiLanguages(void* ptr);
void* QLocale_ToTime(void* ptr, struct QtCore_PackedString stri, long long format);
void* QLocale_ToTime2(void* ptr, struct QtCore_PackedString stri, struct QtCore_PackedString format);
long long QLocale_FirstDayOfWeek(void* ptr);
long long QLocale_TextDirection(void* ptr);
double QLocale_ToDouble3(void* ptr, void* s, char* ok);
double QLocale_ToDouble(void* ptr, struct QtCore_PackedString s, char* ok);
double QLocale_ToDouble2(void* ptr, void* s, char* ok);
float QLocale_ToFloat3(void* ptr, void* s, char* ok);
float QLocale_ToFloat(void* ptr, struct QtCore_PackedString s, char* ok);
float QLocale_ToFloat2(void* ptr, void* s, char* ok);
int QLocale_ToInt3(void* ptr, void* s, char* ok);
int QLocale_ToInt(void* ptr, struct QtCore_PackedString s, char* ok);
int QLocale_ToInt2(void* ptr, void* s, char* ok);
long long QLocale_ToLongLong3(void* ptr, void* s, char* ok);
long long QLocale_ToLongLong(void* ptr, struct QtCore_PackedString s, char* ok);
long long QLocale_ToLongLong2(void* ptr, void* s, char* ok);
unsigned long long QLocale_ToULongLong3(void* ptr, void* s, char* ok);
unsigned long long QLocale_ToULongLong(void* ptr, struct QtCore_PackedString s, char* ok);
unsigned long long QLocale_ToULongLong2(void* ptr, void* s, char* ok);
short QLocale_ToShort3(void* ptr, void* s, char* ok);
short QLocale_ToShort(void* ptr, struct QtCore_PackedString s, char* ok);
short QLocale_ToShort2(void* ptr, void* s, char* ok);
unsigned int QLocale_ToUInt3(void* ptr, void* s, char* ok);
unsigned int QLocale_ToUInt(void* ptr, struct QtCore_PackedString s, char* ok);
unsigned int QLocale_ToUInt2(void* ptr, void* s, char* ok);
unsigned short QLocale_ToUShort3(void* ptr, void* s, char* ok);
unsigned short QLocale_ToUShort(void* ptr, struct QtCore_PackedString s, char* ok);
unsigned short QLocale_ToUShort2(void* ptr, void* s, char* ok);
void* QLocale___matchingLocales_atList(void* ptr, int i);
void QLocale___matchingLocales_setList(void* ptr, void* i);
void* QLocale___matchingLocales_newList(void* ptr);
long long QLocale___weekdays_atList(void* ptr, int i);
void QLocale___weekdays_setList(void* ptr, long long i);
void* QLocale___weekdays_newList(void* ptr);
void* QMargins_NewQMargins();
void* QMargins_NewQMargins2(int left, int top, int right, int bottom);
void QMargins_SetBottom(void* ptr, int bottom);
void QMargins_SetLeft(void* ptr, int left);
void QMargins_SetRight(void* ptr, int right);
void QMargins_SetTop(void* ptr, int Top);
char QMargins_IsNull(void* ptr);
int QMargins_Bottom(void* ptr);
int QMargins_Left(void* ptr);
int QMargins_Right(void* ptr);
int QMargins_Top(void* ptr);
void* QMarginsF_NewQMarginsF();
void* QMarginsF_NewQMarginsF3(void* margins);
void* QMarginsF_NewQMarginsF2(double left, double top, double right, double bottom);
void QMarginsF_SetBottom(void* ptr, double bottom);
void QMarginsF_SetLeft(void* ptr, double left);
void QMarginsF_SetRight(void* ptr, double right);
void QMarginsF_SetTop(void* ptr, double Top);
void* QMarginsF_ToMargins(void* ptr);
char QMarginsF_IsNull(void* ptr);
double QMarginsF_Bottom(void* ptr);
double QMarginsF_Left(void* ptr);
double QMarginsF_Right(void* ptr);
double QMarginsF_Top(void* ptr);
struct QtCore_PackedString QMetaClassInfo_Name(void* ptr);
struct QtCore_PackedString QMetaClassInfo_Value(void* ptr);
void* QMetaEnum_ValueToKeys(void* ptr, int value);
char QMetaEnum_IsFlag(void* ptr);
char QMetaEnum_IsScoped(void* ptr);
char QMetaEnum_IsValid(void* ptr);
struct QtCore_PackedString QMetaEnum_EnumName(void* ptr);
struct QtCore_PackedString QMetaEnum_Key(void* ptr, int index);
struct QtCore_PackedString QMetaEnum_Name(void* ptr);
struct QtCore_PackedString QMetaEnum_Scope(void* ptr);
struct QtCore_PackedString QMetaEnum_ValueToKey(void* ptr, int value);
int QMetaEnum_KeyCount(void* ptr);
int QMetaEnum_KeyToValue(void* ptr, char* key, char* ok);
int QMetaEnum_KeysToValue(void* ptr, char* keys, char* ok);
int QMetaEnum_Value(void* ptr, int index);
void* QMetaMethod_MethodSignature(void* ptr);
void* QMetaMethod_Name(void* ptr);
struct QtCore_PackedList QMetaMethod_ParameterNames(void* ptr);
struct QtCore_PackedList QMetaMethod_ParameterTypes(void* ptr);
long long QMetaMethod_Access(void* ptr);
long long QMetaMethod_MethodType(void* ptr);
char QMetaMethod_Invoke4(void* ptr, void* object, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_Invoke2(void* ptr, void* object, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_Invoke3(void* ptr, void* object, long long connectionType, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_Invoke(void* ptr, void* object, long long connectionType, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_InvokeOnGadget2(void* ptr, void* gadget, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_InvokeOnGadget(void* ptr, void* gadget, void* returnValue, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaMethod_IsValid(void* ptr);
struct QtCore_PackedString QMetaMethod_Tag(void* ptr);
struct QtCore_PackedString QMetaMethod_TypeName(void* ptr);
int QMetaMethod_MethodIndex(void* ptr);
int QMetaMethod_ParameterCount(void* ptr);
int QMetaMethod_ParameterType(void* ptr, int index);
int QMetaMethod_ReturnType(void* ptr);
int QMetaMethod_Revision(void* ptr);
void* QMetaMethod___parameterNames_atList(void* ptr, int i);
void QMetaMethod___parameterNames_setList(void* ptr, void* i);
void* QMetaMethod___parameterNames_newList(void* ptr);
void* QMetaMethod___parameterTypes_atList(void* ptr, int i);
void QMetaMethod___parameterTypes_setList(void* ptr, void* i);
void* QMetaMethod___parameterTypes_newList(void* ptr);
void* QMetaObject_QMetaObject_NormalizedSignature(char* method);
void* QMetaObject_QMetaObject_NormalizedType(char* ty);
char QMetaObject_QMetaObject_CheckConnectArgs2(void* sign, void* method);
char QMetaObject_QMetaObject_CheckConnectArgs(char* sign, char* method);
char QMetaObject_QMetaObject_InvokeMethod4(void* obj, char* member, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_QMetaObject_InvokeMethod2(void* obj, char* member, void* ret, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_QMetaObject_InvokeMethod3(void* obj, char* member, long long ty, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_QMetaObject_InvokeMethod(void* obj, char* member, long long ty, void* ret, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
void QMetaObject_QMetaObject_ConnectSlotsByName(void* object);
void* QMetaObject_Constructor(void* ptr, int index);
void* QMetaObject_Method(void* ptr, int index);
void* QMetaObject_NewInstance(void* ptr, void* val0, void* val1, void* val2, void* val3, void* val4, void* val5, void* val6, void* val7, void* val8, void* val9);
char QMetaObject_Inherits(void* ptr, void* metaObject);
void* QMetaObject_SuperClass(void* ptr);
struct QtCore_PackedString QMetaObject_ClassName(void* ptr);
int QMetaObject_ClassInfoCount(void* ptr);
int QMetaObject_ClassInfoOffset(void* ptr);
int QMetaObject_ConstructorCount(void* ptr);
int QMetaObject_EnumeratorCount(void* ptr);
int QMetaObject_EnumeratorOffset(void* ptr);
int QMetaObject_IndexOfClassInfo(void* ptr, char* name);
int QMetaObject_IndexOfConstructor(void* ptr, char* constructor);
int QMetaObject_IndexOfEnumerator(void* ptr, char* name);
int QMetaObject_IndexOfMethod(void* ptr, char* method);
int QMetaObject_IndexOfProperty(void* ptr, char* name);
int QMetaObject_IndexOfSignal(void* ptr, char* sign);
int QMetaObject_IndexOfSlot(void* ptr, char* slot);
int QMetaObject_MethodCount(void* ptr);
int QMetaObject_MethodOffset(void* ptr);
int QMetaObject_PropertyCount(void* ptr);
int QMetaObject_PropertyOffset(void* ptr);
void* QMetaProperty_NotifySignal(void* ptr);
void* QMetaProperty_Read(void* ptr, void* object);
void* QMetaProperty_ReadOnGadget(void* ptr, void* gadget);
long long QMetaProperty_Type(void* ptr);
char QMetaProperty_HasNotifySignal(void* ptr);
char QMetaProperty_IsConstant(void* ptr);
char QMetaProperty_IsDesignable(void* ptr, void* object);
char QMetaProperty_IsEnumType(void* ptr);
char QMetaProperty_IsFinal(void* ptr);
char QMetaProperty_IsFlagType(void* ptr);
char QMetaProperty_IsReadable(void* ptr);
char QMetaProperty_IsResettable(void* ptr);
char QMetaProperty_IsScriptable(void* ptr, void* object);
char QMetaProperty_IsStored(void* ptr, void* object);
char QMetaProperty_IsUser(void* ptr, void* object);
char QMetaProperty_IsValid(void* ptr);
char QMetaProperty_IsWritable(void* ptr);
char QMetaProperty_Reset(void* ptr, void* object);
char QMetaProperty_ResetOnGadget(void* ptr, void* gadget);
char QMetaProperty_Write(void* ptr, void* object, void* value);
char QMetaProperty_WriteOnGadget(void* ptr, void* gadget, void* value);
struct QtCore_PackedString QMetaProperty_Name(void* ptr);
struct QtCore_PackedString QMetaProperty_TypeName(void* ptr);
int QMetaProperty_NotifySignalIndex(void* ptr);
int QMetaProperty_PropertyIndex(void* ptr);
int QMetaProperty_Revision(void* ptr);
int QMetaProperty_UserType(void* ptr);
void* QMimeData_NewQMimeData();
void QMimeData_Clear(void* ptr);
void QMimeData_RemoveFormat(void* ptr, struct QtCore_PackedString mimeType);
void QMimeData_SetColorData(void* ptr, void* color);
void QMimeData_SetData(void* ptr, struct QtCore_PackedString mimeType, void* data);
void QMimeData_SetHtml(void* ptr, struct QtCore_PackedString html);
void QMimeData_SetImageData(void* ptr, void* image);
void QMimeData_SetText(void* ptr, struct QtCore_PackedString text);
void QMimeData_SetUrls(void* ptr, void* urls);
void QMimeData_DestroyQMimeData(void* ptr);
void QMimeData_DestroyQMimeDataDefault(void* ptr);
void* QMimeData_Data(void* ptr, struct QtCore_PackedString mimeType);
struct QtCore_PackedList QMimeData_Urls(void* ptr);
struct QtCore_PackedString QMimeData_Html(void* ptr);
struct QtCore_PackedString QMimeData_Text(void* ptr);
struct QtCore_PackedString QMimeData_Formats(void* ptr);
struct QtCore_PackedString QMimeData_FormatsDefault(void* ptr);
void* QMimeData_ColorData(void* ptr);
void* QMimeData_ImageData(void* ptr);
void* QMimeData_RetrieveData(void* ptr, struct QtCore_PackedString mimeType, long long ty);
void* QMimeData_RetrieveDataDefault(void* ptr, struct QtCore_PackedString mimeType, long long ty);
char QMimeData_HasColor(void* ptr);
char QMimeData_HasFormat(void* ptr, struct QtCore_PackedString mimeType);
char QMimeData_HasFormatDefault(void* ptr, struct QtCore_PackedString mimeType);
char QMimeData_HasHtml(void* ptr);
char QMimeData_HasImage(void* ptr);
char QMimeData_HasText(void* ptr);
char QMimeData_HasUrls(void* ptr);
void* QMimeData___setUrls_urls_atList(void* ptr, int i);
void QMimeData___setUrls_urls_setList(void* ptr, void* i);
void* QMimeData___setUrls_urls_newList(void* ptr);
void* QMimeData___urls_atList(void* ptr, int i);
void QMimeData___urls_setList(void* ptr, void* i);
void* QMimeData___urls_newList(void* ptr);
void* QModelIndex_NewQModelIndex();
void* QModelIndex_Parent(void* ptr);
void* QModelIndex_Sibling(void* ptr, int row, int column);
void* QModelIndex_SiblingAtColumn(void* ptr, int column);
void* QModelIndex_SiblingAtRow(void* ptr, int row);
void* QModelIndex_Data(void* ptr, int role);
long long QModelIndex_Flags(void* ptr);
char QModelIndex_IsValid(void* ptr);
void* QModelIndex_Model(void* ptr);
int QModelIndex_Column(void* ptr);
int QModelIndex_Row(void* ptr);
uintptr_t QModelIndex_InternalId(void* ptr);
void* QModelIndex_InternalPointer(void* ptr);
void* QObject_NewQObject(void* parent);
struct QtCore_PackedString QObject_QObject_Tr(char* sourceText, char* disambiguation, int n);
char QObject_BlockSignals(void* ptr, char block);
char QObject_QObject_Disconnect2(void* sender, void* sign, void* receiver, void* method);
char QObject_QObject_Disconnect(void* sender, char* sign, void* receiver, char* method);
char QObject_Event(void* ptr, void* e);
char QObject_EventDefault(void* ptr, void* e);
char QObject_EventFilter(void* ptr, void* watched, void* event);
char QObject_EventFilterDefault(void* ptr, void* watched, void* event);
char QObject_SetProperty(void* ptr, char* name, void* value);
int QObject_StartTimer(void* ptr, int interval, long long timerType);
void QObject_ChildEvent(void* ptr, void* event);
void QObject_ChildEventDefault(void* ptr, void* event);
void QObject_ConnectNotify(void* ptr, void* sign);
void QObject_ConnectNotifyDefault(void* ptr, void* sign);
void QObject_CustomEvent(void* ptr, void* event);
void QObject_CustomEventDefault(void* ptr, void* event);
void QObject_DeleteLater(void* ptr);
void QObject_DeleteLaterDefault(void* ptr);
void QObject_ConnectDestroyed(void* ptr, long long t);
void QObject_DisconnectDestroyed(void* ptr);
void QObject_Destroyed(void* ptr, void* obj);
void QObject_DisconnectNotify(void* ptr, void* sign);
void QObject_DisconnectNotifyDefault(void* ptr, void* sign);
void QObject_InstallEventFilter(void* ptr, void* filterObj);
void QObject_KillTimer(void* ptr, int id);
void QObject_MoveToThread(void* ptr, void* targetThread);
void QObject_ConnectObjectNameChanged(void* ptr, long long t);
void QObject_DisconnectObjectNameChanged(void* ptr);
void QObject_RemoveEventFilter(void* ptr, void* obj);
void QObject_SetObjectName(void* ptr, struct QtCore_PackedString name);
void QObject_SetParent(void* ptr, void* parent);
void QObject_TimerEvent(void* ptr, void* event);
void QObject_TimerEventDefault(void* ptr, void* event);
void QObject_DestroyQObject(void* ptr);
void QObject_DestroyQObjectDefault(void* ptr);
struct QtCore_PackedList QObject_DynamicPropertyNames(void* ptr);
struct QtCore_PackedList QObject_FindChildren2(void* ptr, void* regExp, long long options);
struct QtCore_PackedList QObject_FindChildren3(void* ptr, void* re, long long options);
struct QtCore_PackedList QObject_FindChildren(void* ptr, struct QtCore_PackedString name, long long options);
void* QObject_Parent(void* ptr);
void* QObject_Sender(void* ptr);
struct QtCore_PackedString QObject_ObjectName(void* ptr);
void* QObject_Thread(void* ptr);
void* QObject_Property(void* ptr, char* name);
void* QObject_FindChild(void* ptr, struct QtCore_PackedString name, long long options);
char QObject_Disconnect4(void* ptr, void* receiver, char* method);
char QObject_Disconnect3(void* ptr, char* sign, void* receiver, char* method);
char QObject_Inherits(void* ptr, char* className);
char QObject_IsSignalConnected(void* ptr, void* sign);
char QObject_IsWidgetType(void* ptr);
char QObject_IsWindowType(void* ptr);
char QObject_SignalsBlocked(void* ptr);
void* QObject_MetaObject(void* ptr);
void* QObject_MetaObjectDefault(void* ptr);
struct QtCore_PackedList QObject_Children(void* ptr);
int QObject_Receivers(void* ptr, char* sign);
int QObject_SenderSignalIndex(void* ptr);
void QObject_DumpObjectInfo(void* ptr);
void QObject_DumpObjectTree(void* ptr);
void* QObject_InvokeMethod(void* ptr, char* name, void* arg);
void* QObject_ToVariant(void* ptr);
void* QObject___dynamicPropertyNames_atList(void* ptr, int i);
void QObject___dynamicPropertyNames_setList(void* ptr, void* i);
void* QObject___dynamicPropertyNames_newList(void* ptr);
void* QObject___findChildren_atList2(void* ptr, int i);
void QObject___findChildren_setList2(void* ptr, void* i);
void* QObject___findChildren_newList2(void* ptr);
void* QObject___findChildren_atList3(void* ptr, int i);
void QObject___findChildren_setList3(void* ptr, void* i);
void* QObject___findChildren_newList3(void* ptr);
void* QObject___findChildren_atList(void* ptr, int i);
void QObject___findChildren_setList(void* ptr, void* i);
void* QObject___findChildren_newList(void* ptr);
void* QObject___children_atList(void* ptr, int i);
void QObject___children_setList(void* ptr, void* i);
void* QObject___children_newList(void* ptr);
void* QPersistentModelIndex_NewQPersistentModelIndex4(void* other);
void* QPersistentModelIndex_NewQPersistentModelIndex(void* index);
void* QPersistentModelIndex_NewQPersistentModelIndex3(void* other);
void QPersistentModelIndex_Swap(void* ptr, void* other);
void* QPersistentModelIndex_Parent(void* ptr);
void* QPersistentModelIndex_Sibling(void* ptr, int row, int column);
void* QPersistentModelIndex_Data(void* ptr, int role);
long long QPersistentModelIndex_Flags(void* ptr);
char QPersistentModelIndex_IsValid(void* ptr);
void* QPersistentModelIndex_Model(void* ptr);
int QPersistentModelIndex_Column(void* ptr);
int QPersistentModelIndex_Row(void* ptr);
void* QPoint_NewQPoint();
void* QPoint_NewQPoint2(int xpos, int ypos);
int QPoint_Rx(void* ptr);
int QPoint_Ry(void* ptr);
int QPoint_QPoint_DotProduct(void* p1, void* p2);
void QPoint_SetX(void* ptr, int x);
void QPoint_SetY(void* ptr, int y);
char QPoint_IsNull(void* ptr);
int QPoint_ManhattanLength(void* ptr);
int QPoint_X(void* ptr);
int QPoint_Y(void* ptr);
void* QPointF_NewQPointF();
void* QPointF_NewQPointF2(void* point);
void* QPointF_NewQPointF3(double xpos, double ypos);
double QPointF_Rx(void* ptr);
double QPointF_Ry(void* ptr);
double QPointF_QPointF_DotProduct(void* p1, void* p2);
void QPointF_SetX(void* ptr, double x);
void QPointF_SetY(void* ptr, double y);
void* QPointF_ToPoint(void* ptr);
char QPointF_IsNull(void* ptr);
double QPointF_ManhattanLength(void* ptr);
double QPointF_X(void* ptr);
double QPointF_Y(void* ptr);
void* QRect_NewQRect();
void* QRect_NewQRect2(void* topLeft, void* bottomRight);
void* QRect_NewQRect3(void* topLeft, void* size);
void* QRect_NewQRect4(int x, int y, int width, int height);
void QRect_Adjust(void* ptr, int dx1, int dy1, int dx2, int dy2);
void QRect_MoveBottom(void* ptr, int y);
void QRect_MoveBottomLeft(void* ptr, void* position);
void QRect_MoveBottomRight(void* ptr, void* position);
void QRect_MoveCenter(void* ptr, void* position);
void QRect_MoveLeft(void* ptr, int x);
void QRect_MoveRight(void* ptr, int x);
void QRect_MoveTo2(void* ptr, void* position);
void QRect_MoveTo(void* ptr, int x, int y);
void QRect_MoveTop(void* ptr, int y);
void QRect_MoveTopLeft(void* ptr, void* position);
void QRect_MoveTopRight(void* ptr, void* position);
void QRect_SetBottom(void* ptr, int y);
void QRect_SetBottomLeft(void* ptr, void* position);
void QRect_SetBottomRight(void* ptr, void* position);
void QRect_SetCoords(void* ptr, int x1, int y1, int x2, int y2);
void QRect_SetHeight(void* ptr, int height);
void QRect_SetLeft(void* ptr, int x);
void QRect_SetRect(void* ptr, int x, int y, int width, int height);
void QRect_SetRight(void* ptr, int x);
void QRect_SetSize(void* ptr, void* size);
void QRect_SetTop(void* ptr, int y);
void QRect_SetTopLeft(void* ptr, void* position);
void QRect_SetTopRight(void* ptr, void* position);
void QRect_SetWidth(void* ptr, int width);
void QRect_SetX(void* ptr, int x);
void QRect_SetY(void* ptr, int y);
void QRect_Translate2(void* ptr, void* offset);
void QRect_Translate(void* ptr, int dx, int dy);
void* QRect_BottomLeft(void* ptr);
void* QRect_BottomRight(void* ptr);
void* QRect_Center(void* ptr);
void* QRect_TopLeft(void* ptr);
void* QRect_TopRight(void* ptr);
void* QRect_Adjusted(void* ptr, int dx1, int dy1, int dx2, int dy2);
void* QRect_Intersected(void* ptr, void* rectangle);
void* QRect_MarginsAdded(void* ptr, void* margins);
void* QRect_MarginsRemoved(void* ptr, void* margins);
void* QRect_Normalized(void* ptr);
void* QRect_Translated2(void* ptr, void* offset);
void* QRect_Translated(void* ptr, int dx, int dy);
void* QRect_Transposed(void* ptr);
void* QRect_United(void* ptr, void* rectangle);
void* QRect_Size(void* ptr);
char QRect_Contains(void* ptr, void* point, char proper);
char QRect_Contains2(void* ptr, void* rectangle, char proper);
char QRect_Contains3(void* ptr, int x, int y);
char QRect_Contains4(void* ptr, int x, int y, char proper);
char QRect_Intersects(void* ptr, void* rectangle);
char QRect_IsEmpty(void* ptr);
char QRect_IsNull(void* ptr);
char QRect_IsValid(void* ptr);
int QRect_Bottom(void* ptr);
int QRect_Height(void* ptr);
int QRect_Left(void* ptr);
int QRect_Right(void* ptr);
int QRect_Top(void* ptr);
int QRect_Width(void* ptr);
int QRect_X(void* ptr);
int QRect_Y(void* ptr);
void QRect_GetCoords(void* ptr, int x1, int y1, int x2, int y2);
void QRect_GetRect(void* ptr, int x, int y, int width, int height);
void* QRectF_NewQRectF();
void* QRectF_NewQRectF3(void* topLeft, void* bottomRight);
void* QRectF_NewQRectF2(void* topLeft, void* size);
void* QRectF_NewQRectF5(void* rectangle);
void* QRectF_NewQRectF4(double x, double y, double width, double height);
void QRectF_Adjust(void* ptr, double dx1, double dy1, double dx2, double dy2);
void QRectF_MoveBottom(void* ptr, double y);
void QRectF_MoveBottomLeft(void* ptr, void* position);
void QRectF_MoveBottomRight(void* ptr, void* position);
void QRectF_MoveCenter(void* ptr, void* position);
void QRectF_MoveLeft(void* ptr, double x);
void QRectF_MoveRight(void* ptr, double x);
void QRectF_MoveTo2(void* ptr, void* position);
void QRectF_MoveTo(void* ptr, double x, double y);
void QRectF_MoveTop(void* ptr, double y);
void QRectF_MoveTopLeft(void* ptr, void* position);
void QRectF_MoveTopRight(void* ptr, void* position);
void QRectF_SetBottom(void* ptr, double y);
void QRectF_SetBottomLeft(void* ptr, void* position);
void QRectF_SetBottomRight(void* ptr, void* position);
void QRectF_SetCoords(void* ptr, double x1, double y1, double x2, double y2);
void QRectF_SetHeight(void* ptr, double height);
void QRectF_SetLeft(void* ptr, double x);
void QRectF_SetRect(void* ptr, double x, double y, double width, double height);
void QRectF_SetRight(void* ptr, double x);
void QRectF_SetSize(void* ptr, void* size);
void QRectF_SetTop(void* ptr, double y);
void QRectF_SetTopLeft(void* ptr, void* position);
void QRectF_SetTopRight(void* ptr, void* position);
void QRectF_SetWidth(void* ptr, double width);
void QRectF_SetX(void* ptr, double x);
void QRectF_SetY(void* ptr, double y);
void QRectF_Translate2(void* ptr, void* offset);
void QRectF_Translate(void* ptr, double dx, double dy);
void* QRectF_BottomLeft(void* ptr);
void* QRectF_BottomRight(void* ptr);
void* QRectF_Center(void* ptr);
void* QRectF_TopLeft(void* ptr);
void* QRectF_TopRight(void* ptr);
void* QRectF_ToAlignedRect(void* ptr);
void* QRectF_ToRect(void* ptr);
void* QRectF_Adjusted(void* ptr, double dx1, double dy1, double dx2, double dy2);
void* QRectF_Intersected(void* ptr, void* rectangle);
void* QRectF_MarginsAdded(void* ptr, void* margins);
void* QRectF_MarginsRemoved(void* ptr, void* margins);
void* QRectF_Normalized(void* ptr);
void* QRectF_Translated2(void* ptr, void* offset);
void* QRectF_Translated(void* ptr, double dx, double dy);
void* QRectF_Transposed(void* ptr);
void* QRectF_United(void* ptr, void* rectangle);
void* QRectF_Size(void* ptr);
char QRectF_Contains(void* ptr, void* point);
char QRectF_Contains2(void* ptr, void* rectangle);
char QRectF_Contains3(void* ptr, double x, double y);
char QRectF_Intersects(void* ptr, void* rectangle);
char QRectF_IsEmpty(void* ptr);
char QRectF_IsNull(void* ptr);
char QRectF_IsValid(void* ptr);
double QRectF_Bottom(void* ptr);
double QRectF_Height(void* ptr);
double QRectF_Left(void* ptr);
double QRectF_Right(void* ptr);
double QRectF_Top(void* ptr);
double QRectF_Width(void* ptr);
double QRectF_X(void* ptr);
double QRectF_Y(void* ptr);
void QRectF_GetCoords(void* ptr, double x1, double y1, double x2, double y2);
void QRectF_GetRect(void* ptr, double x, double y, double width, double height);
void* QRegExp_NewQRegExp();
void* QRegExp_NewQRegExp3(void* rx);
void* QRegExp_NewQRegExp2(struct QtCore_PackedString pattern, long long cs, long long syntax);
struct QtCore_PackedString QRegExp_QRegExp_Escape(struct QtCore_PackedString str);
void QRegExp_SetCaseSensitivity(void* ptr, long long cs);
void QRegExp_SetMinimal(void* ptr, char minimal);
void QRegExp_SetPattern(void* ptr, struct QtCore_PackedString pattern);
void QRegExp_SetPatternSyntax(void* ptr, long long syntax);
void QRegExp_Swap(void* ptr, void* other);
void QRegExp_DestroyQRegExp(void* ptr);
long long QRegExp_PatternSyntax(void* ptr);
struct QtCore_PackedString QRegExp_Cap(void* ptr, int nth);
struct QtCore_PackedString QRegExp_ErrorString(void* ptr);
struct QtCore_PackedString QRegExp_Pattern(void* ptr);
struct QtCore_PackedString QRegExp_CapturedTexts(void* ptr);
long long QRegExp_CaseSensitivity(void* ptr);
char QRegExp_ExactMatch(void* ptr, struct QtCore_PackedString str);
char QRegExp_IsEmpty(void* ptr);
char QRegExp_IsMinimal(void* ptr);
char QRegExp_IsValid(void* ptr);
int QRegExp_CaptureCount(void* ptr);
int QRegExp_IndexIn(void* ptr, struct QtCore_PackedString str, int offset, long long caretMode);
int QRegExp_LastIndexIn(void* ptr, struct QtCore_PackedString str, int offset, long long caretMode);
int QRegExp_MatchedLength(void* ptr);
int QRegExp_Pos(void* ptr, int nth);
void* QRegularExpression_NewQRegularExpression();
void* QRegularExpression_NewQRegularExpression3(void* re);
void* QRegularExpression_NewQRegularExpression2(struct QtCore_PackedString pattern, long long options);
struct QtCore_PackedString QRegularExpression_QRegularExpression_AnchoredPattern(struct QtCore_PackedString expression);
struct QtCore_PackedString QRegularExpression_QRegularExpression_Escape(struct QtCore_PackedString str);
struct QtCore_PackedString QRegularExpression_QRegularExpression_WildcardToRegularExpression(struct QtCore_PackedString pattern);
void QRegularExpression_SetPattern(void* ptr, struct QtCore_PackedString pattern);
void QRegularExpression_SetPatternOptions(void* ptr, long long options);
void QRegularExpression_Swap(void* ptr, void* other);
void QRegularExpression_DestroyQRegularExpression(void* ptr);
long long QRegularExpression_PatternOptions(void* ptr);
void* QRegularExpression_Match(void* ptr, struct QtCore_PackedString subject, int offset, long long matchType, long long matchOptions);
void* QRegularExpression_Match2(void* ptr, void* subjectRef, int offset, long long matchType, long long matchOptions);
void* QRegularExpression_GlobalMatch(void* ptr, struct QtCore_PackedString subject, int offset, long long matchType, long long matchOptions);
void* QRegularExpression_GlobalMatch2(void* ptr, void* subjectRef, int offset, long long matchType, long long matchOptions);
struct QtCore_PackedString QRegularExpression_ErrorString(void* ptr);
struct QtCore_PackedString QRegularExpression_Pattern(void* ptr);
struct QtCore_PackedString QRegularExpression_NamedCaptureGroups(void* ptr);
char QRegularExpression_IsValid(void* ptr);
int QRegularExpression_CaptureCount(void* ptr);
int QRegularExpression_PatternErrorOffset(void* ptr);
void QRegularExpression_Optimize(void* ptr);
void* QRegularExpressionMatch_NewQRegularExpressionMatch();
void* QRegularExpressionMatch_NewQRegularExpressionMatch2(void* match);
void QRegularExpressionMatch_Swap(void* ptr, void* other);
void QRegularExpressionMatch_DestroyQRegularExpressionMatch(void* ptr);
void* QRegularExpressionMatch_RegularExpression(void* ptr);
long long QRegularExpressionMatch_MatchOptions(void* ptr);
long long QRegularExpressionMatch_MatchType(void* ptr);
struct QtCore_PackedString QRegularExpressionMatch_Captured3(void* ptr, void* name);
struct QtCore_PackedString QRegularExpressionMatch_Captured2(void* ptr, struct QtCore_PackedString name);
struct QtCore_PackedString QRegularExpressionMatch_Captured(void* ptr, int nth);
struct QtCore_PackedString QRegularExpressionMatch_CapturedTexts(void* ptr);
void* QRegularExpressionMatch_CapturedRef3(void* ptr, void* name);
void* QRegularExpressionMatch_CapturedRef2(void* ptr, struct QtCore_PackedString name);
void* QRegularExpressionMatch_CapturedRef(void* ptr, int nth);
void* QRegularExpressionMatch_CapturedView2(void* ptr, void* name);
void* QRegularExpressionMatch_CapturedView(void* ptr, int nth);
char QRegularExpressionMatch_HasMatch(void* ptr);
char QRegularExpressionMatch_HasPartialMatch(void* ptr);
char QRegularExpressionMatch_IsValid(void* ptr);
int QRegularExpressionMatch_CapturedEnd3(void* ptr, void* name);
int QRegularExpressionMatch_CapturedEnd2(void* ptr, struct QtCore_PackedString name);
int QRegularExpressionMatch_CapturedEnd(void* ptr, int nth);
int QRegularExpressionMatch_CapturedLength3(void* ptr, void* name);
int QRegularExpressionMatch_CapturedLength2(void* ptr, struct QtCore_PackedString name);
int QRegularExpressionMatch_CapturedLength(void* ptr, int nth);
int QRegularExpressionMatch_CapturedStart3(void* ptr, void* name);
int QRegularExpressionMatch_CapturedStart2(void* ptr, struct QtCore_PackedString name);
int QRegularExpressionMatch_CapturedStart(void* ptr, int nth);
int QRegularExpressionMatch_LastCapturedIndex(void* ptr);
void* QSize_NewQSize();
void* QSize_NewQSize2(int width, int height);
int QSize_Rheight(void* ptr);
int QSize_Rwidth(void* ptr);
void QSize_Scale2(void* ptr, void* size, long long mode);
void QSize_Scale(void* ptr, int width, int height, long long mode);
void QSize_SetHeight(void* ptr, int height);
void QSize_SetWidth(void* ptr, int width);
void QSize_Transpose(void* ptr);
void* QSize_BoundedTo(void* ptr, void* otherSize);
void* QSize_ExpandedTo(void* ptr, void* otherSize);
void* QSize_Scaled2(void* ptr, void* s, long long mode);
void* QSize_Scaled(void* ptr, int width, int height, long long mode);
void* QSize_Transposed(void* ptr);
char QSize_IsEmpty(void* ptr);
char QSize_IsNull(void* ptr);
char QSize_IsValid(void* ptr);
int QSize_Height(void* ptr);
int QSize_Width(void* ptr);
void* QSizeF_NewQSizeF();
void* QSizeF_NewQSizeF2(void* size);
void* QSizeF_NewQSizeF3(double width, double height);
double QSizeF_Rheight(void* ptr);
double QSizeF_Rwidth(void* ptr);
void QSizeF_Scale2(void* ptr, void* size, long long mode);
void QSizeF_Scale(void* ptr, double width, double height, long long mode);
void QSizeF_SetHeight(void* ptr, double height);
void QSizeF_SetWidth(void* ptr, double width);
void QSizeF_Transpose(void* ptr);
void* QSizeF_ToSize(void* ptr);
void* QSizeF_BoundedTo(void* ptr, void* otherSize);
void* QSizeF_ExpandedTo(void* ptr, void* otherSize);
void* QSizeF_Scaled2(void* ptr, void* s, long long mode);
void* QSizeF_Scaled(void* ptr, double width, double height, long long mode);
void* QSizeF_Transposed(void* ptr);
char QSizeF_IsEmpty(void* ptr);
char QSizeF_IsNull(void* ptr);
char QSizeF_IsValid(void* ptr);
double QSizeF_Height(void* ptr);
double QSizeF_Width(void* ptr);
void QSocketNotifier_ConnectActivated(void* ptr, long long t);
void QSocketNotifier_DisconnectActivated(void* ptr);
void QSocketNotifier_SetEnabled(void* ptr, char enable);
void QSocketNotifier_SetEnabledDefault(void* ptr, char enable);
void QSocketNotifier_DestroyQSocketNotifier(void* ptr);
void QSocketNotifier_DestroyQSocketNotifierDefault(void* ptr);
long long QSocketNotifier_Type(void* ptr);
char QSocketNotifier_IsEnabled(void* ptr);
void* QStringRef_NewQStringRef();
void* QStringRef_NewQStringRef5(void* other);
void* QStringRef_NewQStringRef3(struct QtCore_PackedString stri);
void* QStringRef_NewQStringRef2(struct QtCore_PackedString stri, int position, int length);
void* QStringRef_NewQStringRef4(void* other);
int QStringRef_QStringRef_Compare7(void* s1, void* s2, long long cs);
int QStringRef_QStringRef_Compare(void* s1, struct QtCore_PackedString s2, long long cs);
int QStringRef_QStringRef_Compare6(void* s1, void* s2, long long cs);
int QStringRef_QStringRef_LocaleAwareCompare(void* s1, struct QtCore_PackedString s2);
int QStringRef_QStringRef_LocaleAwareCompare4(void* s1, void* s2);
void QStringRef_Chop(void* ptr, int n);
void QStringRef_Clear(void* ptr);
void QStringRef_Truncate(void* ptr, int position);
void QStringRef_DestroyQStringRef(void* ptr);
void* QStringRef_ToLatin1(void* ptr);
void* QStringRef_ToLocal8Bit(void* ptr);
void* QStringRef_ToUtf8(void* ptr);
void* QStringRef_Back(void* ptr);
void* QStringRef_Front(void* ptr);
struct QtCore_PackedString QStringRef_ToString(void* ptr);
void* QStringRef_AppendTo(void* ptr, struct QtCore_PackedString stri);
void* QStringRef_Chopped(void* ptr, int l);
void* QStringRef_Left(void* ptr, int n);
void* QStringRef_Mid(void* ptr, int position, int n);
void* QStringRef_Right(void* ptr, int n);
void* QStringRef_Trimmed(void* ptr);
struct QtCore_PackedList QStringRef_Split2(void* ptr, void* sep, long long behavior, long long cs);
struct QtCore_PackedList QStringRef_Split(void* ptr, struct QtCore_PackedString sep, long long behavior, long long cs);
struct QtCore_PackedList QStringRef_ToUcs4(void* ptr);
char QStringRef_Contains2(void* ptr, void* ch, long long cs);
char QStringRef_Contains3(void* ptr, void* str, long long cs);
char QStringRef_Contains(void* ptr, struct QtCore_PackedString str, long long cs);
char QStringRef_Contains4(void* ptr, void* str, long long cs);
char QStringRef_EndsWith3(void* ptr, void* ch, long long cs);
char QStringRef_EndsWith2(void* ptr, void* str, long long cs);
char QStringRef_EndsWith4(void* ptr, void* str, long long cs);
char QStringRef_EndsWith(void* ptr, struct QtCore_PackedString str, long long cs);
char QStringRef_EndsWith5(void* ptr, void* str, long long cs);
char QStringRef_IsEmpty(void* ptr);
char QStringRef_IsNull(void* ptr);
char QStringRef_IsRightToLeft(void* ptr);
char QStringRef_StartsWith3(void* ptr, void* ch, long long cs);
char QStringRef_StartsWith2(void* ptr, void* str, long long cs);
char QStringRef_StartsWith4(void* ptr, void* str, long long cs);
char QStringRef_StartsWith(void* ptr, struct QtCore_PackedString str, long long cs);
char QStringRef_StartsWith5(void* ptr, void* str, long long cs);
void* QStringRef_ConstData(void* ptr);
void* QStringRef_Data(void* ptr);
void* QStringRef_Unicode(void* ptr);
void* QStringRef_At(void* ptr, int position);
struct QtCore_PackedString QStringRef_String(void* ptr);
double QStringRef_ToDouble(void* ptr, char* ok);
float QStringRef_ToFloat(void* ptr, char* ok);
int QStringRef_Compare3(void* ptr, void* other, long long cs);
int QStringRef_Compare4(void* ptr, void* other, long long cs);
int QStringRef_Compare5(void* ptr, struct QtCore_PackedString other, long long cs);
int QStringRef_Compare2(void* ptr, void* other, long long cs);
int QStringRef_Count(void* ptr);
int QStringRef_Count3(void* ptr, void* ch, long long cs);
int QStringRef_Count2(void* ptr, struct QtCore_PackedString str, long long cs);
int QStringRef_Count4(void* ptr, void* str, long long cs);
int QStringRef_IndexOf2(void* ptr, void* ch, int from, long long cs);
int QStringRef_IndexOf3(void* ptr, void* str, int from, long long cs);
int QStringRef_IndexOf(void* ptr, struct QtCore_PackedString str, int from, long long cs);
int QStringRef_IndexOf4(void* ptr, void* str, int from, long long cs);
int QStringRef_LastIndexOf2(void* ptr, void* ch, int from, long long cs);
int QStringRef_LastIndexOf3(void* ptr, void* str, int from, long long cs);
int QStringRef_LastIndexOf(void* ptr, struct QtCore_PackedString str, int from, long long cs);
int QStringRef_LastIndexOf4(void* ptr, void* str, int from, long long cs);
int QStringRef_Length(void* ptr);
int QStringRef_LocaleAwareCompare3(void* ptr, struct QtCore_PackedString other);
int QStringRef_LocaleAwareCompare2(void* ptr, void* other);
int QStringRef_Position(void* ptr);
int QStringRef_Size(void* ptr);
int QStringRef_ToInt(void* ptr, char* ok, int base);
long QStringRef_ToLong(void* ptr, char* ok, int base);
long long QStringRef_ToLongLong(void* ptr, char* ok, int base);
unsigned long long QStringRef_ToULongLong(void* ptr, char* ok, int base);
short QStringRef_ToShort(void* ptr, char* ok, int base);
unsigned int QStringRef_ToUInt(void* ptr, char* ok, int base);
unsigned long QStringRef_ToULong(void* ptr, char* ok, int base);
unsigned short QStringRef_ToUShort(void* ptr, char* ok, int base);
void* QStringRef___split_atList2(void* ptr, int i);
void QStringRef___split_setList2(void* ptr, void* i);
void* QStringRef___split_newList2(void* ptr);
void* QStringRef___split_atList(void* ptr, int i);
void QStringRef___split_setList(void* ptr, void* i);
void* QStringRef___split_newList(void* ptr);
unsigned int QStringRef___toUcs4_atList(void* ptr, int i);
void QStringRef___toUcs4_setList(void* ptr, unsigned int i);
void* QStringRef___toUcs4_newList(void* ptr);
void* QStringView_NewQStringView();
void* QStringView_NewQStringView7(struct QtCore_PackedString str);
void* QStringView_NewQStringView8(void* str);
void* QStringView_ToLatin1(void* ptr);
void* QStringView_ToLocal8Bit(void* ptr);
void* QStringView_ToUtf8(void* ptr);
void* QStringView_Back(void* ptr);
void* QStringView_First(void* ptr);
void* QStringView_Front(void* ptr);
void* QStringView_Last(void* ptr);
struct QtCore_PackedString QStringView_ToString(void* ptr);
void* QStringView_Trimmed(void* ptr);
struct QtCore_PackedList QStringView_ToUcs4(void* ptr);
char QStringView_Empty(void* ptr);
char QStringView_EndsWith3(void* ptr, void* ch);
char QStringView_EndsWith4(void* ptr, void* ch, long long cs);
char QStringView_EndsWith2(void* ptr, void* l1, long long cs);
char QStringView_EndsWith(void* ptr, void* str, long long cs);
char QStringView_IsEmpty(void* ptr);
char QStringView_IsNull(void* ptr);
char QStringView_IsRightToLeft(void* ptr);
char QStringView_StartsWith3(void* ptr, void* ch);
char QStringView_StartsWith4(void* ptr, void* ch, long long cs);
char QStringView_StartsWith2(void* ptr, void* l1, long long cs);
char QStringView_StartsWith(void* ptr, void* str, long long cs);
int QStringView_Compare(void* ptr, void* other, long long cs);
int QStringView_Length(void* ptr);
unsigned int QStringView___toUcs4_atList(void* ptr, int i);
void QStringView___toUcs4_setList(void* ptr, unsigned int i);
void* QStringView___toUcs4_newList(void* ptr);
int QSysInfo_WordSize_Type();
void* QThread_QThread_CurrentThread();
void* QThread_NewQThread(void* parent);
char QThread_Wait(void* ptr, unsigned long ti);
int QThread_Exec(void* ptr);
int QThread_QThread_IdealThreadCount();
void QThread_Exit(void* ptr, int returnCode);
void QThread_ConnectFinished(void* ptr, long long t);
void QThread_DisconnectFinished(void* ptr);
void QThread_QThread_Msleep(unsigned long msecs);
void QThread_Quit(void* ptr);
void QThread_QuitDefault(void* ptr);
void QThread_RequestInterruption(void* ptr);
void QThread_Run(void* ptr);
void QThread_RunDefault(void* ptr);
void QThread_SetEventDispatcher(void* ptr, void* eventDispatcher);
void QThread_SetPriority(void* ptr, long long priority);
void QThread_SetStackSize(void* ptr, unsigned int stackSize);
void QThread_QThread_SetTerminationEnabled(char enabled);
void QThread_QThread_Sleep(unsigned long secs);
void QThread_Start(void* ptr);
void QThread_StartDefault(void* ptr);
void QThread_ConnectStarted(void* ptr, long long t);
void QThread_DisconnectStarted(void* ptr);
void QThread_Terminate(void* ptr);
void QThread_TerminateDefault(void* ptr);
void QThread_QThread_Usleep(unsigned long usecs);
void QThread_QThread_YieldCurrentThread();
void QThread_DestroyQThread(void* ptr);
void QThread_DestroyQThreadDefault(void* ptr);
void* QThread_EventDispatcher(void* ptr);
long long QThread_Priority(void* ptr);
char QThread_IsFinished(void* ptr);
char QThread_IsInterruptionRequested(void* ptr);
char QThread_IsRunning(void* ptr);
int QThread_LoopLevel(void* ptr);
unsigned int QThread_StackSize(void* ptr);
void* QTime_QTime_CurrentTime();
void* QTime_QTime_FromMSecsSinceStartOfDay(int msecs);
void* QTime_QTime_FromString(struct QtCore_PackedString stri, long long format);
void* QTime_QTime_FromString2(struct QtCore_PackedString stri, struct QtCore_PackedString format);
void* QTime_NewQTime();
void* QTime_NewQTime3(int h, int m, int s, int ms);
char QTime_QTime_IsValid2(int h, int m, int s, int ms);
char QTime_SetHMS(void* ptr, int h, int m, int s, int ms);
int QTime_Restart(void* ptr);
void QTime_Start(void* ptr);
struct QtCore_PackedString QTime_ToString3(void* ptr, void* format);
struct QtCore_PackedString QTime_ToString2(void* ptr, long long format);
struct QtCore_PackedString QTime_ToString(void* ptr, struct QtCore_PackedString format);
void* QTime_AddMSecs(void* ptr, int ms);
void* QTime_AddSecs(void* ptr, int s);
char QTime_IsNull(void* ptr);
char QTime_IsValid(void* ptr);
int QTime_Elapsed(void* ptr);
int QTime_Hour(void* ptr);
int QTime_Minute(void* ptr);
int QTime_Msec(void* ptr);
int QTime_MsecsSinceStartOfDay(void* ptr);
int QTime_MsecsTo(void* ptr, void* t);
int QTime_Second(void* ptr);
int QTime_SecsTo(void* ptr, void* t);
void* QTimeZone_QTimeZone_IanaIdToWindowsId(void* ianaId);
void* QTimeZone_QTimeZone_SystemTimeZoneId();
void* QTimeZone_QTimeZone_WindowsIdToDefaultIanaId(void* windowsId);
void* QTimeZone_QTimeZone_WindowsIdToDefaultIanaId2(void* windowsId, long long country);
struct QtCore_PackedList QTimeZone_QTimeZone_AvailableTimeZoneIds();
struct QtCore_PackedList QTimeZone_QTimeZone_AvailableTimeZoneIds2(long long country);
struct QtCore_PackedList QTimeZone_QTimeZone_AvailableTimeZoneIds3(int offsetSeconds);
struct QtCore_PackedList QTimeZone_QTimeZone_WindowsIdToIanaIds(void* windowsId);
struct QtCore_PackedList QTimeZone_QTimeZone_WindowsIdToIanaIds2(void* windowsId, long long country);
void* QTimeZone_QTimeZone_SystemTimeZone();
void* QTimeZone_QTimeZone_Utc();
void* QTimeZone_NewQTimeZone();
void* QTimeZone_NewQTimeZone2(void* ianaId);
void* QTimeZone_NewQTimeZone4(void* ianaId, int offsetSeconds, struct QtCore_PackedString name, struct QtCore_PackedString abbreviation, long long country, struct QtCore_PackedString comment);
void* QTimeZone_NewQTimeZone5(void* other);
void* QTimeZone_NewQTimeZone3(int offsetSeconds);
char QTimeZone_QTimeZone_IsTimeZoneIdAvailable(void* ianaId);
void QTimeZone_Swap(void* ptr, void* other);
void QTimeZone_DestroyQTimeZone(void* ptr);
void* QTimeZone_Id(void* ptr);
long long QTimeZone_Country(void* ptr);
struct QtCore_PackedString QTimeZone_Abbreviation(void* ptr, void* atDateTime);
struct QtCore_PackedString QTimeZone_Comment(void* ptr);
struct QtCore_PackedString QTimeZone_DisplayName2(void* ptr, long long timeType, long long nameType, void* locale);
struct QtCore_PackedString QTimeZone_DisplayName(void* ptr, void* atDateTime, long long nameType, void* locale);
char QTimeZone_HasDaylightTime(void* ptr);
char QTimeZone_HasTransitions(void* ptr);
char QTimeZone_IsDaylightTime(void* ptr, void* atDateTime);
char QTimeZone_IsValid(void* ptr);
int QTimeZone_DaylightTimeOffset(void* ptr, void* atDateTime);
int QTimeZone_OffsetFromUtc(void* ptr, void* atDateTime);
int QTimeZone_StandardTimeOffset(void* ptr, void* atDateTime);
void* QTimeZone___availableTimeZoneIds_atList(void* ptr, int i);
void QTimeZone___availableTimeZoneIds_setList(void* ptr, void* i);
void* QTimeZone___availableTimeZoneIds_newList(void* ptr);
void* QTimeZone___availableTimeZoneIds_atList2(void* ptr, int i);
void QTimeZone___availableTimeZoneIds_setList2(void* ptr, void* i);
void* QTimeZone___availableTimeZoneIds_newList2(void* ptr);
void* QTimeZone___availableTimeZoneIds_atList3(void* ptr, int i);
void QTimeZone___availableTimeZoneIds_setList3(void* ptr, void* i);
void* QTimeZone___availableTimeZoneIds_newList3(void* ptr);
void* QTimeZone___windowsIdToIanaIds_atList(void* ptr, int i);
void QTimeZone___windowsIdToIanaIds_setList(void* ptr, void* i);
void* QTimeZone___windowsIdToIanaIds_newList(void* ptr);
void* QTimeZone___windowsIdToIanaIds_atList2(void* ptr, int i);
void QTimeZone___windowsIdToIanaIds_setList2(void* ptr, void* i);
void* QTimeZone___windowsIdToIanaIds_newList2(void* ptr);
void* QTimerEvent_NewQTimerEvent(int timerId);
int QTimerEvent_TimerId(void* ptr);
int QTimerEvent_Id(void* ptr);
void QTimerEvent_SetId(void* ptr, int vin);
void* QTranslator_NewQTranslator(void* parent);
char QTranslator_Load2(void* ptr, void* locale, struct QtCore_PackedString filename, struct QtCore_PackedString prefix, struct QtCore_PackedString directory, struct QtCore_PackedString suffix);
char QTranslator_Load(void* ptr, struct QtCore_PackedString filename, struct QtCore_PackedString directory, struct QtCore_PackedString search_delimiters, struct QtCore_PackedString suffix);
char QTranslator_Load3(void* ptr, char* data, int l, struct QtCore_PackedString directory);
void QTranslator_DestroyQTranslator(void* ptr);
void QTranslator_DestroyQTranslatorDefault(void* ptr);
struct QtCore_PackedString QTranslator_Translate(void* ptr, char* context, char* sourceText, char* disambiguation, int n);
struct QtCore_PackedString QTranslator_TranslateDefault(void* ptr, char* context, char* sourceText, char* disambiguation, int n);
char QTranslator_IsEmpty(void* ptr);
char QTranslator_IsEmptyDefault(void* ptr);
void* QUrl_QUrl_ToAce(struct QtCore_PackedString domain);
void* QUrl_QUrl_ToPercentEncoding(struct QtCore_PackedString input, void* exclude, void* include);
struct QtCore_PackedList QUrl_QUrl_FromStringList(struct QtCore_PackedString urls, long long mode);
struct QtCore_PackedString QUrl_QUrl_FromAce(void* domain);
struct QtCore_PackedString QUrl_QUrl_FromPercentEncoding(void* input);
struct QtCore_PackedString QUrl_QUrl_IdnWhitelist();
struct QtCore_PackedString QUrl_QUrl_ToStringList(void* urls, long long options);
void* QUrl_QUrl_FromEncoded(void* input, long long parsingMode);
void* QUrl_QUrl_FromLocalFile(struct QtCore_PackedString localFile);
void* QUrl_QUrl_FromUserInput(struct QtCore_PackedString userInput);
void* QUrl_QUrl_FromUserInput2(struct QtCore_PackedString userInput, struct QtCore_PackedString workingDirectory, long long options);
void* QUrl_NewQUrl();
void* QUrl_NewQUrl4(void* other);
void* QUrl_NewQUrl3(struct QtCore_PackedString url, long long parsingMode);
void* QUrl_NewQUrl2(void* other);
void QUrl_Clear(void* ptr);
void QUrl_SetAuthority(void* ptr, struct QtCore_PackedString authority, long long mode);
void QUrl_SetFragment(void* ptr, struct QtCore_PackedString fragment, long long mode);
void QUrl_SetHost(void* ptr, struct QtCore_PackedString host, long long mode);
void QUrl_QUrl_SetIdnWhitelist(struct QtCore_PackedString list);
void QUrl_SetPassword(void* ptr, struct QtCore_PackedString password, long long mode);
void QUrl_SetPath(void* ptr, struct QtCore_PackedString path, long long mode);
void QUrl_SetPort(void* ptr, int port);
void QUrl_SetQuery(void* ptr, struct QtCore_PackedString query, long long mode);
void QUrl_SetQuery2(void* ptr, void* query);
void QUrl_SetScheme(void* ptr, struct QtCore_PackedString scheme);
void QUrl_SetUrl(void* ptr, struct QtCore_PackedString url, long long parsingMode);
void QUrl_SetUserInfo(void* ptr, struct QtCore_PackedString userInfo, long long mode);
void QUrl_SetUserName(void* ptr, struct QtCore_PackedString userName, long long mode);
void QUrl_Swap(void* ptr, void* other);
void QUrl_DestroyQUrl(void* ptr);
void* QUrl_ToEncoded(void* ptr, long long options);
struct QtCore_PackedString QUrl_Authority(void* ptr, long long options);
struct QtCore_PackedString QUrl_ErrorString(void* ptr);
struct QtCore_PackedString QUrl_FileName(void* ptr, long long options);
struct QtCore_PackedString QUrl_Fragment(void* ptr, long long options);
struct QtCore_PackedString QUrl_Host(void* ptr, long long options);
struct QtCore_PackedString QUrl_Password(void* ptr, long long options);
struct QtCore_PackedString QUrl_Path(void* ptr, long long options);
struct QtCore_PackedString QUrl_Query(void* ptr, long long options);
struct QtCore_PackedString QUrl_Scheme(void* ptr);
struct QtCore_PackedString QUrl_ToDisplayString(void* ptr, long long options);
struct QtCore_PackedString QUrl_ToLocalFile(void* ptr);
struct QtCore_PackedString QUrl_ToString(void* ptr, long long options);
struct QtCore_PackedString QUrl_TopLevelDomain(void* ptr, long long options);
struct QtCore_PackedString QUrl_Url(void* ptr, long long options);
struct QtCore_PackedString QUrl_UserInfo(void* ptr, long long options);
struct QtCore_PackedString QUrl_UserName(void* ptr, long long options);
void* QUrl_Adjusted(void* ptr, long long options);
void* QUrl_Resolved(void* ptr, void* relative);
char QUrl_HasFragment(void* ptr);
char QUrl_HasQuery(void* ptr);
char QUrl_IsEmpty(void* ptr);
char QUrl_IsLocalFile(void* ptr);
char QUrl_IsParentOf(void* ptr, void* childUrl);
char QUrl_IsRelative(void* ptr);
char QUrl_IsValid(void* ptr);
char QUrl_Matches(void* ptr, void* url, long long options);
int QUrl_Port(void* ptr, int defaultPort);
void* QUrl___fromStringList_atList(void* ptr, int i);
void QUrl___fromStringList_setList(void* ptr, void* i);
void* QUrl___fromStringList_newList(void* ptr);
void* QUrl___toStringList_urls_atList(void* ptr, int i);
void QUrl___toStringList_urls_setList(void* ptr, void* i);
void* QUrl___toStringList_urls_newList(void* ptr);
void* QUrl___allEncodedQueryItemValues_atList(void* ptr, int i);
void QUrl___allEncodedQueryItemValues_setList(void* ptr, void* i);
void* QUrl___allEncodedQueryItemValues_newList(void* ptr);
void* QUrlQuery_QUrlQuery_DefaultQueryPairDelimiter();
void* QUrlQuery_QUrlQuery_DefaultQueryValueDelimiter();
void* QUrlQuery_NewQUrlQuery();
void* QUrlQuery_NewQUrlQuery3(struct QtCore_PackedString queryString);
void* QUrlQuery_NewQUrlQuery2(void* url);
void* QUrlQuery_NewQUrlQuery4(void* other);
void QUrlQuery_AddQueryItem(void* ptr, struct QtCore_PackedString key, struct QtCore_PackedString value);
void QUrlQuery_Clear(void* ptr);
void QUrlQuery_RemoveAllQueryItems(void* ptr, struct QtCore_PackedString key);
void QUrlQuery_RemoveQueryItem(void* ptr, struct QtCore_PackedString key);
void QUrlQuery_SetQuery(void* ptr, struct QtCore_PackedString queryString);
void QUrlQuery_SetQueryDelimiters(void* ptr, void* valueDelimiter, void* pairDelimiter);
void QUrlQuery_Swap(void* ptr, void* other);
void QUrlQuery_DestroyQUrlQuery(void* ptr);
void* QUrlQuery_QueryPairDelimiter(void* ptr);
void* QUrlQuery_QueryValueDelimiter(void* ptr);
struct QtCore_PackedString QUrlQuery_Query(void* ptr, long long encoding);
struct QtCore_PackedString QUrlQuery_QueryItemValue(void* ptr, struct QtCore_PackedString key, long long encoding);
struct QtCore_PackedString QUrlQuery_ToString(void* ptr, long long encoding);
struct QtCore_PackedString QUrlQuery_AllQueryItemValues(void* ptr, struct QtCore_PackedString key, long long encoding);
char QUrlQuery_HasQueryItem(void* ptr, struct QtCore_PackedString key);
char QUrlQuery_IsEmpty(void* ptr);
void* QUuid_QUuid_CreateUuid();
void* QUuid_QUuid_CreateUuidV3(void* ns, void* baseData);
void* QUuid_QUuid_CreateUuidV32(void* ns, struct QtCore_PackedString baseData);
void* QUuid_QUuid_CreateUuidV5(void* ns, void* baseData);
void* QUuid_QUuid_CreateUuidV52(void* ns, struct QtCore_PackedString baseData);
void* QUuid_QUuid_FromRfc4122(void* bytes);
void* QUuid_QUuid_FromString2(void* text);
void* QUuid_QUuid_FromString(void* text);
void* QUuid_NewQUuid();
void* QUuid_NewQUuid6(void* text);
void* QUuid_NewQUuid4(struct QtCore_PackedString text);
void* QUuid_NewQUuid3(unsigned int l, unsigned short w1, unsigned short w2, char* b1, char* b2, char* b3, char* b4, char* b5, char* b6, char* b7, char* b8);
void* QUuid_ToByteArray(void* ptr);
void* QUuid_ToByteArray2(void* ptr, long long mode);
void* QUuid_ToRfc4122(void* ptr);
struct QtCore_PackedString QUuid_ToString(void* ptr);
struct QtCore_PackedString QUuid_ToString2(void* ptr, long long mode);
long long QUuid_Variant(void* ptr);
long long QUuid_Version(void* ptr);
char QUuid_IsNull(void* ptr);
unsigned int QUuid_Data1(void* ptr);
void QUuid_SetData1(void* ptr, unsigned int vui);
unsigned short QUuid_Data2(void* ptr);
void QUuid_SetData2(void* ptr, unsigned short vus);
unsigned short QUuid_Data3(void* ptr);
void* QVariant_NewQVariant();
void* QVariant_NewQVariant20(void* c);
void* QVariant_NewQVariant6(void* s);
void* QVariant_NewQVariant18(void* val);
void* QVariant_NewQVariant47(void* other);
void* QVariant_NewQVariant2(long long ty);
void* QVariant_NewQVariant11(char val);
void* QVariant_NewQVariant16(void* val);
void* QVariant_NewQVariant15(void* val);
void* QVariant_NewQVariant21(void* val);
void* QVariant_NewQVariant23(void* val);
void* QVariant_NewQVariant39(void* val);
void* QVariant_NewQVariant26(void* val);
void* QVariant_NewQVariant43(void* val);
void* QVariant_NewQVariant44(void* val);
void* QVariant_NewQVariant42(void* val);
void* QVariant_NewQVariant41(void* val);
void* QVariant_NewQVariant31(void* val);
void* QVariant_NewQVariant32(void* val);
void* QVariant_NewQVariant24(void* val);
void* QVariant_NewQVariant35(void* l);
void* QVariant_NewQVariant25(void* val);
void* QVariant_NewQVariant45(void* val);
void* QVariant_NewQVariant46(void* val);
void* QVariant_NewQVariant29(void* val);
void* QVariant_NewQVariant30(void* val);
void* QVariant_NewQVariant33(void* val);
void* QVariant_NewQVariant34(void* val);
void* QVariant_NewQVariant36(void* regExp);
void* QVariant_NewQVariant37(void* re);
void* QVariant_NewQVariant27(void* val);
void* QVariant_NewQVariant28(void* val);
void* QVariant_NewQVariant17(struct QtCore_PackedString val);
void* QVariant_NewQVariant19(struct QtCore_PackedString val);
void* QVariant_NewQVariant22(void* val);
void* QVariant_NewQVariant38(void* val);
void* QVariant_NewQVariant40(void* val);
void* QVariant_NewQVariant5(void* p);
void* QVariant_NewQVariant14(char* val);
void* QVariant_NewQVariant12(double val);
void* QVariant_NewQVariant13(float val);
void* QVariant_NewQVariant3(int typeId, void* copy);
void* QVariant_NewQVariant7(int val);
void* QVariant_NewQVariant9(long long val);
void* QVariant_NewQVariant10(unsigned long long val);
void* QVariant_NewQVariant8(unsigned int val);
long long QVariant_QVariant_NameToType(char* name);
char QVariant_Convert(void* ptr, int targetTypeId);
struct QtCore_PackedString QVariant_QVariant_TypeToName(int typeId);
void QVariant_Clear(void* ptr);
void QVariant_Swap(void* ptr, void* other);
void QVariant_DestroyQVariant(void* ptr);
void* QVariant_ToBitArray(void* ptr);
void* QVariant_ToByteArray(void* ptr);
void* QVariant_ToChar(void* ptr);
void* QVariant_ToDate(void* ptr);
void* QVariant_ToDateTime(void* ptr);
void* QVariant_ToEasingCurve(void* ptr);
struct QtCore_PackedList QVariant_ToHash(void* ptr);
void* QVariant_ToJsonArray(void* ptr);
void* QVariant_ToJsonDocument(void* ptr);
void* QVariant_ToJsonObject(void* ptr);
void* QVariant_ToJsonValue(void* ptr);
void* QVariant_ToLine(void* ptr);
void* QVariant_ToLineF(void* ptr);
struct QtCore_PackedList QVariant_ToList(void* ptr);
void* QVariant_ToLocale(void* ptr);
struct QtCore_PackedList QVariant_ToMap(void* ptr);
void* QVariant_ToModelIndex(void* ptr);
void* QVariant_ToPersistentModelIndex(void* ptr);
void* QVariant_ToPoint(void* ptr);
void* QVariant_ToPointF(void* ptr);
void* QVariant_ToRect(void* ptr);
void* QVariant_ToRectF(void* ptr);
void* QVariant_ToRegExp(void* ptr);
void* QVariant_ToRegularExpression(void* ptr);
void* QVariant_ToSize(void* ptr);
void* QVariant_ToSizeF(void* ptr);
struct QtCore_PackedString QVariant_ToString(void* ptr);
struct QtCore_PackedString QVariant_ToStringList(void* ptr);
void* QVariant_ToTime(void* ptr);
void* QVariant_ToUrl(void* ptr);
void* QVariant_ToUuid(void* ptr);
long long QVariant_Type(void* ptr);
char QVariant_CanConvert(void* ptr, int targetTypeId);
char QVariant_IsNull(void* ptr);
char QVariant_IsValid(void* ptr);
char QVariant_ToBool(void* ptr);
struct QtCore_PackedString QVariant_TypeName(void* ptr);
double QVariant_ToDouble(void* ptr, char* ok);
float QVariant_ToFloat(void* ptr, char* ok);
int QVariant_ToInt(void* ptr, char* ok);
int QVariant_UserType(void* ptr);
long long QVariant_ToLongLong(void* ptr, char* ok);
double QVariant_ToReal(void* ptr, char* ok);
unsigned long long QVariant_ToULongLong(void* ptr, char* ok);
unsigned int QVariant_ToUInt(void* ptr, char* ok);
void* QVariant_ToColor(void* ptr);
void* QVariant_ToFont(void* ptr);
void* QVariant_ToImage(void* ptr);
void* QVariant_ToObject(void* ptr);
void* QVariant_ToIcon(void* ptr);
void* QVariant_ToBrush(void* ptr);
void* QVariant___QVariant_val_atList26(void* ptr, struct QtCore_PackedString v, int i);
void QVariant___QVariant_val_setList26(void* ptr, struct QtCore_PackedString key, void* i);
void* QVariant___QVariant_val_newList26(void* ptr);
struct QtCore_PackedList QVariant___QVariant_val_keyList26(void* ptr);
void* QVariant___QVariant_val_atList24(void* ptr, int i);
void QVariant___QVariant_val_setList24(void* ptr, void* i);
void* QVariant___QVariant_val_newList24(void* ptr);
void* QVariant___QVariant_val_atList25(void* ptr, struct QtCore_PackedString v, int i);
void QVariant___QVariant_val_setList25(void* ptr, struct QtCore_PackedString key, void* i);
void* QVariant___QVariant_val_newList25(void* ptr);
struct QtCore_PackedList QVariant___QVariant_val_keyList25(void* ptr);
void* QVariant___toHash_atList(void* ptr, struct QtCore_PackedString v, int i);
void QVariant___toHash_setList(void* ptr, struct QtCore_PackedString key, void* i);
void* QVariant___toHash_newList(void* ptr);
struct QtCore_PackedList QVariant___toHash_keyList(void* ptr);
void* QVariant___toList_atList(void* ptr, int i);
void QVariant___toList_setList(void* ptr, void* i);
void* QVariant___toList_newList(void* ptr);
void* QVariant___toMap_atList(void* ptr, struct QtCore_PackedString v, int i);
void QVariant___toMap_setList(void* ptr, struct QtCore_PackedString key, void* i);
void* QVariant___toMap_newList(void* ptr);
struct QtCore_PackedList QVariant___toMap_keyList(void* ptr);
struct QtCore_PackedString QVariant_____QVariant_val_keyList_atList26(void* ptr, int i);
void QVariant_____QVariant_val_keyList_setList26(void* ptr, struct QtCore_PackedString i);
void* QVariant_____QVariant_val_keyList_newList26(void* ptr);
struct QtCore_PackedString QVariant_____QVariant_val_keyList_atList25(void* ptr, int i);
void QVariant_____QVariant_val_keyList_setList25(void* ptr, struct QtCore_PackedString i);
void* QVariant_____QVariant_val_keyList_newList25(void* ptr);
struct QtCore_PackedString QVariant_____toHash_keyList_atList(void* ptr, int i);
void QVariant_____toHash_keyList_setList(void* ptr, struct QtCore_PackedString i);
void* QVariant_____toHash_keyList_newList(void* ptr);
struct QtCore_PackedString QVariant_____toMap_keyList_atList(void* ptr, int i);
void QVariant_____toMap_keyList_setList(void* ptr, struct QtCore_PackedString i);
void* QVariant_____toMap_keyList_newList(void* ptr);
int Qt_LastGestureType_Type();
struct QtCore_PackedString Qt_Qt_ConvertFromPlainText(struct QtCore_PackedString plain, long long mode);
char Qt_Qt_MightBeRichText(struct QtCore_PackedString text);

#ifdef __cplusplus
}
#endif

#endif