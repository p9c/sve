package main

// DO NOT EDIT: This file was generated by sve. Please regenerate instead of editing or add additional code in a separate file.

import "fmt"
import "reflect"
import "encoding/json"
import "github.com/p9c/sve/engine"
import js "github.com/p9c/sve/pkg/js"

import "net/http"
import "log"
import "path/filepath"

type RandomAnimalData struct {
	Animal		Animal
	ContentType	string
	IsLoading	bool
	ClickCount	int
	Target		string
	Url		string
}

type Animal struct {
	Url string `json:"url"`
}

func (comp *RandomAnimal) NewData(props engine.Props) (interface{}, error) {
	ret := &RandomAnimalData{}
	ret.Target, _ = props["target"].(string)
	ret.Url, _ = props["url"].(string)
	return ret, nil
}

func (data *RandomAnimalData) HandleClick(event *event.DOMEvent) {
	data.ClickCount = data.ClickCount + 1
	data.Animal = Animal{}
	ee := event.EventEnv()
	go func() {
		ee.Lock()
		data.IsLoading = true
		ee.UnlockRender()
		res, err := http.Get(data.Url)
		if err != nil {
			log.Printf("Error fetch()ing: %v", err)
			return
		}
		defer res.Body.Close()

		var a Animal
		err = json.NewDecoder(res.Body).Decode(&a)
		if err != nil {
			log.Printf("Error JSON decoding: %v", err)
			return
		}

		ee.Lock()
		defer ee.UnlockRender()
		data.Animal = a
		e := filepath.Ext(data.Animal.Url)
		data.ContentType = getSourceType(e)
		data.IsLoading = false
	}()
}

func getSourceType(e string) string {
	switch e {
	case ".jpeg", ".png", ".jpg", ".JPG":
		return "image"
	case ".mp4", ".gif":
		return "video"
	default:
		return "image"
	}
}
func (c *RandomAnimal) Build(vgin *sve.BuildIn) (vgout *sve.BuildOut) {

	vgout = &sve.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *sve.VGNode
	vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "random-animal"}}}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "class", Val: "message"}}}
		vgparent.AppendChild(vgn)
		{
			vghtml := fmt.Sprint("どんな子がくるかな？")
			vgn.InnerHTML = &vghtml
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "button", Attr: []sve.VGAttribute(nil)}
		vgparent.AppendChild(vgn)
		vgn.DOMEventHandlerSpecList = append(vgn.DOMEventHandlerSpecList, sve.DOMEventHandlerSpec{
			EventType:	"click",
			Func:		func(event *sve.DOMEvent) { data.HandleClick(event) },
			// TODO: implement capture, etc. mostly need to decide syntax
		})
		{
			vgparent := vgn
			_ = vgparent
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
			vgparent.AppendChild(vgn)
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "span", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vghtml := fmt.Sprint(data.Target)
				vgn.InnerHTML = &vghtml
			}
			vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "げっと\n    "}
			vgparent.AppendChild(vgn)
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		if data.ClickCount > 0 {
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "span", Attr: []sve.VGAttribute(nil)}
				vgparent.AppendChild(vgn)
				{
					vghtml := fmt.Sprint(data.ClickCount)
					vgn.InnerHTML = &vghtml
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "回目\n    "}
				vgparent.AppendChild(vgn)
			}
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		if data.IsLoading {
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "Loading..."}
				vgparent.AppendChild(vgn)
			}
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
		vgparent.AppendChild(vgn)
		if len(data.Animal.Url) > 0 {
			vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "div", Attr: []sve.VGAttribute(nil)}
			vgparent.AppendChild(vgn)
			{
				vgparent := vgn
				_ = vgparent
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				if data.ContentType == "image" {
					vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "img", Attr: []sve.VGAttribute(nil)}
					vgparent.AppendChild(vgn)
					vgn.Attr = append(vgn.Attr, sve.VGAttribute{Key: "src", Val: fmt.Sprint(data.Animal.Url)})
				}
				vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n        "}
				vgparent.AppendChild(vgn)
				if data.ContentType == "video" {
					vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "video", Attr: []sve.VGAttribute{sve.VGAttribute{Namespace: "", Key: "controls", Val: ""}}}
					vgparent.AppendChild(vgn)
					vgn.Attr = append(vgn.Attr, sve.VGAttribute{Key: "src", Val: fmt.Sprint(data.Animal.Url)})
					{
						vgparent := vgn
						_ = vgparent
						vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    "}
						vgparent.AppendChild(vgn)
					}
				}
			}
		}
		vgn = &sve.VGNode{Type: sve.VGNodeType(1), Data: "\n"}
		vgparent.AppendChild(vgn)
	}
	vgn = &sve.VGNode{Type: sve.VGNodeType(3), Data: "style", Attr: []sve.VGAttribute(nil)}
	{
		vgn.AppendChild(&sve.VGNode{Type: sve.VGNodeType(1), Data: "\n    img, video {\n        width: 500px;\n        height: 500px;\n        object-fit: cover;\n        margin: 50px 0;\n    }\n    button {\n        font-size: 5em;\n        font-weight: bold;\n        margin: 50px 0;\n        padding: 10px 30px;\n        background-color: lightsalmon;\n        color: #fff;\n        border-style: none;\n    }\n    button:hover {\n        background-color: darksalmon;\n        color: #fff;\n        cursor: pointer;\n    }\n    .random-animal {\n        text-align: center;\n    }\n    .message {\n        font-size: 4em;\n    }\n", Attr: []sve.VGAttribute(nil)})
	}
	vgout.AppendCSS(vgn)
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ json.RawMessage
var _ js.Value

type RandomAnimal struct {}
